[{"C:\\Users\\s_martyanova\\CheckList\\Front\\src\\index.js":"1","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\serviceWorker.js":"2","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\App.js":"3","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\context\\UserContext.js":"4","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\context\\LayoutContext.js":"5","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\themes\\index.js":"6","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Layout\\Layout.js":"7","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\pages\\error\\Error.js":"8","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\pages\\login\\Login.js":"9","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\themes\\default.js":"10","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\pages\\login\\styles.js":"11","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\pages\\error\\styles.js":"12","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\pages\\trackedwells\\TrackedWells.js":"13","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\pages\\trackedwells\\OneTrackedWell.js":"14","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\pages\\mnemonic\\MnemonicList.js":"15","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\pages\\mnemonic\\Mnemonic.js":"16","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\pages\\logs\\Logs.js":"17","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\pages\\database\\Database.js":"18","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\pages\\trash\\Trash.js":"19","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Layout\\styles.js":"20","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\pages\\strata\\Strata.js":"21","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\pages\\admin\\Admin.js":"22","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\pages\\help\\Help.js":"23","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\pages\\checklist\\Checklist.js":"24","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\pages\\services\\Service.js":"25","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\pages\\services\\Services.js":"26","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\pages\\reports\\Reports.js":"27","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\pages\\customers\\Customers.js":"28","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\pages\\reports\\Report.js":"29","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\pages\\database\\data.js":"30","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Loading\\Loading.js":"31","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Toasts\\WarningToast.js":"32","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\pages\\dashboard\\Dashboard.js":"33","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\pages\\tables\\Tables.js":"34","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Sidebar\\Sidebar.js":"35","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\pages\\textLabels.js":"36","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Header\\Header.js":"37","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\NotFound\\NotFound.js":"38","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Toolbar\\CustomToolbarSelectTrash.js":"39","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Dialogs\\EditWellboreDialog.js":"40","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Dialogs\\EditWellDialog.js":"41","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Dialogs\\EditClusterDialog.js":"42","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Toolbar\\CustomToolbarSelect.js":"43","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Dialogs\\EditServiceDialog.js":"44","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Dialogs\\AddServiceDialog.js":"45","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Dialogs\\FillDataDialog.js":"46","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Dialogs\\DensityDialog.js":"47","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Dialogs\\DigitalDialog.js":"48","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Dialogs\\FullnessDialog.js":"49","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\pages\\reports\\Scripts.js":"50","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\pages\\checklist\\styles.js":"51","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\pages\\checklist\\Scripts.js":"52","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Toasts\\SuccessToast.js":"53","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Toasts\\NoChangesToast.js":"54","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Toasts\\ValidityToast.js":"55","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\pages\\calcScripts.js":"56","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Dialogs\\EditFieldDialog.js":"57","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Dialogs\\EditCustomerDialog.js":"58","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Dialogs\\AddFieldDialog.js":"59","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Dialogs\\AddCustomerDialog.js":"60","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Toolbar\\CustomToolbarSelectWithAdd.js":"61","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Dialogs\\EditSampleExDialog.js":"62","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\PageTitle\\PageTitle.js":"63","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Dialogs\\AddToolDialog.js":"64","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Header\\styles.js":"65","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Sidebar\\styles.js":"66","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\pages\\dashboard\\mock.js":"67","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\pages\\dashboard\\Arial.js":"68","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Toasts\\ErrorToast.js":"69","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Sidebar\\components\\Dot.js":"70","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Sidebar\\components\\SidebarLink\\SidebarLink.js":"71","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\pages\\dashboard\\styles.js":"72","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\pages\\dashboard\\components\\Table\\Table.js":"73","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\pages\\dashboard\\components\\CustomChart\\ServicesBarChart.js":"74","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\pages\\dashboard\\components\\CustomChart\\ControlBarChart.js":"75","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\pages\\dashboard\\components\\CustomChart\\SocietyBarChart.js":"76","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\pages\\dashboard\\components\\CustomChart\\EscortBarChart.js":"77","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\pages\\dashboard\\components\\CustomChart\\CustomBarChart.js":"78","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\pages\\dashboard\\components\\CustomChart\\OperationsBarChart.js":"79","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Blocked\\Blocked.js":"80","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\pages\\help\\CustomAccordion.js":"81","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\pages\\help\\styles.js":"82","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Dialogs\\scripts.js":"83","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\pages\\checklist\\data.js":"84","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Wrappers\\Wrappers.js":"85","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Buttons\\ToggleButtonSizes\\ToggleButtonSizes.js":"86","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Widget\\Widget.js":"87","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\PageTitle\\styles.js":"88","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Sidebar\\components\\SidebarLink\\styles.js":"89","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Widget\\styles.js":"90","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Dialogs\\AdminDialog.js":"91","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Dialogs\\EditStrataDialog.js":"92","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Dialogs\\AddStrataDialog.js":"93","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Toasts\\ValidAdmin.js":"94","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Dialogs\\EditMethodParamDialog.js":"95","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Dialogs\\AddMethodDialog.js":"96","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Dialogs\\AddMethodParamDialog.js":"97","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Dialogs\\AddMethodClassDialog.js":"98","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Dialogs\\AddMnemonicDialog.js":"99","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Dialogs\\EditMnemonicDialog.js":"100"},{"size":896,"mtime":1726667107292,"results":"101","hashOfConfig":"102"},{"size":5083,"mtime":1726667107414,"results":"103","hashOfConfig":"102"},{"size":1825,"mtime":1726667107229,"results":"104","hashOfConfig":"102"},{"size":3031,"mtime":1726667107290,"results":"105","hashOfConfig":"102"},{"size":1445,"mtime":1726667107289,"results":"106","hashOfConfig":"102"},{"size":604,"mtime":1726667107416,"results":"107","hashOfConfig":"102"},{"size":3162,"mtime":1726667107258,"results":"108","hashOfConfig":"102"},{"size":1430,"mtime":1726667107326,"results":"109","hashOfConfig":"102"},{"size":8501,"mtime":1726667107392,"results":"110","hashOfConfig":"102"},{"size":3151,"mtime":1726667107415,"results":"111","hashOfConfig":"102"},{"size":3281,"mtime":1726667107395,"results":"112","hashOfConfig":"102"},{"size":1395,"mtime":1726667107328,"results":"113","hashOfConfig":"102"},{"size":7551,"mtime":1726667107412,"results":"114","hashOfConfig":"102"},{"size":51738,"mtime":1726667107411,"results":"115","hashOfConfig":"102"},{"size":6155,"mtime":1726667107398,"results":"116","hashOfConfig":"102"},{"size":23605,"mtime":1726667107397,"results":"117","hashOfConfig":"102"},{"size":6915,"mtime":1728033965666,"results":"118","hashOfConfig":"102"},{"size":30805,"mtime":1726667107324,"results":"119","hashOfConfig":"102"},{"size":38339,"mtime":1726667107413,"results":"120","hashOfConfig":"102"},{"size":710,"mtime":1726667107260,"results":"121","hashOfConfig":"102"},{"size":16895,"mtime":1726667107406,"results":"122","hashOfConfig":"102"},{"size":4879,"mtime":1726667107294,"results":"123","hashOfConfig":"102"},{"size":17659,"mtime":1726667107330,"results":"124","hashOfConfig":"102"},{"size":53112,"mtime":1726667107300,"results":"125","hashOfConfig":"102"},{"size":10428,"mtime":1726667107403,"results":"126","hashOfConfig":"102"},{"size":5998,"mtime":1726667107404,"results":"127","hashOfConfig":"102"},{"size":5881,"mtime":1726667107400,"results":"128","hashOfConfig":"102"},{"size":13438,"mtime":1726667107303,"results":"129","hashOfConfig":"102"},{"size":55431,"mtime":1726667107399,"results":"130","hashOfConfig":"102"},{"size":373,"mtime":1726667107325,"results":"131","hashOfConfig":"102"},{"size":345,"mtime":1726667107261,"results":"132","hashOfConfig":"102"},{"size":830,"mtime":1726667107278,"results":"133","hashOfConfig":"102"},{"size":37766,"mtime":1728037461032,"results":"134","hashOfConfig":"102"},{"size":2146,"mtime":1726667107408,"results":"135","hashOfConfig":"102"},{"size":4830,"mtime":1726667107267,"results":"136","hashOfConfig":"102"},{"size":903,"mtime":1726667107409,"results":"137","hashOfConfig":"102"},{"size":3957,"mtime":1726667107255,"results":"138","hashOfConfig":"102"},{"size":584,"mtime":1726667107262,"results":"139","hashOfConfig":"102"},{"size":1367,"mtime":1726667107280,"results":"140","hashOfConfig":"102"},{"size":3583,"mtime":1726667107249,"results":"141","hashOfConfig":"102"},{"size":2879,"mtime":1726667107248,"results":"142","hashOfConfig":"102"},{"size":2092,"mtime":1726667107242,"results":"143","hashOfConfig":"102"},{"size":1352,"mtime":1726667107279,"results":"144","hashOfConfig":"102"},{"size":4136,"mtime":1726667107246,"results":"145","hashOfConfig":"102"},{"size":2699,"mtime":1726667107237,"results":"146","hashOfConfig":"102"},{"size":46183,"mtime":1727179184261,"results":"147","hashOfConfig":"102"},{"size":2269,"mtime":1726667107241,"results":"148","hashOfConfig":"102"},{"size":15314,"mtime":1726667107241,"results":"149","hashOfConfig":"102"},{"size":17274,"mtime":1726667107251,"results":"150","hashOfConfig":"102"},{"size":147,"mtime":1726667107401,"results":"151","hashOfConfig":"102"},{"size":1056,"mtime":1726667107302,"results":"152","hashOfConfig":"102"},{"size":4210,"mtime":1726667107301,"results":"153","hashOfConfig":"102"},{"size":805,"mtime":1726667107275,"results":"154","hashOfConfig":"102"},{"size":854,"mtime":1726667107275,"results":"155","hashOfConfig":"102"},{"size":870,"mtime":1726667107277,"results":"156","hashOfConfig":"102"},{"size":7201,"mtime":1726667107295,"results":"157","hashOfConfig":"102"},{"size":3474,"mtime":1726667107243,"results":"158","hashOfConfig":"102"},{"size":4460,"mtime":1728031353661,"results":"159","hashOfConfig":"102"},{"size":3489,"mtime":1726667107234,"results":"160","hashOfConfig":"102"},{"size":4479,"mtime":1726667107233,"results":"161","hashOfConfig":"102"},{"size":1745,"mtime":1726667107280,"results":"162","hashOfConfig":"102"},{"size":3563,"mtime":1726667107246,"results":"163","hashOfConfig":"102"},{"size":665,"mtime":1726667107265,"results":"164","hashOfConfig":"102"},{"size":3136,"mtime":1726667107239,"results":"165","hashOfConfig":"102"},{"size":4047,"mtime":1726667107257,"results":"166","hashOfConfig":"102"},{"size":1362,"mtime":1726667107273,"results":"167","hashOfConfig":"102"},{"size":4288,"mtime":1726667107321,"results":"168","hashOfConfig":"102"},{"size":77764,"mtime":1726667107305,"results":"169","hashOfConfig":"102"},{"size":843,"mtime":1726667107274,"results":"170","hashOfConfig":"102"},{"size":848,"mtime":1726667107269,"results":"171","hashOfConfig":"102"},{"size":4589,"mtime":1726667107271,"results":"172","hashOfConfig":"102"},{"size":3820,"mtime":1726667107323,"results":"173","hashOfConfig":"102"},{"size":1323,"mtime":1726667107321,"results":"174","hashOfConfig":"102"},{"size":2615,"mtime":1726667107319,"results":"175","hashOfConfig":"102"},{"size":2843,"mtime":1726667107316,"results":"176","hashOfConfig":"102"},{"size":4428,"mtime":1726667107320,"results":"177","hashOfConfig":"102"},{"size":2810,"mtime":1726667107318,"results":"178","hashOfConfig":"102"},{"size":4128,"mtime":1726667107317,"results":"179","hashOfConfig":"102"},{"size":3556,"mtime":1726667107318,"results":"180","hashOfConfig":"102"},{"size":410,"mtime":1726667107230,"results":"181","hashOfConfig":"102"},{"size":1204,"mtime":1726667107329,"results":"182","hashOfConfig":"102"},{"size":511,"mtime":1726667107389,"results":"183","hashOfConfig":"102"},{"size":2760,"mtime":1726667107253,"results":"184","hashOfConfig":"102"},{"size":535,"mtime":1726667107301,"results":"185","hashOfConfig":"102"},{"size":3971,"mtime":1726667107287,"results":"186","hashOfConfig":"102"},{"size":1454,"mtime":1726667107232,"results":"187","hashOfConfig":"102"},{"size":2596,"mtime":1726667107284,"results":"188","hashOfConfig":"102"},{"size":533,"mtime":1726667107266,"results":"189","hashOfConfig":"102"},{"size":1474,"mtime":1726667107272,"results":"190","hashOfConfig":"102"},{"size":1015,"mtime":1726667107286,"results":"191","hashOfConfig":"102"},{"size":23320,"mtime":1726667107240,"results":"192","hashOfConfig":"102"},{"size":3754,"mtime":1726667107247,"results":"193","hashOfConfig":"102"},{"size":3205,"mtime":1726667107238,"results":"194","hashOfConfig":"102"},{"size":815,"mtime":1726667107276,"results":"195","hashOfConfig":"102"},{"size":6423,"mtime":1726667107244,"results":"196","hashOfConfig":"102"},{"size":2733,"mtime":1726667107235,"results":"197","hashOfConfig":"102"},{"size":5396,"mtime":1726667107236,"results":"198","hashOfConfig":"102"},{"size":2700,"mtime":1726667107235,"results":"199","hashOfConfig":"102"},{"size":1827,"mtime":1726667107237,"results":"200","hashOfConfig":"102"},{"size":1900,"mtime":1726667107245,"results":"201","hashOfConfig":"102"},{"filePath":"202","messages":"203","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},"n3vovh",{"filePath":"205","messages":"206","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"207","messages":"208","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"209","messages":"210","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211","usedDeprecatedRules":"204"},{"filePath":"212","messages":"213","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"214","messages":"215","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"216","messages":"217","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"218","messages":"219","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"220","messages":"221","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"204"},{"filePath":"223","messages":"224","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"225","messages":"226","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"227","messages":"228","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"229","messages":"230","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231","usedDeprecatedRules":"204"},{"filePath":"232","messages":"233","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234","usedDeprecatedRules":"204"},{"filePath":"235","messages":"236","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"237","usedDeprecatedRules":"204"},{"filePath":"238","messages":"239","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240","usedDeprecatedRules":"204"},{"filePath":"241","messages":"242","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"243","messages":"244","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"245","usedDeprecatedRules":"204"},{"filePath":"246","messages":"247","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"248","usedDeprecatedRules":"204"},{"filePath":"249","messages":"250","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"251","messages":"252","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"253","usedDeprecatedRules":"204"},{"filePath":"254","messages":"255","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"256","messages":"257","errorCount":0,"fatalErrorCount":0,"warningCount":42,"fixableErrorCount":0,"fixableWarningCount":0,"source":"258","usedDeprecatedRules":"204"},{"filePath":"259","messages":"260","errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"261","usedDeprecatedRules":"204"},{"filePath":"262","messages":"263","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"264","usedDeprecatedRules":"204"},{"filePath":"265","messages":"266","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"267","messages":"268","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"269","usedDeprecatedRules":"204"},{"filePath":"270","messages":"271","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"272","usedDeprecatedRules":"204"},{"filePath":"273","messages":"274","errorCount":0,"fatalErrorCount":0,"warningCount":34,"fixableErrorCount":0,"fixableWarningCount":0,"source":"275","usedDeprecatedRules":"204"},{"filePath":"276","messages":"277","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"278","messages":"279","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"280","messages":"281","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"282","messages":"283","errorCount":0,"fatalErrorCount":0,"warningCount":35,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"284","messages":"285","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"286","messages":"287","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"288","usedDeprecatedRules":"204"},{"filePath":"289","messages":"290","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"291","messages":"292","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"293","messages":"294","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"295","messages":"296","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"297","messages":"298","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"299","messages":"300","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"301","messages":"302","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"303","messages":"304","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"305","messages":"306","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"307","usedDeprecatedRules":"204"},{"filePath":"308","messages":"309","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"310","usedDeprecatedRules":"204"},{"filePath":"311","messages":"312","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"313","usedDeprecatedRules":"204"},{"filePath":"314","messages":"315","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"316","usedDeprecatedRules":"204"},{"filePath":"317","messages":"318","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"319","usedDeprecatedRules":"204"},{"filePath":"320","messages":"321","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"322","usedDeprecatedRules":"204"},{"filePath":"323","messages":"324","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"325","messages":"326","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"327","messages":"328","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"329","usedDeprecatedRules":"204"},{"filePath":"330","messages":"331","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"332","messages":"333","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"334","messages":"335","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"336","messages":"337","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"338","usedDeprecatedRules":"204"},{"filePath":"339","messages":"340","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"341","usedDeprecatedRules":"204"},{"filePath":"342","messages":"343","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"344","usedDeprecatedRules":"204"},{"filePath":"345","messages":"346","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"347","usedDeprecatedRules":"204"},{"filePath":"348","messages":"349","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"350","usedDeprecatedRules":"204"},{"filePath":"351","messages":"352","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"353","messages":"354","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"355","messages":"356","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"357","messages":"358","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"359","usedDeprecatedRules":"204"},{"filePath":"360","messages":"361","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"362","messages":"363","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"364","messages":"365","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"366","messages":"367","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"368","usedDeprecatedRules":"204"},{"filePath":"369","messages":"370","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"371","messages":"372","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"373","usedDeprecatedRules":"204"},{"filePath":"374","messages":"375","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"376","messages":"377","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"378","messages":"379","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"380","messages":"381","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"382","usedDeprecatedRules":"204"},{"filePath":"383","messages":"384","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"385","usedDeprecatedRules":"204"},{"filePath":"386","messages":"387","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"388","usedDeprecatedRules":"204"},{"filePath":"389","messages":"390","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"391","usedDeprecatedRules":"204"},{"filePath":"392","messages":"393","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"394","usedDeprecatedRules":"204"},{"filePath":"395","messages":"396","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"397","usedDeprecatedRules":"204"},{"filePath":"398","messages":"399","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"400","messages":"401","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"402","messages":"403","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"404","messages":"405","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"406","messages":"407","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"408","messages":"409","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"410","messages":"411","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"412","usedDeprecatedRules":"204"},{"filePath":"413","messages":"414","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"415","messages":"416","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"417","messages":"418","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"419","messages":"420","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"421","messages":"422","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"423","usedDeprecatedRules":"204"},{"filePath":"424","messages":"425","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"426","usedDeprecatedRules":"204"},{"filePath":"427","messages":"428","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"429","usedDeprecatedRules":"204"},{"filePath":"430","messages":"431","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"432","messages":"433","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"434","usedDeprecatedRules":"204"},{"filePath":"435","messages":"436","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"437","usedDeprecatedRules":"204"},{"filePath":"438","messages":"439","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"440","usedDeprecatedRules":"204"},{"filePath":"441","messages":"442","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"443","usedDeprecatedRules":"204"},{"filePath":"444","messages":"445","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"446","messages":"447","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},"C:\\Users\\s_martyanova\\CheckList\\Front\\src\\index.js",[],["448","449"],"C:\\Users\\s_martyanova\\CheckList\\Front\\src\\serviceWorker.js",[],"C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\App.js",[],"C:\\Users\\s_martyanova\\CheckList\\Front\\src\\context\\UserContext.js",["450","451"],"import React from \"react\";\r\n\r\nimport jwt_decode from \"jwt-decode\";\r\n\r\nvar UserStateContext = React.createContext();\r\nvar UserDispatchContext = React.createContext();\r\n\r\nfunction userReducer(state, action) {\r\n  switch (action.type) {\r\n    case \"LOGIN_SUCCESS\":\r\n      return { ...state, isAuthenticated: true };\r\n    case \"SIGN_OUT_SUCCESS\":\r\n      return { ...state, isAuthenticated: false };\r\n    case \"LOGIN_FAILURE\":\r\n      return { ...state, isAuthenticated: false };\r\n    default: {\r\n      throw new Error(`Unhandled action type: ${action.type}`);\r\n    }\r\n  }\r\n}\r\n\r\nfunction UserProvider({ children }) {\r\n  var token = localStorage.getItem('id_token');\r\n  var [state, dispatch] = React.useReducer(userReducer, {\r\n    isAuthenticated: !!localStorage.getItem(\"id_token\"),\r\n  });\r\n\r\n  return (\r\n    <UserStateContext.Provider value={state}>\r\n      <UserDispatchContext.Provider value={dispatch}>\r\n        {children}\r\n      </UserDispatchContext.Provider>\r\n    </UserStateContext.Provider>\r\n  );\r\n}\r\n\r\nfunction useUserState() {\r\n  var context = React.useContext(UserStateContext);\r\n  if (context === undefined) {\r\n    throw new Error(\"useUserState must be used within a UserProvider\");\r\n  }\r\n  return context;\r\n}\r\n\r\nfunction useUserDispatch() {\r\n  var context = React.useContext(UserDispatchContext);\r\n  if (context === undefined) {\r\n    throw new Error(\"useUserDispatch must be used within a UserProvider\");\r\n  }\r\n  return context;\r\n}\r\n\r\nexport { UserProvider, useUserState, useUserDispatch, loginUser, signOut };\r\n\r\n// ###########################################################\r\nfunction loginUser (dispatch, login, password, history, setIsLoading, setError){\r\n    setIsLoading(true);\r\n    \r\n      fetch(process.env.REACT_APP_API + 'api-token-auth/',{\r\n        method: 'POST',\r\n        headers:{\r\n            'Accept':'application/json',\r\n            'Content-Type':'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n            \"username\": login,\r\n            \"password\": password\r\n        }) \r\n    })\r\n    .then(response => response.json())\r\n    .then(data=>{\r\n      console.log('data', data)\r\n      localStorage.setItem('id_token', data.token);\r\n      localStorage.setItem('role', data.role);\r\n      localStorage.setItem('enter_time', Date.now());\r\n      localStorage.setItem('name', data.name);\r\n      if(data.token !== undefined) {\r\n        dispatch({ type: 'LOGIN_SUCCESS' })\r\n        history.push('/app/checklist')\r\n      } else {\r\n        setError(true);\r\n        localStorage.removeItem('name');\r\n        localStorage.removeItem(\"id_token\");\r\n        localStorage.removeItem(\"login\");\r\n        localStorage.removeItem(\"role\");\r\n        localStorage.removeItem(\"enter_time\");\r\n        //dispatch({ type: \"LOGIN_FAILURE\" });\r\n      }\r\n    })\r\n      setIsLoading(false)\r\n    };\r\n\r\n\r\nfunction signOut(dispatch, history) {\r\n  localStorage.removeItem('name');\r\n  localStorage.removeItem(\"id_token\");\r\n  localStorage.removeItem(\"login\");\r\n  dispatch({ type: \"SIGN_OUT_SUCCESS\" });\r\n  history.push(\"/login\");\r\n}\r\n","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\context\\LayoutContext.js",[],"C:\\Users\\s_martyanova\\CheckList\\Front\\src\\themes\\index.js",[],"C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Layout\\Layout.js",[],"C:\\Users\\s_martyanova\\CheckList\\Front\\src\\pages\\error\\Error.js",[],"C:\\Users\\s_martyanova\\CheckList\\Front\\src\\pages\\login\\Login.js",["452"],"import React, { useState } from \"react\";\r\nimport {\r\n  Grid,\r\n  CircularProgress,\r\n  Typography,\r\n  Button,\r\n  Tabs,\r\n  Tab,\r\n  TextField,\r\n  Fade,\r\n  Divider\r\n} from \"@material-ui/core\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\n// styles\r\nimport useStyles from \"./styles\";\r\n\r\n// logo\r\nimport logo2 from \"./4_IGIRGI.png\"\r\n// context\r\nimport { useUserDispatch, loginUser } from \"../../context/UserContext\";\r\n\r\nfunction Login(props) {\r\n  var classes = useStyles();\r\n\r\n  // global\r\n  var userDispatch = useUserDispatch();\r\n\r\n  // local\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  var [error, setError] = useState(false);\r\n  const [activeTabId, setActiveTabId] = useState(0);\r\n  const [nameValue, setNameValue] = useState(\"\");\r\n  const [loginValue, setLoginValue] = useState(\"\");\r\n  const [passwordValue, setPasswordValue] = useState(\"\");\r\n\r\n  return (\r\n    <Grid container className={classes.container}>\r\n      <div className={classes.logotypeContainer} style={{backgroundColor:\"#b2b2b2\"}}>\r\n        <img src={logo2} alt=\"logo\" className={classes.logotypeImage} />\r\n        <Typography className={classes.logotypeText} style={{textAlign: \"center\"}}>Качество данных ГИС<br/><Divider style={{backgroundColor: \"white\"}}/>АО «‎ИГиРГИ»</Typography>\r\n      </div>\r\n      <div className={classes.formContainer} style={{backgroundColor:\"white\"}}>\r\n        <div className={classes.form}>\r\n          <Tabs\r\n            value={activeTabId}\r\n            onChange={(e, id) => setActiveTabId(id)}\r\n            indicatorColor=\"primary\"\r\n            textColor=\"primary\"\r\n            centered\r\n          >\r\n            <Tab label=\"Войти\" classes={{ root: classes.tab }} />\r\n            {/*<Tab label=\"Новый\" classes={{ root: classes.tab }} />*/}\r\n          </Tabs>\r\n          {activeTabId === 0 && (\r\n            <React.Fragment>\r\n              <Typography variant=\"h2\" className={classes.greeting}>\r\n                Введите свой логин и пароль\r\n              </Typography>\r\n              <div className={classes.formDividerContainer}>\r\n                <div className={classes.formDivider} /> \r\n              </div>\r\n              <Fade in={error}>\r\n                <Typography color=\"secondary\" className={classes.errorMessage}>\r\n                  Ошибка в логине или пароле.\r\n                </Typography>\r\n              </Fade>\r\n              <TextField\r\n                id=\"email\"\r\n                InputProps={{\r\n                  classes: {\r\n                    underline: classes.textFieldUnderline,\r\n                    input: classes.textField,\r\n                  },\r\n                }}\r\n                value={loginValue}\r\n                onChange={e => {setLoginValue(e.target.value.toLowerCase()); localStorage.setItem('login', e.target.value.toLowerCase());}}\r\n                margin=\"normal\"\r\n                placeholder=\"Введите логин\"\r\n                type=\"email\"\r\n                fullWidth\r\n              />\r\n              <TextField\r\n                id=\"password\"\r\n                InputProps={{\r\n                  classes: {\r\n                    underline: classes.textFieldUnderline,\r\n                    input: classes.textField,\r\n                  },\r\n                }}\r\n                value={passwordValue}\r\n                onChange={e => setPasswordValue(e.target.value)}\r\n                margin=\"normal\"\r\n                placeholder=\"Введите пароль\"\r\n                type=\"password\"\r\n                fullWidth\r\n              />\r\n              <div className={classes.formButtons}>\r\n                {isLoading ? (\r\n                  <CircularProgress size={26} className={classes.loginLoader} />\r\n                ) : (\r\n                  <Button\r\n                    disabled={\r\n                      loginValue.length === 0 || passwordValue.length === 0\r\n                    }\r\n                    onClick={() =>\r\n                      loginUser(\r\n                        userDispatch,\r\n                        loginValue,\r\n                        passwordValue,\r\n                        props.history,\r\n                        setIsLoading,\r\n                        setError,\r\n                      )\r\n                    }\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    size=\"large\"\r\n                  >\r\n                    Войти\r\n                  </Button>\r\n                )}\r\n                {/*<Button\r\n                  color=\"primary\"\r\n                  size=\"large\"\r\n                  className={classes.forgetButton}\r\n                >\r\n                  Забыли пароль\r\n                </Button>*/}\r\n              </div>\r\n            </React.Fragment>\r\n          )}\r\n          {activeTabId === 1 && (\r\n            <React.Fragment>\r\n              <Typography variant=\"h2\" className={classes.subGreeting}>\r\n                Отправьте заявку на создание нового аккаунта\r\n              </Typography>\r\n              <div className={classes.formDividerContainer}>\r\n                <div className={classes.formDivider} /> \r\n              </div>\r\n              <Fade in={error}>\r\n                <Typography color=\"secondary\" className={classes.errorMessage}>\r\n                  Ошибка в логине или пароле.\r\n                </Typography>\r\n              </Fade>\r\n              <TextField\r\n                id=\"name\"\r\n                InputProps={{\r\n                  classes: {\r\n                    underline: classes.textFieldUnderline,\r\n                    input: classes.textField,\r\n                  },\r\n                }}\r\n                value={nameValue}\r\n                onChange={e => setNameValue(e.target.value)}\r\n                margin=\"normal\"\r\n                placeholder=\"Full Name\"\r\n                type=\"text\"\r\n                fullWidth\r\n              />\r\n              <TextField\r\n                id=\"email\"\r\n                InputProps={{\r\n                  classes: {\r\n                    underline: classes.textFieldUnderline,\r\n                    input: classes.textField,\r\n                  },\r\n                }}\r\n                value={loginValue}\r\n                onChange={e => setLoginValue(e.target.value)}\r\n                margin=\"normal\"\r\n                placeholder=\"Email Adress\"\r\n                type=\"email\"\r\n                fullWidth\r\n              />\r\n              <TextField\r\n                id=\"password\"\r\n                InputProps={{\r\n                  classes: {\r\n                    underline: classes.textFieldUnderline,\r\n                    input: classes.textField,\r\n                  },\r\n                }}\r\n                value={passwordValue}\r\n                onChange={e => setPasswordValue(e.target.value)}\r\n                margin=\"normal\"\r\n                placeholder=\"Password\"\r\n                type=\"password\"\r\n                fullWidth\r\n              />\r\n              <div className={classes.creatingButtonContainer}>\r\n                {isLoading ? (\r\n                  <CircularProgress size={26} />\r\n                ) : (\r\n                  <Button\r\n                    onClick={() =>\r\n                      loginUser(\r\n                        userDispatch,\r\n                        loginValue,\r\n                        passwordValue,\r\n                        props.history,\r\n                        setIsLoading,\r\n                        setError,\r\n                        error\r\n                      )\r\n                    }\r\n                    disabled={\r\n                      loginValue.length === 0 ||\r\n                      passwordValue.length === 0 ||\r\n                      nameValue.length === 0\r\n                    }\r\n                    size=\"large\"\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    fullWidth\r\n                    className={classes.createAccountButton}\r\n                  >\r\n                    Отправить заявку\r\n                  </Button>\r\n                )}\r\n              </div>\r\n            </React.Fragment>\r\n                  )}\r\n        </div>\r\n        <Typography color=\"primary\" className={classes.copyright}>\r\n        © {new Date().getFullYear()} <a style={{ textDecoration: 'none', color: 'inherit' }}>АО «‎ИГиРГИ»</a>. Все права защищены.\r\n        </Typography>\r\n      </div>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default withRouter(Login);\r\n","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\themes\\default.js",[],"C:\\Users\\s_martyanova\\CheckList\\Front\\src\\pages\\login\\styles.js",[],"C:\\Users\\s_martyanova\\CheckList\\Front\\src\\pages\\error\\styles.js",[],"C:\\Users\\s_martyanova\\CheckList\\Front\\src\\pages\\trackedwells\\TrackedWells.js",["453","454","455","456"],"import React, {useState, useEffect} from 'react';\r\n\r\nimport PageTitle from \"../../components/PageTitle\";\r\n\r\nimport MUIDataTable from \"mui-datatables\";\r\nimport Blocked from \"../../components/Blocked/Blocked\";\r\nimport {\r\n    Route,\r\n    Switch,\r\n    Link\r\n  } from \"react-router-dom\";\r\n\r\nimport {\r\n    Grid,\r\n    Button,\r\n    Typography,\r\n    CircularProgress,\r\n    Chip\r\n} from \"@material-ui/core\";\r\nimport { useHistory } from \"react-router\";\r\nimport OneTrackedWell from './OneTrackedWell'\r\n\r\nfunction TrackedWells(props) {\r\n    const [filterData, setFilterData] = useState([])\r\n    const history = useHistory()\r\n    const constant = false\r\n    const role = localStorage.getItem(\"role\")\r\n\r\n    const [trackedData, setTrackedData] = useState([])\r\n    const getTrackedData = () => {\r\n      fetch(process.env.REACT_APP_API+'department_summary/?format=json', { headers : { \r\n          'Content-Type': 'application/json',\r\n          'Accept': 'application/json',\r\n          'Authorization': \"Token \" + localStorage.getItem('id_token')\r\n         }\r\n      }) \r\n      .then(response=>response.json())\r\n      .then(data=>{\r\n          setTrackedData(data)\r\n          setFilterData(data)\r\n      })\r\n    }\r\n\r\n    const colorForChip = (val) => {\r\n      if (val === \"Должна начаться\" || val === \"В ожидании\")\r\n          return \"orange\"\r\n      else if (val === \"В бурении\")\r\n          return \"blue\"\r\n      else if (val === \"Добурена\")\r\n          return \"red\"\r\n      else return \"green\"\r\n      \r\n  }\r\n\r\n  const filterTable = (param) => {\r\n    if (param !== \"all\")\r\n      setFilterData(trackedData.filter(item => item.status_wellbore === param))\r\n    else \r\n      setFilterData(trackedData)\r\n  }\r\n\r\n  useEffect(() => {\r\n    getTrackedData()\r\n  }, [constant])\r\n\r\n    if (role === \"superuser\") \r\n    return(\r\n        <>\r\n        \r\n        <PageTitle title=\"База данных скважин\" button={<div><Button\r\n            variant=\"contained\"\r\n            size=\"medium\"\r\n            color=\"primary\"\r\n            style={{width: \"100%\", marginBottom: \"0.5rem\", outline: \"none\"}}\r\n            onClick={() => {history.push({pathname: \"/app/database\"})}}\r\n        >\r\n            Создать новый ствол\r\n        </Button><br/>\r\n        <Button\r\n            variant=\"contained\"\r\n            size=\"medium\"\r\n            color=\"primary\"\r\n            style={{width: \"100%\", outline: \"none\"}}\r\n            disabled\r\n        >\r\n            Выгрузить таблицу\r\n        </Button></div>} />\r\n        <Grid container spacing={4}>\r\n        <Grid item xs={12}>\r\n        <Button\r\n            variant=\"contained\"\r\n            size=\"medium\"\r\n            color=\"primary\"\r\n            style={{outline: \"none\", marginRight: \"1rem\"}}\r\n            onClick={() => filterTable(\"all\")}\r\n        >\r\n            Все\r\n        </Button>\r\n        <Button\r\n            variant=\"contained\"\r\n            size=\"medium\"\r\n            color=\"primary\"\r\n            style={{outline: \"none\", backgroundColor: \"orange\", marginRight: \"1rem\"}}\r\n            onClick={() => filterTable(\"Должна начаться\")}\r\n        >\r\n            Должна начаться\r\n        </Button>\r\n        <Button\r\n            variant=\"contained\"\r\n            size=\"medium\"\r\n            color=\"primary\"\r\n            style={{outline: \"none\", backgroundColor: \"blue\", marginRight: \"1rem\"}}\r\n            onClick={() => filterTable(\"В бурении\")}\r\n        >\r\n            В бурении\r\n        </Button>\r\n        <Button\r\n            variant=\"contained\"\r\n            size=\"medium\"\r\n            color=\"primary\"\r\n            style={{outline: \"none\", backgroundColor: \"orange\", marginRight: \"1rem\"}}\r\n            onClick={() => filterTable(\"В ожидании\")}\r\n        >\r\n            В ожидании\r\n        </Button>\r\n        <Button\r\n            variant=\"contained\"\r\n            size=\"medium\"\r\n            color=\"primary\"\r\n            style={{outline: \"none\", backgroundColor: \"red\", marginRight: \"1rem\"}}\r\n            onClick={() => filterTable(\"Добурена\")}\r\n        >\r\n            Добурена\r\n        </Button>\r\n        <Button\r\n            variant=\"contained\"\r\n            size=\"medium\"\r\n            color=\"primary\"\r\n            style={{outline: \"none\", backgroundColor: \"green\"}}\r\n            onClick={() => filterTable(\"Отчет отправлен\")}\r\n        >\r\n            Отчет отправлен\r\n        </Button>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          {//reportsData.length === 0 ? <NotFound/> : \r\n          <MUIDataTable\r\n            title={<Typography variant=\"h6\">\r\n            Список сопровождаемых скважин в базе\r\n            {trackedData.length === 0 && <CircularProgress size={24} style={{ marginLeft: 15, position: 'relative', top: 4 }} />}\r\n          </Typography>}\r\n          \r\n            data={filterData.map(item => [item.customer, \r\n              item.field, \r\n              item.cluster, \r\n              `${item.well_type} ${item.well}`, \r\n              `${item.pie_well} ${item.num_wellbore}`,\r\n              item.main_strata, \r\n              item.contractor, \r\n              item.ILWD_TFS, \r\n              item.ILWD_TLS, \r\n              item.ILWD_I, \r\n              item.status_wellbore ? <Chip style={{width: \"100%\", backgroundColor: (colorForChip(item.status_wellbore)), color: \"#fff\"}} label={item.status_wellbore}/> : \"\"])}\r\n            columns={[\"Общество\", \"Месторождение\", \"Куст\", \"Скважина\", \"Ствол\", \"Пласт\", \"Подрядчик LWD\", \"Первый замер\", \"Последний замер\", \"Интерпретация\", \"Статус\"]}\r\n            options={{\r\n              filterType: \"textField\",\r\n              print: false,\r\n              download: false,\r\n              rowsPerPage: 20,\r\n              textLabels: {\r\n                body: {\r\n                  noMatch: \"Записей не найдено.\",\r\n                  toolTip: \"Сортировать\"\r\n                },\r\n                filter: {\r\n                  all: \"Все\",\r\n                  title: \"Фильтры\",\r\n                  reset: \"СБРОСИТЬ\",\r\n                },\r\n                toolbar: {\r\n                  search: \"Поиск\",\r\n                  viewColumns: \"Показать столбцы\",\r\n                    filterTable: \"Фильтр таблицы\"\r\n                },\r\n                pagination: {\r\n                  next: \"Следующая страница\",\r\n                  previous: \"Предыдущая страница\",\r\n                  rowsPerPage: \"Строк на странице:\",\r\n                  displayRows: \"из\",\r\n                },\r\n                viewColumns: {\r\n                    title: \"Показать столбцы\"\r\n                  },\r\n                selectedRows: {\r\n                  text: \"строка выбрана\"\r\n                },\r\n              },\r\n              selectableRows: 'none',\r\n              setRowProps: value => ({ style: { cursor: 'pointer' } }),\r\n              onRowClick: (rowData, rowMeta) => {\r\n                props.history.push({\r\n                  pathname:  `/app/trackedwells/${trackedData[rowMeta.dataIndex].id_wellbore}`,\r\n                  state: trackedData[rowMeta.dataIndex]\r\n               });\r\n              }\r\n            }}\r\n          />\r\n          }\r\n        </Grid>\r\n        </Grid>\r\n        \r\n        </>\r\n    )\r\n    else return (<Blocked/>)\r\n}\r\n\r\nexport default TrackedWells","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\pages\\trackedwells\\OneTrackedWell.js",["457","458"],"import React, {useState, useRef, useEffect} from 'react';\r\n\r\nimport PageTitle from \"../../components/PageTitle\";\r\n\r\nimport {\r\n    Grid,\r\n    Table, TableHead, TableRow, TableCell, TableBody, TableContainer,\r\n    Button, \r\n    IconButton,\r\n    Paper\r\n} from \"@material-ui/core\";\r\n\r\nimport {\r\n    Check as CheckIcon,\r\n    Edit as EditIcon\r\n  } from \"@material-ui/icons\";\r\n\r\n import { useHistory } from 'react-router-dom'; \r\nimport {useLocation} from 'react-router-dom'\r\nimport {Form} from 'react-bootstrap';\r\nimport Loading from '../../components/Loading/Loading';\r\nimport Blocked from \"../../components/Blocked/Blocked\";\r\nimport SuccessToast from \"../../components/Toasts/SuccessToast\";\r\n\r\nconst status = [\r\n    {\r\n        name: \"Должна начаться\",\r\n        color: \"orange\"\r\n    },\r\n    {\r\n        name: \"В бурении\",\r\n        color: \"blue\"\r\n    },\r\n    {\r\n        name: \"В ожидании\",\r\n        color: \"orange\"\r\n    },\r\n    {\r\n        name: \"Добурена\",\r\n        color: \"red\"\r\n    },\r\n    {\r\n        name: \"Отчет отправлен\",\r\n        color: \"green\"\r\n    }\r\n]\r\n\r\nfunction OneTrackedWell(props) {\r\n    const [wellboreData, setWellboreData]= useState({})\r\n    const [trackedData, setTrackedData] = useState({})\r\n    const [servicesData, setServicesData] = useState([])\r\n    const constant = false\r\n    const role = localStorage.getItem(\"role\")\r\n    const history = useHistory()\r\n    const [showSuccessToast, setShowSuccessToast] = useState(false)\r\n    \r\n    const [ILWD_I, setILWD_I] = useState(\"\")\r\n    const [WP_TD, setWP_TD] = useState(null)\r\n    const [WP_PCS, setWP_PCS] = useState(null)\r\n    const [WP_PT1, setWP_PT1] = useState(null)\r\n    const [WP_PT3, setWP_PT3] = useState(null)\r\n    const [WP_PWL, setWP_PWL] = useState(null)\r\n    const [WP_PCP, setWP_PCP] = useState(null)\r\n    const [WP_CS, setWP_CS] = useState(null)\r\n    const [WP_T1, setWP_T1] = useState(null)\r\n    const [WP_T3, setWP_T3] = useState(null)\r\n    const [WP_WL, setWP_WL] = useState(null)\r\n    const [WP_CP, setWP_CP] = useState(null)\r\n    const [WP_DL, setWP_DL] = useState(null)\r\n    const [WP_DM, setWP_DM] = useState(\"\")\r\n    const [ILWD_TI, setILWD_TI] = useState(null)\r\n    const [ILWD_TFS, setILWD_TFS] = useState(null)\r\n    const [ILWD_TLS, setILWD_TLS] = useState(null)\r\n    const [ILWD_TRS, setILWD_TRS] = useState(null)\r\n    const [ILWD_TM, setILWD_TM] = useState(null)\r\n    const [ILWD_LU, setILWD_LU] = useState(\"\")\r\n    const [ILWD_A, setILWD_A] = useState(\"\")\r\n    const [ILQC_A, setILQC_A] = useState(\"\")\r\n    const [ILQC_C, setILQC_C] = useState(\"\")\r\n    const [ILQC_TR, setILQC_TR] = useState(null)\r\n    const [main_strata, setMain_strata] = useState(\"\")\r\n    const [contractor, setContractor] = useState(\"\")\r\n    const [WP_GRemark, setWP_GRemark] = useState(\"\")\r\n    const [status_wellbore, setStatus_wellbore] = useState(\"\")\r\n    const [editWP_GRemark, setEditWP_GRemark] = useState(false)\r\n    const [editMainInfo, setEditMainInfo] = useState(false)\r\n    const [editInter, setEditInter] = useState(false)\r\n    const [editFinal, setEditFinal] = useState(false)\r\n    const [editLQC, setEditLQC] = useState(false)\r\n    const [editDrilling, setEditDrilling] = useState(false)\r\n    \r\n    const location=useLocation()\r\n\r\n    const getWellboreData = (props) => {\r\n        fetch(process.env.REACT_APP_API+'wellbores/id/'+ props.match.params.id +'?format=json', { headers : { \r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n            'Authorization': \"Token \" + localStorage.getItem('id_token')\r\n           }\r\n        }) \r\n        .then(response=>response.json())\r\n        .then(data=>{\r\n            setWellboreData(data);\r\n            setILWD_I(data.ILWD_I)\r\n            setWP_TD(data.WP_TD)\r\n            setWP_PCS(data.WP_PCS)\r\n            setWP_PT1(data.WP_PT1)\r\n            setWP_PT3(data.WP_PT3)\r\n            setWP_PWL(data.WP_PWL)\r\n            setWP_PCP(data.WP_PCP)\r\n            setWP_CS(data.WP_CS)\r\n            setWP_T1(data.WP_T1)\r\n            setWP_T3(data.WP_T3)\r\n            setWP_WL(data.WP_WL)\r\n            setWP_CP(data.WP_CP)\r\n            setWP_DL(data.WP_DL)\r\n            setWP_DM(data.WP_DM)\r\n            setMain_strata(data.main_strata)\r\n            setContractor(data.contractor)\r\n            setILWD_TI(data.ILWD_TI)\r\n            setILWD_TFS(data.ILWD_TFS)\r\n            setILWD_TLS(data.ILWD_TLS)\r\n            setILWD_TRS(data.ILWD_TRS)\r\n            setILWD_TM(data.ILWD_TM)\r\n            setILWD_LU(data.ILWD_LU)\r\n            setILWD_A(data.ILWD_A)\r\n            setILQC_A(data.ILQC_A)\r\n            setILQC_C(data.ILQC_C)\r\n            setILQC_TR(data.ILQC_TR)\r\n            setWP_GRemark(data.WP_GRemark)\r\n            setStatus_wellbore(data.status_wellbore)\r\n        })\r\n    }\r\n\r\n    \r\n\r\n    const getServices = () => {\r\n        fetch(process.env.REACT_APP_API+'services/?format=json', { headers : { \r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n            'Authorization': \"Token \" + localStorage.getItem('id_token')\r\n           }\r\n        }) \r\n        .then(response=>response.json())\r\n        .then(data=>{\r\n            setServicesData(data);\r\n        })\r\n      }\r\n\r\n    const changeTrackedData = (wellbore_id) => {\r\n        fetch(process.env.REACT_APP_API+'wellbores/id/'+ wellbore_id +'?format=json',{\r\n            method: 'PUT',\r\n            headers:{\r\n                'Accept':'application/json',\r\n                'Content-Type':'application/json',\r\n                'Authorization': \"Token \" + localStorage.getItem('id_token')\r\n            },\r\n            body: JSON.stringify({\r\n                \"num_wellbore\": trackedData.num_wellbore,\r\n                \"ILWD_I\": ILWD_I,\r\n                \"WP_TD\": WP_TD,\r\n                \"WP_PCS\": WP_PCS,\r\n                \"WP_PT1\": WP_PT1,\r\n                \"WP_PT3\": WP_PT3,\r\n                \"WP_PWL\": WP_PWL,\r\n                \"WP_PCP\": WP_PCP,\r\n                \"WP_CS\": WP_CS,\r\n                \"WP_T1\": WP_T1,\r\n                \"WP_T3\": WP_T3,\r\n                \"WP_WL\": WP_WL,\r\n                \"WP_CP\": WP_CP,\r\n                \"WP_DL\": WP_DL,\r\n                \"WP_DM\": WP_DM,\r\n                \"ILWD_TI\": ILWD_TI,\r\n                \"ILWD_TFS\": ILWD_TFS,\r\n                \"ILWD_TLS\": ILWD_TLS,\r\n                \"ILWD_TRS\": ILWD_TRS,\r\n                \"ILWD_TM\": ILWD_TM,\r\n                \"ILWD_LU\": ILWD_LU,\r\n                \"ILWD_A\": ILWD_A,\r\n                \"ILQC_A\": ILQC_A,\r\n                \"ILQC_C\": ILQC_C,\r\n                \"ILQC_TR\": ILQC_TR,\r\n                \"WP_GRemark\": WP_GRemark,\r\n                \"status_wellbore\": status_wellbore,\r\n                \"main_strata\": main_strata,\r\n                \"contractor\": contractor\r\n            }) \r\n        })\r\n        .then((response) => {\r\n            if(!response.ok) throw new Error(response.status);\r\n            else setShowSuccessToast(true);\r\n        })\r\n    };\r\n\r\n    const addName = (role, setRole) => {\r\n        if (role)\r\n            setRole(\"\")\r\n        else\r\n            setRole(localStorage.getItem(\"name\"))\r\n    }\r\n\r\n    const timeSubtraction = (firstTime, lastTime) => {\r\n        let res = \"\"\r\n        let arrres = []\r\n        let arrFirstTime = firstTime.replace(\"T\", \"-\").replace(\":\", \"-\").replace(\" \", \"-\").split(\"-\")\r\n        let arrLastTime = lastTime.replace(\"T\", \"-\").replace(\":\", \"-\").replace(\" \", \"-\").split(\"-\")\r\n        for (let i = 0; i < arrFirstTime.length; i++) {\r\n            arrres.push(Number(arrLastTime[i]) - Number(arrFirstTime[i]))\r\n        }\r\n        arrres[0] && (res += (arrres[0].toString() + \" лет \"))\r\n        arrres[1] && (res += (arrres[1].toString() + \" месяцев \"))\r\n        if (arrres[2])\r\n            if (arrres[3] < 0)\r\n                res += ((arrres[2] - 1).toString() + \" дней \")\r\n            else\r\n                res += (arrres[2].toString() + \" дней \")\r\n        if (arrres[4] < 0)\r\n            if (arrres[3] < 1)\r\n                res += ((24 + arrres[3] - 1).toString() + \":\")\r\n            else\r\n                res += ((arrres[3] - 1).toString() + \":\")\r\n        else\r\n            if (arrres[3] < 0)\r\n                res += ((24 + arrres[3]).toString() + \":\")\r\n            else\r\n                res += (arrres[3].toString() + \":\")\r\n        if (arrres[4] < 0)\r\n            res += (60 + arrres[4]).toString()\r\n        else\r\n            res += arrres[4].toString()\r\n        return res\r\n    }\r\n\r\n    useEffect(() => {\r\n        WP_PT3 && WP_TD && setWP_DL(Number(WP_PT3) - Number(WP_TD))\r\n    }, [WP_PT3, WP_TD])\r\n\r\n    useEffect(() => {\r\n        ILWD_TFS && ILWD_TLS && setILWD_TI(timeSubtraction(ILWD_TFS, ILWD_TLS))\r\n    }, [ILWD_TFS, ILWD_TLS])\r\n\r\n    useEffect(() => {\r\n        setTrackedData(location.state)\r\n        getWellboreData(props)\r\n        getServices()\r\n    }, [constant])\r\n\r\n    const handleSuccessToast = () => {\r\n        setShowSuccessToast(!showSuccessToast);\r\n    }\r\n\r\n    if (role === \"superuser\") \r\n    if (\"id_wellbore\" in trackedData)\r\n    return (\r\n        <>\r\n        <SuccessToast active={showSuccessToast} setActive={handleSuccessToast}/>\r\n        <PageTitle \r\n            style={{fontSize: \"37px\"}}\r\n            title1row={trackedData.customer + \" - \" + trackedData.field} \r\n            enter={true} \r\n            title2row={<span style={{fontSize: \"30px\"}}>{\"Куст: \" + trackedData.cluster + \", Скважина: \" + trackedData.well + \", Ствол: \" + wellboreData.num_wellbore + \" (\" + wellboreData.pie_well + \")\"}</span>} \r\n            title3row={<div style={{display: \"flex\", alignItems: \"center\"}}>\r\n            <b>Статус:</b>\r\n            <Form.Control \r\n                as=\"select\"\r\n                id=\"status_wellbore\"\r\n                name=\"status_wellbore\"\r\n                value={status_wellbore}\r\n                style={{border: \"none\", width: \"auto\", display: \"inline-block\", backgroundColor:\"#FFFCF3\", paddingBottom: 0, fontSize: \"23px\", fontWeight: 700, color:(status_wellbore && status.find(item => item.name === status_wellbore).color)}}\r\n                onChange={(e) => setStatus_wellbore(e.target.value)}>\r\n                <option></option>\r\n                {status.map(item => (<option key={item.name} value={item.name}>{item.name}</option>))}\r\n            </Form.Control>\r\n            </div>\r\n            } \r\n            button={\r\n            <Button\r\n            variant=\"contained\"\r\n            size=\"medium\"\r\n            color=\"primary\"\r\n            style={{outline: \"none\", height: \"50%\", fontSize: \"18px\"}}\r\n            onClick={() => changeTrackedData(trackedData.id_wellbore)}>\r\n                Сохранить\r\n            </Button>\r\n            }\r\n        />\r\n        <Grid container spacing={4}>\r\n            <Grid item xs={4}>\r\n                <Grid item xs={12} style={{marginBottom: \"2rem\"}}>\r\n                    <Paper sx={{ width: '100%' }}>\r\n                        <TableContainer sx={{ maxHeight: 440 }}>\r\n                            <Table aria-label=\"sticky table\">\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                <TableCell align=\"center\" colSpan={2} style={{fontSize: \"2em\"}}>\r\n                                    Общая информация\r\n                                    <IconButton\r\n                                        style={{outline: \"none\", display: (editMainInfo && 'none')}}\r\n                                        onClick={() => setEditMainInfo(true)}\r\n                                    >\r\n                                        <EditIcon />\r\n                                    </IconButton>\r\n                                    <IconButton\r\n                                        style={{outline: \"none\", display: (!editMainInfo && 'none')}}\r\n                                        onClick={() => setEditMainInfo(false)}\r\n                                    >\r\n                                        <CheckIcon />\r\n                                    </IconButton>\r\n                                </TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Тип скважины\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        { trackedData.well_type ? trackedData.well_type : <>&mdash;</>}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Интерпретация\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {\r\n                                            !editMainInfo ? (ILWD_I ? ILWD_I : <>&mdash;</>) : \r\n                                                <Form.Control \r\n                                                    as=\"select\"\r\n                                                    id=\"ILWD_I\"\r\n                                                    name=\"ILWD_I\"\r\n                                                    value={ILWD_I}\r\n                                                    onChange={(e) => setILWD_I(e.target.value)}>\r\n                                                    <option></option>\r\n                                                    <option value=\"Круглосуточная\">Круглосуточная</option>\r\n                                                    <option value=\"На финальный забой\">На финальный забой</option>\r\n                                                </Form.Control>\r\n                                        }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Целевой пласт\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {\r\n                                            !editMainInfo ? (main_strata ? main_strata : <>&mdash;</>) : \r\n                                                <Form.Control \r\n                                                    as=\"select\"\r\n                                                    id=\"strata\"\r\n                                                    name=\"strata\"\r\n                                                    value={main_strata}\r\n                                                    onChange={(e) => setMain_strata(e.target.value)}>\r\n                                                    <option></option>\r\n                                                    {trackedData.strata.map(item => (<option key={item} value={item}>{item}</option>))}\r\n                                                </Form.Control>\r\n                                        }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Подрядчик LWD\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {\r\n                                            !editMainInfo ? (contractor ? contractor : <>&mdash;</>) : \r\n                                                <Form.Control \r\n                                                    as=\"select\"\r\n                                                    id=\"contractor\"\r\n                                                    name=\"contractor\"\r\n                                                    value={contractor}\r\n                                                    onChange={(e) => setContractor(e.target.value)}>\r\n                                                    <option></option>\r\n                                                    {servicesData.map(item => (<option key={item.name} value={item.name}>{item.name}</option>))}\r\n                                                </Form.Control>\r\n                                        }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Текущий забой\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {\r\n                                            !editMainInfo ? (WP_TD ? WP_TD : <>&mdash;</>) : \r\n                                                <Form.Control \r\n                                                    type=\"number\"\r\n                                                    step=\"0.01\"\r\n                                                    id=\"WP_TD\"\r\n                                                    name=\"WP_TD\"\r\n                                                    value={WP_TD}\r\n                                                    onChange={(e) => setWP_TD(e.target.value)}\r\n                                                />\r\n                                        }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Плановая глубина\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {WP_PT3 ? WP_PT3 : <>&mdash;</>}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Осталось до забоя\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {WP_DL ? WP_DL : <>&mdash;</>}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Время интерпретации\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {ILWD_TI ? ILWD_TI : <>&mdash;</>}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            </TableBody>\r\n                            </Table>\r\n                        </TableContainer>\r\n                    </Paper>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <Paper sx={{ width: '100%' }}>\r\n                        <TableContainer sx={{ maxHeight: 440 }}>\r\n                            <Table aria-label=\"sticky table\">\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                <TableCell align=\"center\" colSpan={2} style={{fontSize: \"2em\"}}>\r\n                                    Примечание\r\n                                    <IconButton\r\n                                        style={{outline: \"none\", display: (!editWP_GRemark && 'none')}}\r\n                                        onClick={() => setEditWP_GRemark(false)}\r\n                                    >\r\n                                        <CheckIcon />\r\n                                    </IconButton>\r\n                                </TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                <TableRow>\r\n                                    <TableCell align=\"center\" style={{whiteSpace: 'pre-line'}} colSpan={2} onClick={() => setEditWP_GRemark(true)}>\r\n                                        {\r\n                                            !editWP_GRemark ? (WP_GRemark ? WP_GRemark : <>&mdash;</>) :\r\n                                            <Form>\r\n                                                <Form.Control \r\n                                                    as=\"textarea\"\r\n                                                    style={{whiteSpace: 'pre-wrap'}}\r\n                                                    id=\"WP_GRemark\"\r\n                                                    name=\"WP_GRemark\"\r\n                                                    value={WP_GRemark}\r\n                                                    onChange={(e) => setWP_GRemark(e.target.value)}\r\n                                                />\r\n                                            </Form>\r\n                                        }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            </TableBody>\r\n                            </Table>\r\n                        </TableContainer>\r\n                    </Paper>\r\n                </Grid>\r\n            </Grid>\r\n            <Grid item xs={4}>\r\n                <Grid item xs={12}>\r\n                    <Paper sx={{ width: '100%' }}>\r\n                        <TableContainer sx={{ maxHeight: 440 }}>\r\n                            <Table aria-label=\"sticky table\">\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                <TableCell align=\"center\" colSpan={2} style={{fontSize: \"2em\"}}>\r\n                                    Интерпретация\r\n                                    <IconButton\r\n                                        style={{outline: \"none\", display: (editInter && 'none')}}\r\n                                        onClick={() => setEditInter(true)}\r\n                                    >\r\n                                        <EditIcon />\r\n                                    </IconButton>\r\n                                    <IconButton\r\n                                        style={{outline: \"none\", display: (!editInter && 'none')}}\r\n                                        onClick={() => setEditInter(false)}\r\n                                    >\r\n                                        <CheckIcon />\r\n                                    </IconButton>\r\n                                </TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Подготовка\r\n                                    </TableCell>\r\n                                    <TableCell style={{color: (ILWD_LU === \"Выполнена\" ? \"green\" : \"red\")}}>\r\n                                        {\r\n                                            !editInter ? (ILWD_LU ? ILWD_LU : <>&mdash;</>) : \r\n                                                <Form.Control \r\n                                                    as=\"select\"\r\n                                                    id=\"ILWD_LU\"\r\n                                                    name=\"ILWD_LU\"\r\n                                                    value={ILWD_LU}\r\n                                                    onChange={(e) => setILWD_LU(e.target.value)}>\r\n                                                    <option></option>\r\n                                                    <option value=\"Выполнена\">Выполнена</option>\r\n                                                    <option value=\"Не выполнена\">Не выполнена</option>\r\n                                                </Form.Control>\r\n                                        }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Буровая механика\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {\r\n                                            !editInter ? (WP_DM ? WP_DM : <>&mdash;</>) : \r\n                                                <Form.Control \r\n                                                    as=\"select\"\r\n                                                    id=\"WP_DM\"\r\n                                                    name=\"WP_DM\"\r\n                                                    value={WP_DM}\r\n                                                    onChange={(e) => setWP_DM(e.target.value)}>\r\n                                                    <option></option>\r\n                                                    <option value=\"Да\">Да</option>\r\n                                                    <option value=\"Нет\">Нет</option>\r\n                                                </Form.Control>\r\n                                        }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Первый замер\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {\r\n                                            !editInter ? (ILWD_TFS ? ILWD_TFS : <>&mdash;</>) : \r\n                                                <Form.Control \r\n                                                    type=\"datetime-local\"\r\n                                                    id=\"ILWD_TFS\"\r\n                                                    name=\"ILWD_TFS\"\r\n                                                    value={ILWD_TFS}\r\n                                                    onChange={(e) => setILWD_TFS((e.target.value).replace(\"T\", \" \"))}\r\n                                                />\r\n                                        }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Последний замер\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {\r\n                                            !editInter ? (ILWD_TLS ? ILWD_TLS : <>&mdash;</>) : \r\n                                                <Form.Control \r\n                                                    type=\"datetime-local\"\r\n                                                    id=\"ILWD_TLS\"\r\n                                                    name=\"ILWD_TLS\"\r\n                                                    value={ILWD_TLS}\r\n                                                    onChange={(e) => setILWD_TLS((e.target.value).replace(\"T\", \" \"))}\r\n                                                />\r\n                                        }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            </TableBody>\r\n                            </Table>\r\n                        </TableContainer>\r\n                    </Paper>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <Paper sx={{ width: '100%' }}>\r\n                        <TableContainer sx={{ maxHeight: 440 }}>\r\n                            <Table aria-label=\"sticky table\">\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                <TableCell align=\"center\" colSpan={2} style={{fontSize: \"2em\"}}>\r\n                                    Финальный забой\r\n                                    <IconButton\r\n                                        style={{outline: \"none\", display: (editFinal && 'none')}}\r\n                                        onClick={() => setEditFinal(true)}\r\n                                    >\r\n                                        <EditIcon />\r\n                                    </IconButton>\r\n                                    <IconButton\r\n                                        style={{outline: \"none\", display: (!editFinal && 'none')}}\r\n                                        onClick={() => setEditFinal(false)}\r\n                                    >\r\n                                        <CheckIcon />\r\n                                    </IconButton>\r\n                                </TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Время отправки\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {\r\n                                            !editFinal ? (ILWD_TRS ? ILWD_TRS : <>&mdash;</>) : \r\n                                                <Form.Control \r\n                                                    type=\"datetime-local\"\r\n                                                    id=\"ILWD_TRS\"\r\n                                                    name=\"ILWD_TRS\"\r\n                                                    value={ILWD_TRS}\r\n                                                    onChange={(e) => setILWD_TRS((e.target.value).replace(\"T\", \" \"))}\r\n                                                />\r\n                                        }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Интерпретатор\r\n                                    </TableCell>\r\n                                    <TableCell onClick={editFinal ? () => addName(ILWD_A, setILWD_A) : undefined}>\r\n                                        {!editFinal ? (ILWD_A ? ILWD_A : <>&mdash;</>) :\r\n                                            (ILWD_A ? ILWD_A : \"Щелкните, чтобы добавить свое имя\")\r\n                                        }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            </TableBody>\r\n                            </Table>\r\n                        </TableContainer>\r\n                    </Paper>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <Paper sx={{ width: '100%' }}>\r\n                        <TableContainer sx={{ maxHeight: 440 }}>\r\n                            <Table aria-label=\"sticky table\">\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                <TableCell align=\"center\" colSpan={2} style={{fontSize: \"2em\"}}>\r\n                                    Отчет по интерпретации\r\n                                    <IconButton\r\n                                        style={{outline: \"none\", display: (editLQC && 'none')}}\r\n                                        onClick={() => setEditLQC(true)}\r\n                                    >\r\n                                        <EditIcon />\r\n                                    </IconButton>\r\n                                    <IconButton\r\n                                        style={{outline: \"none\", display: (!editLQC && 'none')}}\r\n                                        onClick={() => setEditLQC(false)}\r\n                                    >\r\n                                        <CheckIcon />\r\n                                    </IconButton>\r\n                                </TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Данные из памяти\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {\r\n                                            !editLQC ? (ILWD_TM ? ILWD_TM : <>&mdash;</>) : \r\n                                                <Form.Control \r\n                                                    type=\"datetime-local\"\r\n                                                    id=\"ILWD_TM\"\r\n                                                    name=\"ILWD_TM\"\r\n                                                    value={ILWD_TM}\r\n                                                    onChange={(e) => setILWD_TM((e.target.value).replace(\"T\", \" \"))}\r\n                                                />\r\n                                        }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Интерпретатор\r\n                                    </TableCell>\r\n                                    <TableCell onClick={editLQC ? () => addName(ILQC_A, setILQC_A) : undefined}>\r\n                                        {!editLQC ? (ILQC_A ? ILQC_A : <>&mdash;</>) :\r\n                                            (ILQC_A ? ILQC_A : \"Щелкните, чтобы добавить свое имя\")\r\n                                        }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Проверил\r\n                                    </TableCell>\r\n                                    <TableCell onClick={editLQC ? () => addName(ILQC_C, setILQC_C) : undefined}>\r\n                                        {!editLQC ? (ILQC_C ? ILQC_C : <>&mdash;</>) :\r\n                                            (ILQC_C  ? ILQC_C : \"Щелкните, чтобы добавить свое имя\")\r\n                                        }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Отправка отчета\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {\r\n                                            !editLQC ? (ILQC_TR ? ILQC_TR : <>&mdash;</>) : \r\n                                                <Form.Control \r\n                                                    type=\"datetime-local\"\r\n                                                    id=\"ILQC_TR\"\r\n                                                    name=\"ILQC_TR\"\r\n                                                    value={ILQC_TR}\r\n                                                    onChange={(e) => setILQC_TR((e.target.value).replace(\"T\", \" \"))}\r\n                                                />\r\n                                        }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            </TableBody>\r\n                            </Table>\r\n                        </TableContainer>\r\n                    </Paper>\r\n                </Grid>\r\n            </Grid>\r\n            <Grid item xs={4}>\r\n                <Grid item xs={12} style={{marginBottom: \"2rem\"}}>\r\n                    <Paper sx={{ width: '100%' }}>\r\n                        <TableContainer sx={{ maxHeight: 440 }}>\r\n                            <Table aria-label=\"sticky table\">\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                <TableCell align=\"center\" colSpan={4} style={{fontSize: \"2em\"}}>\r\n                                    Бурение\r\n                                    <IconButton\r\n                                        style={{outline: \"none\", display: (editDrilling && 'none')}}\r\n                                        onClick={() => setEditDrilling(true)}\r\n                                    >\r\n                                        <EditIcon />\r\n                                    </IconButton>\r\n                                    <IconButton\r\n                                        style={{outline: \"none\", display: (!editDrilling && 'none')}}\r\n                                        onClick={() => setEditDrilling(false)}\r\n                                    >\r\n                                        <CheckIcon />\r\n                                    </IconButton>\r\n                                </TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                <TableCell align=\"center\" colSpan={2} style={{fontSize: \"1.5em\"}}>\r\n                                    План\r\n                                </TableCell>\r\n                                <TableCell align=\"center\" colSpan={2} style={{fontSize: \"1.5em\"}}>\r\n                                    Факт\r\n                                </TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Башмак колонны\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {\r\n                                            !editDrilling ? (WP_PCS ? WP_PCS : <>&mdash;</>) : \r\n                                                <Form.Control \r\n                                                    type=\"number\"\r\n                                                    step=\"0.01\"\r\n                                                    id=\"WP_PCS\"\r\n                                                    name=\"WP_PCS\"\r\n                                                    value={WP_PCS}\r\n                                                    onChange={(e) => setWP_PCS(e.target.value)}\r\n                                                />\r\n                                        }\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        Башмак колонны\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {\r\n                                            !editDrilling ? (WP_CS ? WP_CS : <>&mdash;</>) : \r\n                                                <Form.Control \r\n                                                    type=\"number\"\r\n                                                    step=\"0.01\"\r\n                                                    id=\"WP_CS\"\r\n                                                    name=\"WP_CS\"\r\n                                                    value={WP_CS}\r\n                                                    onChange={(e) => setWP_CS(e.target.value)}\r\n                                                />\r\n                                        }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Точка Т1\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {\r\n                                            !editDrilling ? (WP_PT1 ? WP_PT1 : <>&mdash;</>) : \r\n                                                <Form.Control \r\n                                                    type=\"number\"\r\n                                                    step=\"0.01\"\r\n                                                    id=\"WP_PT1\"\r\n                                                    name=\"WP_PT1\"\r\n                                                    value={WP_PT1}\r\n                                                    onChange={(e) => setWP_PT1(e.target.value)}\r\n                                                />\r\n                                        }\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        Точка Т1\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {\r\n                                            !editDrilling ? (WP_T1 ? WP_T1 : <>&mdash;</>) : \r\n                                                <Form.Control \r\n                                                    type=\"number\"\r\n                                                    step=\"0.01\"\r\n                                                    id=\"WP_T1\"\r\n                                                    name=\"WP_T1\"\r\n                                                    value={WP_T1}\r\n                                                    onChange={(e) => setWP_T1(e.target.value)}\r\n                                                />\r\n                                        }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Точка Т3\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {\r\n                                            !editDrilling ? (WP_PT3 ? WP_PT3 : <>&mdash;</>) : \r\n                                                <Form.Control \r\n                                                    type=\"number\"\r\n                                                    step=\"0.01\"\r\n                                                    id=\"WP_PT3\"\r\n                                                    name=\"WP_PT3\"\r\n                                                    value={WP_PT3}\r\n                                                    onChange={(e) => setWP_PT3(e.target.value)}\r\n                                                />\r\n                                        }\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        Точка Т3\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {\r\n                                            !editDrilling ? (WP_T3 ? WP_T3 : <>&mdash;</>) : \r\n                                                <Form.Control \r\n                                                    type=\"number\"\r\n                                                    step=\"0.01\"\r\n                                                    id=\"WP_T3\"\r\n                                                    name=\"WP_T3\"\r\n                                                    value={WP_T3}\r\n                                                    onChange={(e) => setWP_T3(e.target.value)}\r\n                                                />\r\n                                        }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Длина ствола\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {\r\n                                            !editDrilling ? (WP_PWL ? WP_PWL : <>&mdash;</>) : \r\n                                                <Form.Control \r\n                                                    type=\"number\"\r\n                                                    step=\"0.01\"\r\n                                                    id=\"WP_PWL\"\r\n                                                    name=\"WP_PWL\"\r\n                                                    value={WP_PWL}\r\n                                                    onChange={(e) => setWP_PWL(e.target.value)}\r\n                                                />\r\n                                        }\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        Длина ствола\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {\r\n                                            !editDrilling ? (WP_WL ? WP_WL : <>&mdash;</>) : \r\n                                                <Form.Control \r\n                                                    type=\"number\"\r\n                                                    step=\"0.01\"\r\n                                                    id=\"WP_WL\"\r\n                                                    name=\"WP_WL\"\r\n                                                    value={WP_WL}\r\n                                                    onChange={(e) => setWP_WL(e.target.value)}\r\n                                                />\r\n                                        }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Точка срезки\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {\r\n                                            !editDrilling ? (WP_PCP ? WP_PCP : <>&mdash;</>) : \r\n                                                <Form.Control \r\n                                                    type=\"number\"\r\n                                                    step=\"0.01\"\r\n                                                    id=\"WP_PCP\"\r\n                                                    name=\"WP_PCP\"\r\n                                                    value={WP_PCP}\r\n                                                    onChange={(e) => setWP_PCP(e.target.value)}\r\n                                                />\r\n                                        }\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        Точка срезки\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {\r\n                                            !editDrilling ? (WP_CP ? WP_CP : <>&mdash;</>) : \r\n                                                <Form.Control \r\n                                                    type=\"number\"\r\n                                                    step=\"0.01\"\r\n                                                    id=\"WP_CP\"\r\n                                                    name=\"WP_CP\"\r\n                                                    value={WP_CP}\r\n                                                    onChange={(e) => setWP_CP(e.target.value)}\r\n                                                />\r\n                                        }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            </TableBody>\r\n                            </Table>\r\n                        </TableContainer>\r\n                    </Paper>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <Paper sx={{ width: '100%' }}>\r\n                        <TableContainer sx={{ maxHeight: 440 }}>\r\n                            <Table aria-label=\"sticky table\">\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                <TableCell align=\"center\" colSpan={4} style={{fontSize: \"2em\"}}>\r\n                                    Контроль качества\r\n                                </TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                <TableCell style={{fontWeight: 700}}>\r\n                                    №\r\n                                </TableCell>\r\n                                <TableCell style={{fontWeight: 700}}>\r\n                                    Тип отчета\r\n                                </TableCell>\r\n                                <TableCell style={{fontWeight: 700}}>\r\n                                    Интервал секции\r\n                                </TableCell>\r\n                                <TableCell style={{fontWeight: 700}}>\r\n                                    Оценка\r\n                                </TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {trackedData.quality_controls ? trackedData.quality_controls.map(item => \r\n                                    <TableRow style={{cursor: \"pointer\"}} onClick={() => history.push({\r\n                                        pathname:  `/app/reports/${item.quality_control_id}`,\r\n                                     })}>\r\n                                        <TableCell>\r\n                                            {item.quality_control_id}\r\n                                        </TableCell>\r\n                                        <TableCell>\r\n                                            {item.data_type === \"Реального времени\" ? \"Оперативный\" : \"Финальный\"}\r\n                                        </TableCell>\r\n                                        <TableCell>\r\n                                            {item.section_interval_start + \"-\" + item.section_interval_end}\r\n                                        </TableCell>\r\n                                        <TableCell>\r\n                                            {item.value}\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                    ) : <TableRow>\r\n                                        <TableCell align='center' colSpan={4}>&mdash;</TableCell>\r\n                                        </TableRow>}\r\n                            </TableBody>\r\n                            </Table>\r\n                        </TableContainer>\r\n                    </Paper>\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n        </>\r\n    )\r\n    else return (<Loading/>)\r\n    else return (<Blocked/>)\r\n}\r\n\r\nexport default OneTrackedWell;","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\pages\\mnemonic\\MnemonicList.js",["459","460"],"import React, {useEffect, useState, Suspense} from 'react';\r\nimport {\r\n    Grid,\r\n    Button,\r\n    CircularProgress,\r\n    Typography\r\n} from \"@material-ui/core\";\r\n\r\nimport MUIDataTable from \"mui-datatables\";\r\n\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport CustomToolbarSelect from '../../components/Toolbar/CustomToolbarSelect';\r\nimport AddMnemonicDialog from '../../components/Dialogs/AddMnemonicDialog';\r\nimport EditMnemonicDialog from '../../components/Dialogs/EditMnemonicDialog';\r\n\r\nimport PageTitle from \"../../components/PageTitle\";\r\n\r\nfunction MnemonicList(props) {\r\n  const history = useHistory();\r\n  const role = localStorage.getItem('role');\r\n\r\n  const [mParam, setMParam] = useState({})\r\n  const [mnemonicData, setMnemonicData] = useState([])\r\n  const [selectedRows, setSelectedRows] = useState([])\r\n  const [mnemonic_id, setMnemonic_id] = useState(null)\r\n  const [mnemonic_name, setMnemonic_name] = useState(\"\")\r\n  \r\n  const [showAddMnemonic, setShowAddMnemonic] = useState(false)\r\n  const [showEditMnemonic, setShowEditMnemonic] = useState(false)\r\n  const [showProgress, setShowProgress] = useState(false)\r\n\r\n  const getParam = (props) => {\r\n    fetch(process.env.REACT_APP_API+'method_parametrs/id/' + props.match.params.id + '?format=json', { headers : { \r\n        'Content-Type': 'application/json',\r\n        'Accept': 'application/json',\r\n        'Authorization': \"Token \" + localStorage.getItem('id_token')\r\n       }\r\n    }) \r\n    .then(response=>response.json())\r\n    .then(data=>{\r\n        setMParam(data);\r\n    })\r\n  }\r\n\r\n  const getMnemonic = (props) => {\r\n    setShowProgress(true)\r\n    fetch(process.env.REACT_APP_API+'mnemonic/' + props.match.params.id + '?format=json', { headers : { \r\n        'Content-Type': 'application/json',\r\n        'Accept': 'application/json',\r\n        'Authorization': \"Token \" + localStorage.getItem('id_token')\r\n       }\r\n    }) \r\n    .then(response=>response.json())\r\n    .then(data=>{\r\n        setMnemonicData(data);\r\n    })\r\n    setShowProgress(false)\r\n  }\r\n\r\n  const deleteMnemonic = (mnemonic_id) => {\r\n    fetch(process.env.REACT_APP_API+'mnemonic/id/'+ mnemonic_id +'?format=json', { method: 'DELETE', headers: {'Authorization': \"Token \" + localStorage.getItem('id_token')} })\r\n  }\r\n\r\n  const rowsDelete = () => {\r\n    if (window.confirm('Вы точно хотите удалить '+ mnemonicData[selectedRows[0]].name +' из списка мнемоник?')){\r\n        deleteMnemonic(mnemonicData[selectedRows[0]].id);\r\n        mnemonicData.splice(selectedRows[0], 1);\r\n    }\r\n    setSelectedRows([])\r\n  }\r\n\r\n  const changeName = () => {\r\n    setMnemonic_id(mnemonicData[selectedRows[0]].id)\r\n    setMnemonic_name(mnemonicData[selectedRows[0]].name)\r\n    handleModalEditMnemonic()\r\n  }\r\n\r\n  const handleModalMnemonic = () => {\r\n    setShowAddMnemonic(!showAddMnemonic)\r\n  }\r\n  const handleModalEditMnemonic = () => {\r\n    setShowEditMnemonic(!showEditMnemonic)\r\n  }\r\n\r\n  useEffect(() => {\r\n    getParam(props)\r\n    getMnemonic(props)\r\n  }, [])\r\n\r\n    return (\r\n        <>\r\n        <AddMnemonicDialog active={showAddMnemonic} setActive={handleModalMnemonic} param_id={props.match.params.id}/>\r\n        <EditMnemonicDialog active={showEditMnemonic} setActive={handleModalEditMnemonic} mnemonic_id={mnemonic_id} mnemonic_name={mnemonic_name}/>\r\n        <PageTitle title={mParam.name + \" - \" + mParam.abbreviation}\r\n            button={<Button\r\n            variant=\"contained\"\r\n            size=\"medium\"\r\n            color=\"secondary\"\r\n            style={{outline: \"none\", backgroundColor:\"#34547A\", visibility: (role === \"user\" || role === \"superuser\" ? 'visible' : 'hidden')}}\r\n            onClick={handleModalMnemonic}\r\n            >\r\n                Создать новую мнемонику\r\n            </Button>} />\r\n            <Grid container spacing={4}>\r\n            <Grid item xs={12}>\r\n            <MUIDataTable\r\n            title={<Typography variant=\"h6\">\r\n            Список мнемоник для переименования\r\n            {showProgress    && <CircularProgress size={24} style={{ marginLeft: 15, position: 'relative', top: 4 }} />}\r\n            </Typography>}\r\n            data={mnemonicData.map(item => [item.name])}\r\n            columns={[\"\"]}\r\n            options={{\r\n              viewColumns: false,\r\n              filter: false,\r\n              print: false,\r\n              download: false,\r\n              sort: false,\r\n              pagination: false,\r\n              rowsPerPage: 1000000,\r\n              textLabels: {\r\n                body: {\r\n                  noMatch: \"Записей не найдено.\",\r\n                  toolTip: \"Сортировать\"\r\n                },\r\n                toolbar: {\r\n                  search: \"Поиск\"\r\n                },\r\n                pagination: {\r\n                  next: \"Следующая страница\",\r\n                  previous: \"Предыдущая страница\",\r\n                  rowsPerPage: \"Строк на странице:\",\r\n                  displayRows: \"из\",\r\n                },\r\n                selectedRows: {\r\n                  text: \"строка выбрана\"\r\n                },\r\n              },\r\n              selectableRows: (role === \"user\" || role === \"superuser\" ? 'single' : 'none'),\r\n              rowsSelected: selectedRows,\r\n              onRowSelectionChange: (rowsSelectedData, allRows, rowsSelected) => {\r\n                setSelectedRows(rowsSelected);\r\n              },\r\n              customToolbarSelect: (selectedRows, displayData, setSelectedRows) => (\r\n                <CustomToolbarSelect selectedRows={selectedRows} displayData={displayData} setSelectedRows={setSelectedRows} onChangeName={changeName} onRowsDelete={rowsDelete}/>\r\n              )\r\n            }}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12}>    \r\n            <Button color=\"secondary\" variant=\"contained\" onClick={() => {history.push('/app/mnemonic')}} style={{outline: \"none\", backgroundColor:\"#34547A\"}}>Вернуться назад</Button>    \r\n        </Grid>\r\n        </Grid>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MnemonicList;","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\pages\\mnemonic\\Mnemonic.js",["461","462","463","464","465"],"import React, {useState, useRef, useEffect} from 'react';\r\nimport \"../../pages/styles.css\"\r\n\r\nimport PageTitle from \"../../components/PageTitle\";\r\nimport AddMethodClassDialog from '../../components/Dialogs/AddMethodClassDialog';\r\nimport AddMethodParamDialog from '../../components/Dialogs/AddMethodParamDialog';\r\nimport AddMethodDialog from '../../components/Dialogs/AddMethodDialog';\r\nimport EditMethodParamDialog from '../../components/Dialogs/EditMethodParamDialog';\r\n\r\nimport Blocked from '../../components/Blocked/Blocked';\r\n\r\nimport {useHistory} from 'react-router';\r\n\r\nimport {Form} from 'react-bootstrap';\r\nimport {\r\n    Grid,\r\n    IconButton,\r\n    Tooltip,\r\n    Button,\r\n    Table, TableBody, TableCell, TableRow, TableHead,\r\n    Card, CardContent,\r\n} from \"@material-ui/core\";\r\nimport {\r\n    AddCircleOutline as PlusIcon,\r\n    Edit as EditIcon,\r\n    Delete as DeleteIcon,\r\n    SettingsOutlined as SettingsOutlinedIcon\r\n  } from \"@material-ui/icons\";\r\nimport Loading from '../../components/Loading/Loading';\r\n\r\nfunction Mnemonic() {\r\n    const [methodClasses, setMethodClasses] = useState([])\r\n    const [methods, setMethods] = useState([])\r\n    const [method, setMethod] = useState({})\r\n    const [parametr, setParametr] = useState({})\r\n    const [class_item, setClass_item] = useState({})\r\n    const [methodParametrs, setMethodParametrs] = useState([])\r\n    const [isLoading, setIsLoading] = useState(true)\r\n    const [textError, setTextError] = useState('');\r\n    const [showModalAddClass, setShowModalAddClass] = useState(false)\r\n    const [showModalAddParam, setShowModalAddParam] = useState(false)\r\n    const [showModalEditParam, setShowModalEditParam] = useState(false)\r\n    const [showModalAddMethod, setShowModalAddMethod] = useState(false)\r\n\r\n    const [editClass, setEditClass] = useState({})\r\n    const [className, setClassName] = useState(\"\")\r\n    const [editMethod, setEditMethod] = useState({})\r\n    const [methodName, setMethodName] = useState(\"\")\r\n\r\n    const constant = false;\r\n    const role = localStorage.getItem('role')\r\n    const history = useHistory()\r\n    const isDisabledAddClass = useRef(true)\r\n    const isDisabledAddMetod = useRef(true)\r\n    const isDisabledAddParam= useRef(true)\r\n    const isDisabledEditMethod=useRef(true)\r\n    const getMnemonicFile = () => {\r\n        fetch(process.env.REACT_APP_API+'mnemonic_file/?format=json', { headers : { \r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n            'Authorization': \"Token \" + localStorage.getItem('id_token')\r\n           }\r\n        })\r\n      }\r\n\r\n    const getMethodClasses = () => {\r\n        fetch(process.env.REACT_APP_API+'method_class/?format=json', { headers : { \r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n            'Authorization': \"Token \" + localStorage.getItem('id_token')\r\n           }\r\n        }) \r\n        .then(response=>response.json())\r\n        .then(data=>{\r\n            setMethodClasses(data)\r\n            for (let i = 0; i < data.length; i++) {\r\n                editClass[data.name] = false\r\n            }\r\n        })\r\n    }\r\n    const getMethods = () => {\r\n        fetch(process.env.REACT_APP_API+'methods/?format=json', { headers : { \r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n            'Authorization': \"Token \" + localStorage.getItem('id_token')\r\n           }\r\n        }) \r\n        .then(response=>response.json())\r\n        .then(data=>{\r\n            setMethods(data)\r\n            for (let i = 0; i < data.length; i++) {\r\n                editMethod[data.name] = false\r\n            }\r\n        })\r\n    }\r\n    const getMethodParametrs = () => {\r\n        fetch(process.env.REACT_APP_API+'method_parametrs/?format=json', { headers : { \r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n            'Authorization': \"Token \" + localStorage.getItem('id_token')\r\n           }\r\n        }) \r\n        .then(response=>response.json())\r\n        .then(data=>{\r\n            console.log('data', data)\r\n            setIsLoading(false)\r\n            setMethodParametrs(data)\r\n        })\r\n    }\r\n\r\n    const deleteMethodClass = (item) => {\r\n        if (window.confirm(\"Вы точно хотите удалить класс методов - \" + item.name + \"?\")){\r\n            fetch(process.env.REACT_APP_API+'method_class/'+ item.id +'?format=json', { method: 'DELETE', headers: {'Authorization': \"Token \" + localStorage.getItem('id_token')} })\r\n            history.go(0)\r\n        }\r\n    }\r\n\r\n    const deleteMethod = (item) => {\r\n        if (window.confirm(\"Вы точно хотите удалить метод - \" + item.name + \"?\")){\r\n            fetch(process.env.REACT_APP_API+'methods/id/'+ item.id +'?format=json', { method: 'DELETE', headers: {'Authorization': \"Token \" + localStorage.getItem('id_token')} })\r\n            history.go(0)\r\n        }\r\n    }\r\n\r\n    const deleteParam = (item) => {\r\n            let newMethodParametrs=[];\r\n            fetch(process.env.REACT_APP_API+'method_parametrs/id/'+ item.id +'?format=json', { method: 'DELETE', headers: {'Authorization': \"Token \" + localStorage.getItem('id_token')} })\r\n            .then((res)=>{if (res.ok){              \r\n                for (let i=0; i<methodParametrs.length; i+=1){\r\n                    if (item.id!==methodParametrs[i].id){\r\n                        newMethodParametrs.push(methodParametrs[i]);\r\n                    }\r\n                }\r\n                setMethodParametrs(newMethodParametrs)\r\n            }\r\n            else{\r\n                console.log(`Error `+res.status)\r\n            }\r\n        })\r\n    }\r\n\r\n    const onSubmitEditClass = (e, classId, class_name) => {\r\n        e.preventDefault()\r\n        if (class_name !== className) {\r\n            fetch(process.env.REACT_APP_API+'method_class/'+ classId + '?format=json',{\r\n                method: 'PUT',\r\n                headers:{\r\n                    'Accept':'application/json',\r\n                    'Content-Type':'application/json',\r\n                    'Authorization': \"Token \" + localStorage.getItem('id_token')\r\n                },\r\n                body: JSON.stringify({\r\n                    \"name\": className\r\n                }) \r\n            }) \r\n            var mass = [...methodClasses]\r\n            var index = methodClasses.findIndex(item => item.id == classId)\r\n            mass.splice(index, 1)\r\n            mass.splice(index, 0, {\"id\": classId, \"name\": className})\r\n            setMethodClasses(mass)\r\n        }\r\n        setEditClass({...editClass, [className]: false})\r\n    };\r\n\r\n    const onSubmitEditMethod = (e, met) => {\r\n        e.preventDefault()\r\n        if (met.name !== methodName) {\r\n            fetch(process.env.REACT_APP_API+'methods/id/'+ met.id + '?format=json',{\r\n                method: 'PUT',\r\n                headers:{\r\n                    'Accept':'application/json',\r\n                    'Content-Type':'application/json',\r\n                    'Authorization': \"Token \" + localStorage.getItem('id_token')\r\n                },\r\n                body: JSON.stringify({\r\n                    \"name\": methodName\r\n                }) \r\n            }) \r\n            var mass = [...methods]\r\n            var index = methods.findIndex(item => item.id == met.id)\r\n            mass.splice(index, 1)\r\n            mass.splice(index, 0, {\"id\": met.id, \"name\": methodName, \"method_class_id\": met.method_class_id})\r\n            setMethods(mass)\r\n        }\r\n        setEditMethod({...editMethod, [methodName]: false})\r\n    };\r\n\r\n    const allFalse = (obj) => {\r\n        for (var key in obj)\r\n            obj[key] = false\r\n        return obj\r\n    }\r\n\r\n    const handleModalAddClass = () => {\r\n        setTextError('')\r\n        isDisabledAddClass.current=!isDisabledAddClass.current\r\n        setShowModalAddClass(!showModalAddClass)\r\n    }\r\n    const handleModalAddParam = () => {\r\n        setTextError('')\r\n        isDisabledAddParam.current=!isDisabledAddParam.current\r\n        setShowModalAddParam(!showModalAddParam)\r\n    }\r\n    const handleModalEditParam = () => {\r\n        setTextError('')\r\n        isDisabledEditMethod.current=!isDisabledEditMethod.current\r\n        setShowModalEditParam(!showModalEditParam)\r\n    }\r\n    const handleModalAddMethod = () => {\r\n        setTextError('')\r\n        isDisabledAddMetod.current=!isDisabledAddMetod.current\r\n        setShowModalAddMethod(!showModalAddMethod)\r\n    }\r\n\r\n    useEffect(() => {\r\n        getMnemonicFile()\r\n        getMethodClasses()\r\n        getMethods()\r\n        getMethodParametrs()\r\n    }, [constant])\r\n    if (role === \"superuser\")\r\n    if (!isLoading)\r\n    return(\r\n        <>\r\n        <AddMethodClassDialog  active={!isDisabledAddClass.current} setActive={handleModalAddClass} isDisabledAddClass={isDisabledAddClass} getMethodClasses={getMethodClasses} textError={textError} setTextError={setTextError}/>\r\n        <AddMethodDialog active={!isDisabledAddMetod.current} setActive={handleModalAddMethod} class_item={class_item} isDisabledAddMetod={isDisabledAddMetod} getMethods={getMethods} textError={textError} setTextError={setTextError}/>\r\n        <AddMethodParamDialog active={!isDisabledAddParam.current} setActive={handleModalAddParam} method={method} isDisabledAddParam={isDisabledAddParam} getMethodParametrs={getMethodParametrs} textError={textError} setTextError={setTextError}/>\r\n        <EditMethodParamDialog active={!isDisabledEditMethod.current} setActive={handleModalEditParam} parametr={parametr} isDisabledEditMethod={isDisabledEditMethod} setMethodParametrs={setMethodParametrs} textError={textError} setTextError={setTextError} methodParametrs={methodParametrs}/>\r\n        <PageTitle title=\"База мнемоник\" \r\n            button={<a className=\"fileButton\"\r\n              style={{marginRight: \"2rem\", visibility: (role === \"user\" || role === \"superuser\" ? 'visible' : 'hidden')}}\r\n              href=\"https://gis.igirgi.su/dj/files/mnemonics.json\"\r\n              download\r\n              >\r\n                  Выгрузить JSON файл\r\n            </a>} \r\n            button2={<Button\r\n            variant=\"contained\"\r\n            size=\"medium\"\r\n            color=\"primary\"\r\n            onClick={handleModalAddClass}\r\n            style={{outline: 'none', visibility: (role === \"user\" || role === \"superuser\" ? 'visible' : 'hidden')}}\r\n        >\r\n            Создать класс методов ГИС\r\n        </Button>} />\r\n        <Grid container spacing={4}>\r\n            <Grid item xs=\"12\">\r\n                <Card>\r\n                    <CardContent>\r\n                        <Table>\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell>Метод ГИС</TableCell>\r\n                                    <TableCell>Регистрируемый параметр</TableCell>\r\n                                    <TableCell>Сокращение на латинице</TableCell>\r\n                                    <TableCell>Тип кривой</TableCell>\r\n                                    <TableCell>Единицы измерения</TableCell>\r\n                                    <TableCell>Описание</TableCell>\r\n                                    {(role === \"user\" || role === \"superuser\") && <TableCell style={{width: \"225px\"}}></TableCell>}\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {\r\n                                    methodClasses.map(cl_item => {return (\r\n                                    <>\r\n                                    <TableRow>\r\n                                        <TableCell align=\"center\" colSpan={(role === \"user\" || role === \"superuser\") ? 7 : 6}>\r\n                                            <b style={{display:(editClass[cl_item.name] && 'none')}} \r\n                                            onClick={() => {\r\n                                                if (role === \"user\" || role === \"superuser\") {\r\n                                                    setClassName(cl_item.name); \r\n                                                    setEditClass(allFalse(editClass)); \r\n                                                    setEditClass({...editClass, [cl_item.name]: true})\r\n                                                }\r\n                                                }}>\r\n                                            {cl_item.name}</b>\r\n                                            <Form style={{width: \"25%\", display:(editClass[cl_item.name] ? 'inline-block' : 'none')}} onSubmit={(e) => onSubmitEditClass(e, cl_item.id, cl_item.name)}>\r\n                                                <Form.Control\r\n                                                    type=\"text\"\r\n                                                    id=\"edit_class\"\r\n                                                    value={className}\r\n                                                    style={{textAlign: \"center\"}}\r\n                                                    onChange={e => setClassName(e.target.value)}\r\n                                                />\r\n                                            </Form>\r\n                                            <Tooltip title=\"Добавить метод ГИС для класса\">\r\n                                            <IconButton \r\n                                            aria-label=\"add_method\" \r\n                                            style={{outline: 'none', visibility: (role === \"user\" || role === \"superuser\" ? 'visible' : 'hidden'), display:((role !== \"user\" || role !== \"superuser\") && editClass[cl_item.name]) && 'none'}}\r\n                                            onClick={() => {setClass_item(cl_item); handleModalAddMethod();}}>\r\n                                                <PlusIcon />\r\n                                            </IconButton>\r\n                                            </Tooltip>\r\n                                            <IconButton\r\n                                            style={{outline: \"none\", display:((role !== \"user\" || role !== \"superuser\") && !editClass[cl_item.name]) && 'none'}}\r\n                                            onClick={() => {deleteMethodClass(cl_item)}}\r\n                                            >\r\n                                                <DeleteIcon />\r\n                                            </IconButton>\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                    {methods.filter(m_item => m_item.method_class_id == cl_item.id).map(item => {\r\n                                        const mass_method_param = methodParametrs.filter(mp => mp.method_id === item.id)\r\n                                        \r\n                                        return (\r\n                                        <>\r\n                                        <TableRow>\r\n                                            <TableCell rowSpan={mass_method_param.length == 0 ? 1 : mass_method_param.length}>\r\n                                                <b style={{display:(editMethod[item.name] && 'none')}} \r\n                                                onClick={() => {\r\n                                                    if (role === \"user\" || role === \"superuser\") {\r\n                                                        setMethodName(item.name); \r\n                                                        setEditMethod(allFalse(editMethod)); \r\n                                                        setEditMethod({...editMethod, [item.name]: true})\r\n                                                    }\r\n                                                }}>\r\n                                                    {item.name}\r\n                                                </b>\r\n                                                <Form style={{width: \"60%\", display:(editMethod[item.name] ? 'inline-block' : 'none')}} onSubmit={(e) => onSubmitEditMethod(e, item)}>\r\n                                                    <Form.Control\r\n                                                        type=\"text\"\r\n                                                        id=\"edit_class\"\r\n                                                        value={methodName}\r\n                                                        style={{textAlign: \"center\"}}\r\n                                                        onChange={e => setMethodName(e.target.value)}\r\n                                                    />\r\n                                                </Form>\r\n                                                <Tooltip title=\"Добавить параметр для метода\">\r\n                                                <IconButton\r\n                                                    aria-label=\"add_method_param\"\r\n                                                    \r\n                                                    style={{outline: 'none', visibility: (role === \"user\" || role === \"superuser\" ? 'visible' : 'hidden'), display:((role !== \"user\" || role !== \"superuser\") && editMethod[item.name]) && 'none'}}\r\n                                                    onClick={() => {setMethod(item); handleModalAddParam();}}>\r\n                                                    <PlusIcon />\r\n                                                </IconButton>\r\n                                                </Tooltip>\r\n                                                <IconButton\r\n                                                style={{outline: \"none\", display:((role !== \"user\" || role !== \"superuser\") && !editMethod[item.name]) && 'none'}}\r\n                                                onClick={() => deleteMethod(item)}\r\n                                                >\r\n                                                    <DeleteIcon />\r\n                                                </IconButton>\r\n                                            </TableCell>\r\n                                            <TableCell>{mass_method_param[0] !== undefined ? mass_method_param[0].name : <>&mdash;</>}</TableCell>\r\n                                            <TableCell>{mass_method_param[0] !== undefined ? mass_method_param[0].abbreviation : <>&mdash;</>}</TableCell>\r\n                                            <TableCell>{mass_method_param[0] !== undefined ? mass_method_param[0].curve_type : <>&mdash;</>}</TableCell>\r\n                                            <TableCell>{mass_method_param[0] !== undefined ? mass_method_param[0].units.map(u => {return (<span>{u} </span>)}) : <>&mdash;</>}</TableCell>\r\n                                            <TableCell>{mass_method_param[0] !== undefined ? mass_method_param[0].description : <>&mdash;</>}</TableCell>\r\n                                            {(role === \"user\" || role === \"superuser\") &&\r\n                                            <TableCell>\r\n                                                {mass_method_param[0] !== undefined ?\r\n                                                <><IconButton\r\n                                                style={{outline: \"none\"}}\r\n                                                onClick={() => history.push({pathname:  `/app/mnemonic/${mass_method_param[0].id}`})}\r\n                                                >\r\n                                                    <SettingsOutlinedIcon />\r\n                                                </IconButton>\r\n                                                <IconButton\r\n                                                style={{outline: \"none\"}}\r\n                                                onClick={() => {setParametr(mass_method_param[0]); handleModalEditParam();}}\r\n                                                >\r\n                                                    <EditIcon />\r\n                                                </IconButton>\r\n                                                <IconButton\r\n                                                style={{outline: \"none\"}}\r\n                                                onClick={() => deleteParam(mass_method_param[0])}\r\n                                                >\r\n                                                    <DeleteIcon />\r\n                                                </IconButton></>\r\n                                                : <>&mdash;</>}\r\n                                            </TableCell>}\r\n                                        </TableRow>\r\n                                        {mass_method_param.filter(mmp => mmp.id !== mass_method_param[0].id).map(i => {return (\r\n                                            <TableRow>\r\n                                                <TableCell>{i.name}</TableCell>\r\n                                                <TableCell>{i.abbreviation}</TableCell>\r\n                                                <TableCell>{i.curve_type}</TableCell>\r\n                                                <TableCell>{i.units.map(u => {return (<span>{u} </span>)})}</TableCell>\r\n                                                <TableCell>{i.description}</TableCell>\r\n                                                {(role === \"user\" || role === \"superuser\") &&\r\n                                                <TableCell>\r\n                                                    <IconButton\r\n                                                    style={{outline: \"none\"}}\r\n                                                    onClick={() => history.push({pathname:  `/app/mnemonic/${i.id}`})}\r\n                                                    >\r\n                                                        <SettingsOutlinedIcon />\r\n                                                    </IconButton>\r\n                                                    <IconButton\r\n                                                    style={{outline: \"none\"}}\r\n                                                    onClick={() => {setParametr(i); handleModalEditParam();}}\r\n                                                    >\r\n                                                        <EditIcon />\r\n                                                    </IconButton>\r\n                                                    <IconButton\r\n                                                    style={{outline: \"none\"}}\r\n                                                    onClick={() => deleteParam(i)}\r\n                                                    >\r\n                                                        <DeleteIcon />\r\n                                                    </IconButton>\r\n                                                </TableCell>}\r\n                                            </TableRow>\r\n                                        )})}\r\n                                        </>\r\n                                    )})}\r\n                                \r\n                                    </>\r\n                                    )\r\n                                })\r\n                                }\r\n                            </TableBody>\r\n                        </Table>\r\n                    </CardContent>\r\n                </Card>\r\n            </Grid>\r\n        </Grid>\r\n        </>\r\n    )\r\n    else return (<Loading/>)\r\n    else return (<Blocked/>)\r\n}\r\n\r\nexport default Mnemonic","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\pages\\logs\\Logs.js",[],"C:\\Users\\s_martyanova\\CheckList\\Front\\src\\pages\\database\\Database.js",["466","467","468","469"],"import React, {useState, useEffect} from 'react';\r\n\r\nimport PageTitle from \"../../components/PageTitle\";\r\nimport CustomToolbarSelect from '../../components/Toolbar/CustomToolbarSelect';\r\nimport EditClusterDialog from '../../components/Dialogs/EditClusterDialog';\r\nimport EditWellDialog from '../../components/Dialogs/EditWellDialog';\r\nimport EditWellboreDialog from '../../components/Dialogs/EditWellboreDialog';\r\n\r\nimport {pie_wells, well_types} from \"./data.js\"\r\n\r\nimport WarningToast from '../../components/Toasts/WarningToast';\r\n\r\nimport MUIDataTable from \"mui-datatables\";\r\n\r\nimport {Form, Row, Col} from 'react-bootstrap';\r\nimport {\r\n    Grid,\r\n    IconButton,\r\n    TextField,\r\n    Box,\r\n    Typography,\r\n    Select, MenuItem, FormControl,\r\n    InputLabel\r\n} from \"@material-ui/core\";\r\nimport {\r\n    AddCircleOutline as PlusIcon,\r\n    Check as CheckIcon\r\n  } from \"@material-ui/icons\";\r\nimport { NavItem } from 'react-bootstrap';\r\n\r\nfunction Database() {\r\n    const constant = false;\r\n    const [customersData, setCustomersData] = useState([]);\r\n    const [fieldsData, setFieldsData] = useState([]);\r\n    const [clustersData, setClustersData] = useState([]);\r\n    const [wellsData, setWellsData] = useState([]);\r\n    const [wellboresData, setWellboresData] = useState([]);\r\n    const [customer, setCustomer] = useState(\"\");\r\n    var customerId = null;\r\n    const [field, setField] = useState(\"\");\r\n    const [fieldId, setFieldId] = useState(null);\r\n    const [cluster, setCluster] = useState(\"\");\r\n    const [clusterId, setClusterId] = useState(null);\r\n    const [well, setWell] = useState(\"\");\r\n    const [well_type, setWell_type] = useState(\"\");\r\n    const [wellId, setWellId] = useState(null);\r\n    const [wellbore, setWellbore] = useState(\"\");\r\n    const [pie_well, setPie_well] = useState(\"\");\r\n    const [diametr, setDiametr] = useState(\"\");\r\n    const [wellboreId, setWellboreId] = useState(null);\r\n\r\n    const [selectedCluster, setSelectedCluster] = useState(null);\r\n    const [selectedClusterName, setSelectedClusterName] = useState(\"\");\r\n    const [selectedWell, setSelectedWell] = useState(null);\r\n\r\n    const [selectedRowsCluster, setSelectedRowsCluster] = useState([]);\r\n    const [selectedRowsWell, setSelectedRowsWell] = useState([]);\r\n    const [selectedRowsWellbore, setSelectedRowsWellbore] = useState([]);\r\n\r\n    const [showInputCluster, setShowInputCluster] = useState(false);\r\n    const [showInputWell, setShowInputWell] = useState(false);\r\n    const [showInputWellbore, setShowInputWellbore] = useState(false);\r\n\r\n    const [refreshCluster, setRefreshCluster] = useState(false);\r\n    const [refreshWell, setRefreshWell] = useState(false);\r\n    const [refreshWellbore, setRefreshWellbore] = useState(false);\r\n\r\n    const [showModalCluster, setShowModalCluster] = useState(false);\r\n    const [showModalWell, setShowModalWell] = useState(false);\r\n    const [showModalWellbore, setShowModalWellbore] = useState(false);\r\n\r\n    const [showWarning, setShowWarning] = useState(false);\r\n\r\n    const role = localStorage.getItem('role');\r\n\r\n    const getCustomers = () => {\r\n        fetch(process.env.REACT_APP_API+'customers/?format=json', { headers : { \r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n            'Authorization': \"Token \" + localStorage.getItem('id_token')\r\n           }\r\n        }) \r\n        .then(response=>response.json())\r\n        .then(data=>{\r\n            setCustomersData(data);\r\n        })\r\n    }\r\n\r\n    const getFields = (customer_id) => {\r\n        fetch(process.env.REACT_APP_API+'fields/'+ customer_id +'?format=json', { headers : { \r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n            'Authorization': \"Token \" + localStorage.getItem('id_token')\r\n           }\r\n        }) \r\n        .then(response=>response.json())\r\n        .then(data=>{\r\n            setFieldsData(data);\r\n        })\r\n    }\r\n\r\n    const getClusters = (field_id) => {\r\n        fetch(process.env.REACT_APP_API+'clusters/'+ field_id +'?format=json', { headers : { \r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n            'Authorization': \"Token \" + localStorage.getItem('id_token')\r\n           }\r\n        }) \r\n        .then(response=>response.json())\r\n        .then(data=>{\r\n            setClustersData(data);\r\n        })\r\n    }\r\n\r\n    const getWells = (cluster_id) => {\r\n        fetch(process.env.REACT_APP_API+'wells/'+ cluster_id +'?format=json', { headers : { \r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n            'Authorization': \"Token \" + localStorage.getItem('id_token')\r\n           }\r\n        }) \r\n        .then(response=>response.json())\r\n        .then(data=>{\r\n            setWellsData(data);\r\n        })\r\n    }\r\n\r\n    const getWellbores = (well_id) => {\r\n        fetch(process.env.REACT_APP_API+'wellbores/'+ well_id +'?format=json', { headers : { \r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n            'Authorization': \"Token \" + localStorage.getItem('id_token')\r\n           }\r\n        }) \r\n        .then(response=>response.json())\r\n        .then(data=>{\r\n            setWellboresData(data);\r\n        })\r\n    }\r\n\r\n    const saveCluster = (field_id) => {\r\n        fetch(process.env.REACT_APP_API+'clusters/' + field_id + '?format=json',{\r\n            method: 'POST',\r\n            headers:{\r\n                'Accept':'application/json',\r\n                'Content-Type':'application/json',\r\n                'Authorization': \"Token \" + localStorage.getItem('id_token')\r\n            },\r\n            body: JSON.stringify({\r\n                \"name\": cluster\r\n            }) \r\n        })\r\n        setCluster(\"\")\r\n    };\r\n\r\n    const saveWell = (cluster_id) => {\r\n        fetch(process.env.REACT_APP_API+'wells/' + cluster_id + '?format=json',{\r\n            method: 'POST',\r\n            headers:{\r\n                'Accept':'application/json',\r\n                'Content-Type':'application/json',\r\n                'Authorization': \"Token \" + localStorage.getItem('id_token')\r\n            },\r\n            body: JSON.stringify({\r\n                \"num_well\": well,\r\n                \"num_pad\": clustersData.find(item => item.id === selectedCluster).name,\r\n                \"well_type\": well_type\r\n            }) \r\n        })\r\n        setWell(\"\")\r\n        setWell_type(\"\")\r\n    };\r\n\r\n    const saveWellbore = (well_id) => {\r\n        fetch(process.env.REACT_APP_API+'wellbores/' + well_id + '?format=json',{\r\n            method: 'POST',\r\n            headers:{\r\n                'Accept':'application/json',\r\n                'Content-Type':'application/json',\r\n                'Authorization': \"Token \" + localStorage.getItem('id_token')\r\n            },\r\n            body: JSON.stringify({\r\n                \"num_wellbore\": wellbore,\r\n                \"pie_well\": pie_well,\r\n                \"diametr\": diametr\r\n            }) \r\n        })\r\n        console.log(JSON.stringify({\r\n            \"num_wellbore\": wellbore,\r\n            \"pie_well\": pie_well,\r\n            \"diametr\": diametr\r\n        }))\r\n        setWellbore(\"\")\r\n        setPie_well(\"\")\r\n        setDiametr(\"\")\r\n    };\r\n\r\n    const deleteCluster = (cluster_id) => {\r\n        fetch(process.env.REACT_APP_API+'clusters/id/'+ cluster_id +'?format=json', { method: 'DELETE', headers: {'Authorization': \"Token \" + localStorage.getItem('id_token')} })\r\n    }\r\n    const deleteWell = (well_id) => {\r\n        fetch(process.env.REACT_APP_API+'wells/id/'+ well_id +'?format=json', { method: 'DELETE', headers: {'Authorization': \"Token \" + localStorage.getItem('id_token')} })\r\n    }\r\n    const deleteWellbore = (wellbore_id) => {\r\n        fetch(process.env.REACT_APP_API+'wellbores/id/'+ wellbore_id +'?format=json', { method: 'DELETE', headers: {'Authorization': \"Token \" + localStorage.getItem('id_token')} })\r\n    }\r\n\r\n    const autoWellbore = (pie_well) => {\r\n        var data = wellboresData.filter(item => item.pie_well === pie_well)\r\n        if (data.length === 0)\r\n            return Number(1)\r\n        else\r\n            return Math.max.apply(Math, data.map(function(o) { return Number(o.num_wellbore) + 1; }))\r\n    }\r\n\r\n    const updateCustomer = (e) => {\r\n        setCustomer(e.target.value)\r\n        customerId = customersData.find(item => item.name === e.target.value).id\r\n        setField(\"\")\r\n        setClustersData([])\r\n        setWellsData([])\r\n        setSelectedCluster(null)\r\n        setWellboresData([])\r\n        setSelectedWell(null)\r\n        setSelectedRowsWell([])\r\n        setSelectedRowsCluster([])\r\n        setSelectedRowsWellbore([])\r\n        getFields(customerId)\r\n    }\r\n\r\n    const updateField = (e) => {\r\n        setField(e.target.value)\r\n        setFieldId(fieldsData.find(item => item.name === e.target.value).id)\r\n        getClusters(fieldsData.find(item => item.name === e.target.value).id)\r\n        setWellsData([])\r\n        setWellboresData([])\r\n        setSelectedCluster(null)\r\n        setSelectedWell(null)\r\n        setSelectedRowsWell([])\r\n        setSelectedRowsCluster([])\r\n        setSelectedRowsWellbore([])\r\n    }\r\n\r\n    const updateCluster = () => {\r\n        if (clustersData.find(item => item.name === cluster) === undefined) {\r\n            saveCluster(fieldsData.find(item => item.name === field).id)\r\n            setRefreshCluster(!refreshCluster)\r\n            setShowInputCluster(false)\r\n        } else handleWarning()\r\n    }\r\n\r\n    const updateWell = () => {\r\n        if (wellsData.find(item => item.num_well === well && item.well_type === well_type) === undefined) {\r\n            saveWell(selectedCluster)\r\n            setRefreshWell(!refreshWell)\r\n            setShowInputWell(false)\r\n        } else handleWarning()\r\n    }\r\n\r\n    const updateWellbore = () => {\r\n        if (wellboresData.find(item => item.num_wellbore === wellbore && item.pie_well === pie_well) === undefined) {\r\n            saveWellbore(selectedWell)\r\n            setRefreshWellbore(!refreshWellbore)\r\n            setShowInputWellbore(false)\r\n        } else handleWarning()\r\n    }\r\n\r\n    const changeNameCluster = () => {\r\n        setClusterId(clustersData[selectedRowsCluster[0]].id);\r\n        handleModalCluster();\r\n    }\r\n\r\n    const changeNameWell = () => {\r\n        setWellId(wellsData[selectedRowsWell[0]].id);\r\n        handleModalWell();\r\n    }\r\n\r\n    const changeNameWellbore = () => {\r\n        setWellboreId(wellboresData[selectedRowsWellbore[0]].id);\r\n        handleModalWellbore();\r\n    }\r\n\r\n    const rowsDeleteCluster = () => {\r\n        if (window.confirm('Вы точно хотите удалить куст '+ clustersData[selectedRowsCluster[0]].name +'?')){\r\n          deleteCluster(clustersData[selectedRowsCluster[0]].id);\r\n          clustersData.splice(selectedRowsCluster[0], 1);\r\n          setSelectedRowsCluster([]);\r\n        }\r\n    }\r\n\r\n    const rowsDeleteWell = () => {\r\n        if (window.confirm('Вы точно хотите удалить скважину '+ wellsData[selectedRowsWell[0]].num_well +'?')){\r\n          deleteWell(wellsData[selectedRowsWell[0]].id);\r\n          wellsData.splice(selectedRowsWell[0], 1);\r\n          setSelectedRowsWell([]);\r\n        }\r\n    }\r\n\r\n    const rowsDeleteWellbore = () => {\r\n        if (window.confirm('Вы точно хотите удалить ствол '+ wellboresData[selectedRowsWellbore[0]].num_wellbore +'?')){\r\n          deleteWellbore(wellboresData[selectedRowsWellbore[0]].id);\r\n          wellboresData.splice(selectedRowsWellbore[0], 1);\r\n          setSelectedRowsWellbore([]);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        getCustomers();\r\n    }, [constant])\r\n\r\n    //опять ебучие костыли как же я их ненавижу, но что делать\r\n    useEffect(() => { \r\n        fieldsData.length !== 0 && getClusters(fieldId);\r\n    }, [refreshCluster])\r\n\r\n    useEffect(() => { \r\n        clustersData.length !== 0 && getWells(selectedCluster);\r\n    }, [refreshWell])\r\n    \r\n    useEffect(() => { \r\n        wellsData.length !== 0 && getWellbores(selectedWell);\r\n    }, [refreshWellbore])\r\n\r\n    const onUpdateCluster = () => {\r\n        setRefreshCluster(!refreshCluster);\r\n        setSelectedRowsCluster([]);\r\n\r\n    }\r\n    const onUpdateWell = () => {\r\n        setRefreshWell(!refreshWell);\r\n        setSelectedRowsWell([]);\r\n    }\r\n    const onUpdateWellbore = () => {\r\n        setRefreshWellbore(!refreshWellbore);\r\n        setSelectedRowsWellbore([]);\r\n    }\r\n\r\n    const onUpdatePieWell = (e) => {\r\n        setPie_well(e.target.value)\r\n        setWellbore(autoWellbore(e.target.value))\r\n    }\r\n\r\n    const handleModalCluster = () => {\r\n        setShowModalCluster(!showModalCluster);\r\n    }\r\n    const handleModalWell = () => {\r\n        setShowModalWell(!showModalWell);\r\n    }\r\n    const handleModalWellbore = () => {\r\n        setShowModalWellbore(!showModalWellbore);\r\n    }\r\n    const handleWarning = () => {\r\n        setShowWarning(!showWarning);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <EditClusterDialog active={showModalCluster} setActive={handleModalCluster} cluster_id={clusterId} field_id={fieldId} onUpdate={onUpdateCluster} cluster_name={clustersData[selectedRowsCluster[0]] !== undefined ? clustersData[selectedRowsCluster[0]].name : \"\"}/> \r\n            <EditWellDialog active={showModalWell} setActive={handleModalWell} well_id={wellId} num_pad={selectedClusterName} onUpdate={onUpdateWell} well_type={wellsData[selectedRowsWell[0]] !== undefined ? wellsData[selectedRowsWell[0]].well_type : \"\"} well_name={wellsData[selectedRowsWell[0]] !== undefined ? wellsData[selectedRowsWell[0]].num_well : \"\"}/> \r\n            <EditWellboreDialog active={showModalWellbore} setActive={handleModalWellbore} wellbore_id={wellboreId} onUpdate={onUpdateWellbore} diametr={wellboresData[selectedRowsWellbore[0]] !== undefined ? wellboresData[selectedRowsWellbore[0]].diametr : \"\"} pie_well={wellboresData[selectedRowsWellbore[0]] !== undefined ? wellboresData[selectedRowsWellbore[0]].pie_well : \"\"} wellbore_name={wellboresData[selectedRowsWellbore[0]] !== undefined ? wellboresData[selectedRowsWellbore[0]].num_wellbore : \"\"}/> \r\n            <WarningToast active={showWarning} setActive={handleWarning}/>\r\n            <PageTitle title=\"Создание скважины\"/>\r\n            <Grid container spacing={4}>\r\n                <Grid item xs={12}>\r\n                    <Form.Group as={Row} style={{paddingBottom:\"0.5rem\"}}>\r\n                        <Col xs=\"3\">\r\n                            <FormControl fullWidth variant=\"standard\">\r\n                                <InputLabel id=\"customer\">Общество</InputLabel>\r\n                                    <Select labelId=\"customer\" name=\"customer\" label=\"Общество\" size=\"small\" value={customer} onChange={e => updateCustomer(e)}>\r\n                                        <MenuItem hidden disabled></MenuItem>\r\n                                        {customersData.map(item => (<MenuItem key={item.name} value={item.name} style={{fontSize:\"20px\"}}>{item.name}</MenuItem>))}\r\n                                    </Select>\r\n                            </FormControl>\r\n                        </Col>\r\n                        <Col xs=\"3\">\r\n                            <FormControl fullWidth variant=\"standard\">\r\n                                <InputLabel id=\"field\">Месторождение</InputLabel>\r\n                                    <Select labelId=\"field\" name=\"field\" label=\"Месторождение\" size=\"small\" value={field} onChange={e => updateField(e)}>\r\n                                        <MenuItem hidden disabled></MenuItem>\r\n                                        {fieldsData.map(item => (<MenuItem key={item.name} value={item.name} style={{fontSize:\"20px\"}}>{item.name}</MenuItem>))}\r\n                                    </Select>\r\n                            </FormControl>\r\n                        </Col>\r\n                        <Col xs=\"6\"></Col>\r\n                    </Form.Group>\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    <MUIDataTable\r\n                        title={<Typography variant=\"h6\">\r\n                        Кусты\r\n                        {<><IconButton aria-label=\"add_cluster\" onClick={() => setShowInputCluster(true)} style={{outline:'none', visibility:((role === \"user\" || role === \"superuser\") && field !== \"\" ? 'visible' : 'hidden')}}>\r\n                            <PlusIcon />\r\n                        </IconButton>\r\n                        <Box sx={{ display: 'inline-block', visibility:(showInputCluster ? 'visible' : 'hidden')}}>\r\n                            <TextField id=\"input-cluster\" variant=\"standard\" label=\"Номер\" value={cluster} style = {{verticalAlign:\"middle\"}} onChange={e => setCluster(e.target.value)}/>\r\n                            <IconButton aria-label=\"save_cluster\" onClick={() => updateCluster()} style={{outline:'none'}}>\r\n                                <CheckIcon sx={{ color: 'action.active', mr: 1, my: 0.5 }} />\r\n                            </IconButton>\r\n                        </Box>\r\n                        </>\r\n                        }\r\n                        </Typography>}\r\n                        data={clustersData.map(item => [item.name])}\r\n                        columns={[\"Номер куста\"]}\r\n                        options={{\r\n                            viewColumns: false,\r\n                            filter: false,\r\n                            print: false,\r\n                            download: false,\r\n                            pagination: false,\r\n                            rowsPerPage: 1000000,\r\n                            textLabels: {\r\n                                body: {\r\n                                  noMatch: \"Записей не найдено.\",\r\n                                  toolTip: \"Сортировать\"\r\n                                },\r\n                                toolbar: {\r\n                                  search: \"Поиск\"\r\n                                },\r\n                                selectedRows: {\r\n                                  text: \"строка выбрана\"\r\n                                },\r\n                              },\r\n                            setRowProps: (row, index) => ({ style: {cursor: 'pointer' } }),\r\n                            rowsSelected: selectedRowsCluster,\r\n                            onRowSelectionChange: (rowsSelectedData, allRows, rowsSelected) => {\r\n                                setSelectedRowsCluster(rowsSelected);\r\n                                if (rowsSelected.length !== 0) {\r\n                                    getWells(clustersData[rowsSelected[0]].id);\r\n                                    setSelectedCluster(clustersData[rowsSelected[0]].id);\r\n                                    setSelectedClusterName(clustersData[rowsSelected[0]].name);\r\n                                } else {\r\n                                    setWellsData([])\r\n                                    setSelectedCluster(null)\r\n                                }\r\n                                setWellboresData([]);\r\n                                setSelectedRowsWell([]);\r\n                                setSelectedRowsWellbore([]);\r\n                                setSelectedWell(null);\r\n                                setShowInputWell(false);\r\n                                setShowInputWellbore(false);\r\n                            },\r\n                            selectableRows: (role === \"user\" || role === \"superuser\" ? 'single' : 'none'),\r\n                            customToolbarSelect: (selectedRows, displayData, setSelectedRows) => (\r\n                                <CustomToolbarSelect selectedRows={selectedRows} displayData={displayData} setSelectedRows={setSelectedRows} onChangeName={changeNameCluster} onRowsDelete={rowsDeleteCluster}/>\r\n                            ),\r\n                            onRowClick: (rowData, rowMeta) => {\r\n                                if (selectedRowsCluster[0] !== rowMeta.dataIndex){\r\n                                    getWells(clustersData[rowMeta.dataIndex].id);\r\n                                    setSelectedRowsCluster([rowMeta.dataIndex]);\r\n                                    setSelectedCluster(clustersData[rowMeta.dataIndex].id);\r\n                                    setSelectedClusterName(clustersData[rowMeta.dataIndex].name);\r\n                                } else {\r\n                                    setSelectedRowsCluster([])\r\n                                    setSelectedCluster(null)\r\n                                    setSelectedClusterName(\"\")\r\n                                    setWellsData([])\r\n                                }\r\n                                setWellboresData([]);\r\n                                setSelectedRowsWell([]);\r\n                                setSelectedRowsWellbore([]);\r\n                                setSelectedWell(null);\r\n                                setShowInputWell(false);\r\n                                setShowInputWellbore(false);\r\n                            }\r\n                        }}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    <MUIDataTable\r\n                        title={<Typography variant=\"h6\">\r\n                        Скважины\r\n                        {<><IconButton aria-label=\"add_well\" onClick={() => setShowInputWell(true)} style={{outline: 'none', visibility:((role === \"user\" || role === \"superuser\") && selectedCluster !== null ? 'visible' : 'hidden')}}>\r\n                            <PlusIcon />\r\n                        </IconButton>\r\n                        <Box sx={{ display: showInputWell ? 'inline-block' : 'none'}}>\r\n                            <TextField id=\"input-well\" variant=\"standard\" label=\"Номер\" value={well} style = {{verticalAlign:\"middle\", marginRight:\"1rem\", width: \"5rem\"}} onChange={e => setWell(e.target.value)}/>\r\n                            <FormControl variant=\"standard\" style={{verticalAlign:\"middle\", width:\"17rem\"}}>\r\n                                <InputLabel id=\"well_type\">Тип скважины</InputLabel>\r\n                                    <Select labelId=\"well_type\" name=\"well_type\" label=\"Тип скважины\" value={well_type} onChange={e => setWell_type(e.target.value)}>\r\n                                        {well_types.map(item => <MenuItem key={item} value={item} style={{fontSize:\"20px\"}}>{item}</MenuItem>)}\r\n                                    </Select>\r\n                            </FormControl>\r\n                            <IconButton aria-label=\"save_well\" onClick={() => updateWell()} style={{outline:'none'}}>\r\n                                <CheckIcon sx={{ color: 'action.active', mr: 1, my: 0.5 }} />\r\n                            </IconButton>\r\n                        </Box>\r\n                        </>}\r\n                        </Typography>}\r\n                        data={wellsData.map(item => [item.num_well, item.well_type])}\r\n                        columns={[\"Номер скважины\", \"Тип скважины\"]}\r\n                        options={{\r\n                            viewColumns: false,\r\n                            setRowProps: (row, index) => ({ style: { cursor: 'pointer' } }),\r\n                            print: false,\r\n                            filter: false,\r\n                            download: false,\r\n                            pagination: false,\r\n                            rowsPerPage: 1000000,\r\n                            textLabels: {\r\n                                body: {\r\n                                  noMatch: \"Записей не найдено.\",\r\n                                  toolTip: \"Сортировать\"\r\n                                },\r\n                                toolbar: {\r\n                                  search: \"Поиск\"\r\n                                },\r\n                                selectedRows: {\r\n                                  text: \"строка выбрана\"\r\n                                },\r\n                              },\r\n                            selectableRows: (role === \"user\" || role === \"superuser\" ? 'single' : 'none'),\r\n                            rowsSelected: selectedRowsWell,\r\n                            onRowSelectionChange: (rowsSelectedData, allRows, rowsSelected) => {\r\n                                setSelectedRowsWell(rowsSelected);\r\n                                if (rowsSelected.length !== 0) {\r\n                                    getWellbores(wellsData[rowsSelected[0]].id);\r\n                                    setSelectedWell(wellsData[rowsSelected[0]].id);\r\n                                } else {\r\n                                    setWellboresData([])\r\n                                    setSelectedWell(null)\r\n                                }\r\n                                setSelectedRowsWellbore([]);\r\n                                setShowInputWellbore(false);\r\n                            },\r\n                            customToolbarSelect: (selectedRows, displayData, setSelectedRows) => (\r\n                                <CustomToolbarSelect selectedRows={selectedRows} displayData={displayData} setSelectedRows={setSelectedRows} onChangeName={changeNameWell} onRowsDelete={rowsDeleteWell}/>\r\n                            ),\r\n                            onRowClick: (rowData, rowMeta) => {\r\n                                if (selectedRowsWell[0] !== rowMeta.dataIndex){\r\n                                    getWellbores(wellsData[rowMeta.dataIndex].id);\r\n                                    setSelectedRowsWell([rowMeta.dataIndex]);\r\n                                    setSelectedWell(wellsData[rowMeta.dataIndex].id);\r\n                                }\r\n                                else {\r\n                                    setSelectedRowsWell([])\r\n                                    setSelectedWell(null)\r\n                                    setWellboresData([])\r\n                                }\r\n                                setSelectedRowsWellbore([]);\r\n                                setShowInputWellbore(false);\r\n                             }\r\n                        }}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    <MUIDataTable\r\n                        title={<Typography variant=\"h6\">\r\n                        Стволы\r\n                        {<><IconButton aria-label=\"add_wellbore\" onClick={() => setShowInputWellbore(true)} style={{outline: 'none', visibility:((role === \"user\" || role === \"superuser\") && selectedWell !== null ? 'visible' : 'hidden')}}>\r\n                            <PlusIcon />\r\n                        </IconButton>\r\n                        <Box sx={{ display: showInputWellbore ? 'inline-block' : 'none'}}>\r\n                            <FormControl variant=\"standard\" style={{width:\"10rem\", verticalAlign:\"middle\", marginRight:\"1rem\"}}>\r\n                                <InputLabel id=\"pie_well\">Участок ствола</InputLabel>\r\n                                    <Select labelId=\"pie_well\" name=\"pie_well\" label=\"Участок ствола скважины\" value={pie_well} onChange={e => onUpdatePieWell(e)}>\r\n                                        {pie_wells.map(item => <MenuItem key={item} value={item} style={{fontSize:\"20px\"}}>{item}</MenuItem>)}\r\n                                    </Select>\r\n                            </FormControl>\r\n                            <TextField id=\"input-wellbore\" variant=\"standard\" label=\"Номер\" value={wellbore} style = {{verticalAlign:\"middle\", marginRight:\"1rem\", width: \"5rem\"}} onChange={e => setWellbore(e.target.value)}/>\r\n                            <TextField id=\"input-diametr\" variant=\"standard\" label=\"Диаметр\" type=\"number\" value={diametr} style = {{verticalAlign:\"middle\", width: \"5rem\"}} onChange={e => setDiametr(e.target.value)}/>\r\n                            <IconButton aria-label=\"save_wellbore\" onClick={() => updateWellbore()} style={{outline:'none'}}>\r\n                                <CheckIcon sx={{ color: 'action.active', mr: 1, my: 0.5 }} />\r\n                            </IconButton>\r\n                        </Box>\r\n                        </>}\r\n                        </Typography>}\r\n                        data={wellboresData.map(item => [item.num_wellbore, item.pie_well, item.diametr])}\r\n                        columns={[\"Номер ствола\", \"Участок ствола скважины\", \"Диаметр\"]}\r\n                        options={{\r\n                            viewColumns: false,\r\n                            setRowProps: value => ({ style: { cursor: 'pointer' } }),\r\n                            print: false,\r\n                            filter: false,\r\n                            download: false,\r\n                            pagination: false,\r\n                            rowsPerPage: 1000000,\r\n                            textLabels: {\r\n                                body: {\r\n                                  noMatch: \"Записей не найдено.\",\r\n                                  toolTip: \"Сортировать\"\r\n                                },\r\n                                toolbar: {\r\n                                  search: \"Поиск\"\r\n                                },\r\n                                selectedRows: {\r\n                                  text: \"строка выбрана\"\r\n                                },\r\n                              },\r\n                            selectableRows: (role === \"user\" || role === \"superuser\" ? 'single' : 'none'),\r\n                            rowsSelected: selectedRowsWellbore,\r\n                            onRowSelectionChange: (rowsSelectedData, allRows, rowsSelected) => {\r\n                                setSelectedRowsWellbore(rowsSelected);\r\n                            },\r\n                            onRowClick: (rowData, rowMeta) => {\r\n                                selectedRowsWellbore[0] !== rowMeta.dataIndex ? setSelectedRowsWellbore([rowMeta.dataIndex]) : setSelectedRowsWellbore([])\r\n                            },\r\n                            customToolbarSelect: (selectedRows, displayData, setSelectedRows) => (\r\n                                <CustomToolbarSelect selectedRows={selectedRows} displayData={displayData} setSelectedRows={setSelectedRows} onChangeName={changeNameWellbore} onRowsDelete={rowsDeleteWellbore}/>\r\n                            ),\r\n                        }}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Database;\r\n","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\pages\\trash\\Trash.js",["470"],"import React, {useState, useEffect} from 'react';\r\n\r\nimport {\r\n    Grid,\r\n    Button,\r\n    CircularProgress,\r\n    Typography,\r\n    FormControl,\r\n    InputLabel, Select, MenuItem\r\n  } from \"@material-ui/core\";\r\n\r\nimport MUIDataTable from \"mui-datatables\";\r\n\r\nimport PageTitle from \"../../components/PageTitle\";\r\nimport CustomToolbarSelectTrash from '../../components/Toolbar/CustomToolbarSelectTrash';\r\nimport NotFound from '../../components/NotFound/NotFound';\r\nimport { textLabels } from '../textLabels';\r\n\r\nfunction Trash() {\r\n    const role = localStorage.getItem('role');\r\n    const [category, setCategory] = useState(\"\")\r\n\r\n    const [customersData, setCustomersData] = useState([])\r\n    const [fieldsData, setFieldsData] = useState([])\r\n    const [clustersData, setClustersData] = useState([])\r\n    const [wellsData, setWellsData] = useState([])\r\n    const [wellboresData, setWellboresData] = useState([])\r\n    const [stratasData, setStratasData] = useState([])\r\n    const [servicesData, setServicesData] = useState([])\r\n    const [serviceMethodsData, setServiceMethodsData] = useState([])\r\n    const [qualityControlsData, setQualityControlsData] = useState([])\r\n\r\n    const [selectedRows, setSelectedRows] = useState([]);\r\n\r\n    const columnsStrata = [\r\n        {\r\n            name: \"Название пласта\"\r\n        },\r\n        {\r\n            name: \"Месторождение\"\r\n        },\r\n        {\r\n            name: \"Прошедшее время с момента удаления\"\r\n        },\r\n        {\r\n            name: \"Прикрепленный файл\",\r\n            options: {\r\n                customBodyRender: (value, tableMeta, updateValue) => {\r\n                    return (\r\n                        stratasData[tableMeta.rowIndex].strata_file ? <Button size=\"medium\" onClick={() => window.open(stratasData[tableMeta.rowIndex].strata_file, '_blank')} style={{outline: \"none\", width: \"40%\", backgroundColor:\"#34547A\", color:\"#fff\"}}>Открыть файл</Button>\r\n                        : <Button disabled size=\"medium\" style={{outline: \"none\", backgroundColor:\"#F6D106\", color:\"#000\", width: \"40%\"}}>Файлов не обнаружено</Button>\r\n                        );\r\n                  }\r\n            }\r\n        }\r\n    ]\r\n\r\n    const getDeletedCustomers = () => {\r\n        fetch(process.env.REACT_APP_API+'deleted_customers/?format=json', { headers : { \r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n            'Authorization': \"Token \" + localStorage.getItem('id_token')\r\n           }\r\n        }) \r\n        .then(response=>response.json())\r\n        .then(data=>{\r\n            setCustomersData(data)\r\n        })\r\n    }\r\n    const getDeletedFields = () => {\r\n        fetch(process.env.REACT_APP_API+'deleted_fields/?format=json', { headers : { \r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n            'Authorization': \"Token \" + localStorage.getItem('id_token')\r\n           }\r\n        }) \r\n        .then(response=>response.json())\r\n        .then(data=>{\r\n            setFieldsData(data)\r\n        })\r\n    }\r\n    const getDeletedClusters = () => {\r\n        fetch(process.env.REACT_APP_API+'deleted_clusters/?format=json', { headers : { \r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n            'Authorization': \"Token \" + localStorage.getItem('id_token')\r\n           }\r\n        }) \r\n        .then(response=>response.json())\r\n        .then(data=>{\r\n            setClustersData(data)\r\n        })\r\n    }\r\n    const getDeletedWells = () => {\r\n        fetch(process.env.REACT_APP_API+'deleted_wells/?format=json', { headers : { \r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n            'Authorization': \"Token \" + localStorage.getItem('id_token')\r\n           }\r\n        }) \r\n        .then(response=>response.json())\r\n        .then(data=>{\r\n            setWellsData(data)\r\n        })\r\n    }\r\n    const getDeletedWellbores = () => {\r\n        fetch(process.env.REACT_APP_API+'deleted_wellbores/?format=json', { headers : { \r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n            'Authorization': \"Token \" + localStorage.getItem('id_token')\r\n           }\r\n        }) \r\n        .then(response=>response.json())\r\n        .then(data=>{\r\n            setWellboresData(data)\r\n        })\r\n    }\r\n    const getDeletedStratas = () => {\r\n        fetch(process.env.REACT_APP_API+'deleted_strata/?format=json', { headers : { \r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n            'Authorization': \"Token \" + localStorage.getItem('id_token')\r\n           }\r\n        }) \r\n        .then(response=>response.json())\r\n        .then(data=>{\r\n            setStratasData(data)\r\n        })\r\n    }\r\n    const getDeletedServices = () => {\r\n        fetch(process.env.REACT_APP_API+'deleted_services/?format=json', { headers : { \r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n            'Authorization': \"Token \" + localStorage.getItem('id_token')\r\n           }\r\n        }) \r\n        .then(response=>response.json())\r\n        .then(data=>{\r\n            setServicesData(data)\r\n        })\r\n    }\r\n    const getDeletedServiceMethods = () => {\r\n        fetch(process.env.REACT_APP_API+'deleted_service_methods/?format=json', { headers : { \r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n            'Authorization': \"Token \" + localStorage.getItem('id_token')\r\n           }\r\n        }) \r\n        .then(response=>response.json())\r\n        .then(data=>{\r\n            setServiceMethodsData(data)\r\n        })\r\n    }\r\n    const getDeletedQualityControls = () => {\r\n        fetch(process.env.REACT_APP_API+'deleted_quality/?format=json', { headers : { \r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n            'Authorization': \"Token \" + localStorage.getItem('id_token')\r\n           }\r\n        }) \r\n        .then(response=>response.json())\r\n        .then(data=>{\r\n            setQualityControlsData(data)\r\n        })\r\n    }\r\n\r\n    const recoveryCustomer = (id) => {\r\n        fetch(process.env.REACT_APP_API+'recovery_customer/'+ id +'?format=json',{\r\n            method: 'PUT',\r\n            headers:{\r\n                'Accept':'application/json',\r\n                'Content-Type':'application/json',\r\n                'Authorization': \"Token \" + localStorage.getItem('id_token')\r\n            },\r\n            body: JSON.stringify({\r\n                \"name\": customersData.find(item => item.id === id).name\r\n            }) \r\n        })\r\n    }\r\n    const recoveryField = (id) => {\r\n        fetch(process.env.REACT_APP_API+'recovery_field/'+ id +'?format=json',{\r\n            method: 'PUT',\r\n            headers:{\r\n                'Accept':'application/json',\r\n                'Content-Type':'application/json',\r\n                'Authorization': \"Token \" + localStorage.getItem('id_token')\r\n            },\r\n            body: JSON.stringify({\r\n                \"name\": fieldsData.find(item => item.id === id).name\r\n            }) \r\n        })\r\n    }\r\n    const recoveryCluster = (id) => {\r\n        fetch(process.env.REACT_APP_API+'recovery_cluster/'+ id +'?format=json',{\r\n            method: 'PUT',\r\n            headers:{\r\n                'Accept':'application/json',\r\n                'Content-Type':'application/json',\r\n                'Authorization': \"Token \" + localStorage.getItem('id_token')\r\n            },\r\n            body: JSON.stringify({\r\n                \"name\": clustersData.find(item => item.id === id).name\r\n            }) \r\n        })\r\n    }\r\n    const recoveryWell = (id) => {\r\n        fetch(process.env.REACT_APP_API+'recovery_well/'+ id +'?format=json',{\r\n            method: 'PUT',\r\n            headers:{\r\n                'Accept':'application/json',\r\n                'Content-Type':'application/json',\r\n                'Authorization': \"Token \" + localStorage.getItem('id_token')\r\n            },\r\n            body: JSON.stringify({\r\n                \"num_well\": wellsData.find(item => item.id === id).num_well,\r\n                \"num_pad\": wellsData.find(item => item.id === id).num_pad\r\n            }) \r\n        })\r\n    }\r\n    const recoveryWellbore = (id) => {\r\n        fetch(process.env.REACT_APP_API+'recovery_wellbore/'+ id +'?format=json',{\r\n            method: 'PUT',\r\n            headers:{\r\n                'Accept':'application/json',\r\n                'Content-Type':'application/json',\r\n                'Authorization': \"Token \" + localStorage.getItem('id_token')\r\n            },\r\n            body: JSON.stringify({\r\n                \"num_wellbore\": wellboresData.find(item => item.id === id).num_wellbore\r\n            }) \r\n        })\r\n    }\r\n    const recoveryStrata = (id) => {\r\n        fetch(process.env.REACT_APP_API+'recovery_strata/'+ id +'?format=json',{\r\n            method: 'PUT',\r\n            headers:{\r\n                'Accept':'application/json',\r\n                'Content-Type':'application/json',\r\n                'Authorization': \"Token \" + localStorage.getItem('id_token')\r\n            },\r\n            body: JSON.stringify({\r\n                \"name\": stratasData.find(item => item.id === id).name\r\n            }) \r\n        })\r\n    }\r\n    const recoveryService = (id) => {\r\n        fetch(process.env.REACT_APP_API+'recovery_service/'+ id +'?format=json',{\r\n            method: 'PUT',\r\n            headers:{\r\n                'Accept':'application/json',\r\n                'Content-Type':'application/json',\r\n                'Authorization': \"Token \" + localStorage.getItem('id_token')\r\n            },\r\n            body: JSON.stringify({\r\n                \"name\": servicesData.find(item => item.id === id).name\r\n            }) \r\n        })\r\n    }\r\n    const recoveryServiceMethod = (id) => {\r\n        fetch(process.env.REACT_APP_API+'recovery_service_method/'+ id +'?format=json',{\r\n            method: 'PUT',\r\n            headers:{\r\n                'Accept':'application/json',\r\n                'Content-Type':'application/json',\r\n                'Authorization': \"Token \" + localStorage.getItem('id_token')\r\n            },\r\n            body: JSON.stringify({}) \r\n        })\r\n    }\r\n    const recoveryQuality = (id) => {\r\n        fetch(process.env.REACT_APP_API+'recovery_quality/'+ id +'?format=json',{\r\n            method: 'PUT',\r\n            headers:{\r\n                'Accept':'application/json',\r\n                'Content-Type':'application/json',\r\n                'Authorization': \"Token \" + localStorage.getItem('id_token')\r\n            },\r\n            body: JSON.stringify({\r\n                \"data_type\": qualityControlsData.find(item => item.quality_control_id === id).data_type\r\n            }) \r\n        })\r\n    }\r\n\r\n    const deleteCustomer = (id) => {\r\n        fetch(process.env.REACT_APP_API+'del_customer/'+ id +'?format=json', { method: 'DELETE', headers: {'Authorization': \"Token \" + localStorage.getItem('id_token')} })\r\n    }\r\n    const deleteField = (id) => {\r\n        fetch(process.env.REACT_APP_API+'del_field/'+ id +'?format=json', { method: 'DELETE', headers: {'Authorization': \"Token \" + localStorage.getItem('id_token')} })\r\n    }\r\n    const deleteCluster = (id) => {\r\n        fetch(process.env.REACT_APP_API+'del_cluster/'+ id +'?format=json', { method: 'DELETE', headers: {'Authorization': \"Token \" + localStorage.getItem('id_token')} })\r\n    }\r\n    const deleteWell = (id) => {\r\n        fetch(process.env.REACT_APP_API+'del_well/'+ id +'?format=json', { method: 'DELETE', headers: {'Authorization': \"Token \" + localStorage.getItem('id_token')} })\r\n    }\r\n    const deleteWellbore = (id) => {\r\n        fetch(process.env.REACT_APP_API+'del_wellbore/'+ id +'?format=json', { method: 'DELETE', headers: {'Authorization': \"Token \" + localStorage.getItem('id_token')} })\r\n    }\r\n    const deleteStrata = (id) => {\r\n        fetch(process.env.REACT_APP_API+'del_strata/'+ id +'?format=json', { method: 'DELETE', headers: {'Authorization': \"Token \" + localStorage.getItem('id_token')} })\r\n    }\r\n    const deleteService = (id) => {\r\n        fetch(process.env.REACT_APP_API+'del_service/'+ id +'?format=json', { method: 'DELETE', headers: {'Authorization': \"Token \" + localStorage.getItem('id_token')} })\r\n    }\r\n    const deleteServiceMethod = (id) => {\r\n        fetch(process.env.REACT_APP_API+'del_service_method/'+ id +'?format=json', { method: 'DELETE', headers: {'Authorization': \"Token \" + localStorage.getItem('id_token')} })\r\n    }\r\n    const deleteQuality = (id) => {\r\n        fetch(process.env.REACT_APP_API+'del_quality/'+ id +'?format=json', { method: 'DELETE', headers: {'Authorization': \"Token \" + localStorage.getItem('id_token')} })\r\n    }\r\n\r\n    const rowsDeleteCustomer = () => {\r\n        if (window.confirm('Вы точно хотите удалить '+ customersData[selectedRows[0]].name +' из списка дочерних обществ?')){\r\n            deleteCustomer(customersData[selectedRows[0]].id);\r\n            customersData.splice(selectedRows[0], 1);\r\n          }\r\n        setSelectedRows([]);\r\n    }\r\n    const rowsDeleteField = () => {\r\n        if (window.confirm('Вы точно хотите удалить '+ fieldsData[selectedRows[0]].name +' из списка месторождений?')){\r\n            deleteField(fieldsData[selectedRows[0]].id);\r\n            fieldsData.splice(selectedRows[0], 1);\r\n          }\r\n        setSelectedRows([]);\r\n    }\r\n    const rowsDeleteCluster = () => {\r\n        if (window.confirm('Вы точно хотите удалить куст №'+ clustersData[selectedRows[0]].name +' из списка кустов?')){\r\n            deleteCluster(clustersData[selectedRows[0]].id);\r\n            clustersData.splice(selectedRows[0], 1);\r\n          }\r\n        setSelectedRows([]);\r\n    }\r\n    const rowsDeleteWell = () => {\r\n        if (window.confirm('Вы точно хотите удалить скважину №'+ wellsData[selectedRows[0]].num_well +' из списка скважин?')){\r\n            deleteWell(wellsData[selectedRows[0]].id);\r\n            wellsData.splice(selectedRows[0], 1);\r\n          }\r\n        setSelectedRows([]);\r\n    }\r\n    const rowsDeleteWellbore = () => {\r\n        if (window.confirm('Вы точно хотите удалить ствол №'+ wellboresData[selectedRows[0]].num_wellbore +' из списка стволов?')){\r\n            deleteWellbore(wellboresData[selectedRows[0]].id);\r\n            wellboresData.splice(selectedRows[0], 1);\r\n          }\r\n        setSelectedRows([]);\r\n    }\r\n    const rowsDeleteStrata = () => {\r\n        if (window.confirm('Вы точно хотите удалить пласт №'+ stratasData[selectedRows[0]].name +' из списка пластов?')){\r\n            deleteStrata(stratasData[selectedRows[0]].id);\r\n            stratasData.splice(selectedRows[0], 1);\r\n          }\r\n        setSelectedRows([]);\r\n    }\r\n    const rowsDeleteService = () => {\r\n        if (window.confirm('Вы точно хотите удалить '+ servicesData[selectedRows[0]].name +' из списка сервисных компаний?')){\r\n            deleteService(servicesData[selectedRows[0]].id);\r\n            servicesData.splice(selectedRows[0], 1);\r\n          }\r\n        setSelectedRows([]);\r\n    }\r\n    const rowsDeleteServiceMethod = () => {\r\n        if (window.confirm('Вы точно хотите удалить инструмент '+ serviceMethodsData[selectedRows[0]].tool_type + ' cервисной компании ' + serviceMethodsData[selectedRows[0]].service_name +' из списка сервисных методов?')){\r\n            deleteServiceMethod(serviceMethodsData[selectedRows[0]].service_method_id);\r\n            serviceMethodsData.splice(selectedRows[0], 1);\r\n          }\r\n        setSelectedRows([]);\r\n    }\r\n    const rowsDeleteQualityControl = () => {\r\n        if (window.confirm('Вы точно хотите удалить отчёт №'+ qualityControlsData[selectedRows[0]].quality_control_id +' из списка отчётов?')){\r\n            deleteQuality(qualityControlsData[selectedRows[0]].quality_control_id);\r\n            qualityControlsData.splice(selectedRows[0], 1);\r\n          }\r\n        setSelectedRows([]);\r\n    }\r\n\r\n    const recoveryRowsCustomer = () => {\r\n        recoveryCustomer(customersData[selectedRows[0]].id);\r\n        customersData.splice(selectedRows[0], 1);\r\n        setSelectedRows([])\r\n    }\r\n    const recoveryRowsField = () => {\r\n        recoveryField(fieldsData[selectedRows[0]].id);\r\n        fieldsData.splice(selectedRows[0], 1);\r\n        setSelectedRows([])\r\n    }\r\n    const recoveryRowsCluster = () => {\r\n        recoveryCluster(clustersData[selectedRows[0]].id);\r\n        clustersData.splice(selectedRows[0], 1);\r\n        setSelectedRows([])\r\n    }\r\n    const recoveryRowsWell = () => {\r\n        recoveryWell(wellsData[selectedRows[0]].id);\r\n        wellsData.splice(selectedRows[0], 1);\r\n        setSelectedRows([])\r\n    }\r\n    const recoveryRowsWellbore = () => {\r\n        recoveryWellbore(wellboresData[selectedRows[0]].id);\r\n        wellboresData.splice(selectedRows[0], 1);\r\n        setSelectedRows([])\r\n    }\r\n    const recoveryRowsStrata = () => {\r\n        recoveryStrata(stratasData[selectedRows[0]].id);\r\n        stratasData.splice(selectedRows[0], 1);\r\n        setSelectedRows([])\r\n    }\r\n    const recoveryRowsService = () => {\r\n        recoveryService(servicesData[selectedRows[0]].id);\r\n        servicesData.splice(selectedRows[0], 1);\r\n        setSelectedRows([])\r\n    }\r\n    const recoveryRowsServiceMethod = () => {\r\n        recoveryServiceMethod(serviceMethodsData[selectedRows[0]].service_method_id);\r\n        serviceMethodsData.splice(selectedRows[0], 1);\r\n        setSelectedRows([])\r\n    }\r\n    const recoveryRowsQualityControl = () => {\r\n        recoveryQuality(qualityControlsData[selectedRows[0]].quality_control_id);\r\n        qualityControlsData.splice(selectedRows[0], 1);\r\n        setSelectedRows([])\r\n    }\r\n    \r\n\r\n    const updateCategory = (name) => {\r\n        setCategory(name)\r\n        setSelectedRows([])\r\n        name === \"Дочерние общества\" && getDeletedCustomers()\r\n        name === \"Месторождения\" && getDeletedFields()\r\n        name === \"Кусты\" && getDeletedClusters()\r\n        name === \"Скважины\" && getDeletedWells()\r\n        name === \"Стволы\" && getDeletedWellbores()\r\n        name === \"Пласты\" && getDeletedStratas()\r\n        name === \"Сервисные компании\" && getDeletedServices()\r\n        name === \"Сервисные методы\" && getDeletedServiceMethods()\r\n        name === \"Отчеты качества ГИС\" && getDeletedQualityControls()\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <PageTitle title={category !== \"\" ? \"Корзина (\" + category + \")\" : \"Корзина\"}/>\r\n            <Grid container spacing={4}>\r\n                <Grid item xs={3}>\r\n                    <FormControl fullWidth variant=\"standard\">\r\n                        <InputLabel id=\"category\">Выберите категорию</InputLabel>\r\n                            <Select labelId=\"category\" name=\"category\" label=\"Выберите категорию\" size=\"small\" value={category} onChange={e => updateCategory(e.target.value)}>\r\n                                <MenuItem hidden disabled></MenuItem>\r\n                                <MenuItem key=\"customers\" value=\"Дочерние общества\" style={{fontSize: \"20px\"}}>Дочерние общества</MenuItem>\r\n                                <MenuItem key=\"fields\" value=\"Месторождения\" style={{fontSize: \"20px\"}}>Месторождения</MenuItem>\r\n                                <MenuItem key=\"clusters\" value=\"Кусты\" style={{fontSize: \"20px\"}}>Кусты</MenuItem>\r\n                                <MenuItem key=\"wells\" value=\"Скважины\" style={{fontSize: \"20px\"}}>Скважины</MenuItem>\r\n                                <MenuItem key=\"wellbores\" value=\"Стволы\" style={{fontSize: \"20px\"}}>Стволы</MenuItem>\r\n                                <MenuItem key=\"stratas\" value=\"Пласты\" style={{fontSize: \"20px\"}}>Пласты</MenuItem>\r\n                                <MenuItem key=\"services\" value=\"Сервисные компании\" style={{fontSize: \"20px\"}}>Сервисные компании</MenuItem>\r\n                                <MenuItem key=\"service_methods\" value=\"Сервисные методы\" style={{fontSize: \"20px\"}}>Сервисные методы</MenuItem>\r\n                                <MenuItem key=\"quality\" value=\"Отчеты качества ГИС\" style={{fontSize: \"20px\"}}>Отчеты качества ГИС</MenuItem>\r\n                            </Select>\r\n                    </FormControl>\r\n                </Grid>\r\n                <Grid item xs={9}></Grid>\r\n                {category === \"Дочерние общества\" && <Grid item xs={12}>\r\n                    {customersData.length === 0 ? <NotFound/> :\r\n                    <MUIDataTable\r\n                        title={<Typography variant=\"h6\">\r\n                        Удаленные дочерние общества\r\n                        {customersData.length === 0 && <CircularProgress size={24} style={{ marginLeft: 15, position: 'relative', top: 4 }} />}\r\n                    </Typography>}\r\n                        data={customersData.map(item => [item.name, item.time_before_del])}\r\n                        columns={[\"Название\", \"Прошедшее время с момента удаления\"]}\r\n                        options={{\r\n                        print: false,\r\n                        filter: false,\r\n                        download: false,\r\n                        rowsPerPage: 50,\r\n                        rowsPerPageOptions: [50,100,500],\r\n                        viewColumns: \"false\",\r\n                        textLabels: textLabels,\r\n                        rowsSelected: selectedRows,\r\n                        onRowSelectionChange: (rowsSelectedData, allRows, rowsSelected) => {\r\n                            setSelectedRows(rowsSelected)\r\n                          },\r\n                        customToolbarSelect: (selectedRows, displayData, setSelectedRows) => (\r\n                            <CustomToolbarSelectTrash selectedRows={selectedRows} displayData={displayData} setSelectedRows={setSelectedRows} onRowsRecovery={recoveryRowsCustomer} onRowsDelete={rowsDeleteCustomer}/>\r\n                        ),\r\n                        selectableRows: (role === \"user\" || role === \"superuser\" ? 'single' : 'none'),\r\n                        }}\r\n                    />}\r\n                </Grid>}\r\n                {category === \"Месторождения\" && <Grid item xs={12}>\r\n                    {fieldsData.length === 0 ? <NotFound/> :\r\n                    <MUIDataTable\r\n                        title={<Typography variant=\"h6\">\r\n                        Удаленные месторождения\r\n                        {fieldsData.length === 0 && <CircularProgress size={24} style={{ marginLeft: 15, position: 'relative', top: 4 }} />}\r\n                    </Typography>}\r\n                        data={fieldsData.map(item => [item.name, item.customer_name, item.time_before_del])}\r\n                        columns={[\"Название\", \"Дочернее общество\", \"Прошедшее время с момента удаления\"]}\r\n                        options={{\r\n                        print: false,\r\n                        filter: false,\r\n                        download: false,\r\n                        rowsPerPage: 50,\r\n                        rowsPerPageOptions: [50,100,500],\r\n                        viewColumns: \"false\",\r\n                        textLabels: textLabels,\r\n                        rowsSelected: selectedRows,\r\n                        onRowSelectionChange: (rowsSelectedData, allRows, rowsSelected) => {\r\n                            setSelectedRows(rowsSelected)\r\n                        },\r\n                        customToolbarSelect: (selectedRows, displayData, setSelectedRows) => (\r\n                            <CustomToolbarSelectTrash selectedRows={selectedRows} displayData={displayData} setSelectedRows={setSelectedRows} onRowsRecovery={recoveryRowsField} onRowsDelete={rowsDeleteField}/>\r\n                        ),\r\n                        selectableRows: (role === \"user\" || role === \"superuser\" ? 'single' : 'none'),\r\n                        }}\r\n                    />}\r\n                </Grid>}\r\n                {category === \"Кусты\" && <Grid item xs={12}>\r\n                    {clustersData.length === 0 ? <NotFound/> :\r\n                    <MUIDataTable\r\n                        title={<Typography variant=\"h6\">\r\n                        Удаленные кусты\r\n                        {clustersData.length === 0 && <CircularProgress size={24} style={{ marginLeft: 15, position: 'relative', top: 4 }} />}\r\n                    </Typography>}\r\n                        data={clustersData.map(item => [item.name, item.field_name, item.time_before_del])}\r\n                        columns={[\"Название\", \"Месторождение\", \"Прошедшее время с момента удаления\"]}\r\n                        options={{\r\n                        print: false,\r\n                        filter: false,\r\n                        download: false,\r\n                        rowsPerPage: 50,\r\n                        rowsPerPageOptions: [50,100,500],\r\n                        viewColumns: \"false\",\r\n                        textLabels: textLabels,\r\n                        rowsSelected: selectedRows,\r\n                        onRowSelectionChange: (rowsSelectedData, allRows, rowsSelected) => {\r\n                            setSelectedRows(rowsSelected)\r\n                        },\r\n                        customToolbarSelect: (selectedRows, displayData, setSelectedRows) => (\r\n                            <CustomToolbarSelectTrash selectedRows={selectedRows} displayData={displayData} setSelectedRows={setSelectedRows} onRowsRecovery={recoveryRowsCluster} onRowsDelete={rowsDeleteCluster}/>\r\n                        ),\r\n                        selectableRows: (role === \"user\" || role === \"superuser\" ? 'single' : 'none'),\r\n                        }}\r\n                    />}\r\n                </Grid>}\r\n                {category === \"Скважины\" && <Grid item xs={12}>\r\n                    {wellsData.length === 0 ? <NotFound/> :\r\n                    <MUIDataTable\r\n                        title={<Typography variant=\"h6\">\r\n                        Удаленные скважины\r\n                        {wellsData.length === 0 && <CircularProgress size={24} style={{ marginLeft: 15, position: 'relative', top: 4 }} />}\r\n                    </Typography>}\r\n                        data={wellsData.map(item => [item.num_well, item.num_pad, item.well_type, item.customer_name, item.time_before_del])}\r\n                        columns={[\"Номер скважины\", \"Номер куста\", \"Тип скважины\", \"Дочернее общество\", \"Прошедшее время с момента удаления\"]}\r\n                        options={{\r\n                        print: false,\r\n                        filter: false,\r\n                        download: false,\r\n                        rowsPerPage: 50,\r\n                        rowsPerPageOptions: [50,100,500],\r\n                        viewColumns: \"false\",\r\n                        textLabels: textLabels,\r\n                        rowsSelected: selectedRows,\r\n                        onRowSelectionChange: (rowsSelectedData, allRows, rowsSelected) => {\r\n                            setSelectedRows(rowsSelected)\r\n                        },\r\n                        customToolbarSelect: (selectedRows, displayData, setSelectedRows) => (\r\n                            <CustomToolbarSelectTrash selectedRows={selectedRows} displayData={displayData} setSelectedRows={setSelectedRows} onRowsRecovery={recoveryRowsWell} onRowsDelete={rowsDeleteWell}/>\r\n                        ),\r\n                        selectableRows: (role === \"user\" || role === \"superuser\" ? 'single' : 'none'),\r\n                        }}\r\n                    />}\r\n                </Grid>}\r\n                {category === \"Стволы\" && <Grid item xs={12}>\r\n                    {wellboresData.length === 0 ? <NotFound/> :\r\n                    <MUIDataTable\r\n                        title={<Typography variant=\"h6\">\r\n                        Удаленные стволы\r\n                        {wellboresData.length === 0 && <CircularProgress size={24} style={{ marginLeft: 15, position: 'relative', top: 4 }} />}\r\n                    </Typography>}\r\n                        data={wellboresData.map(item => [item.num_wellbore, item.pie_well, item.diametr, item.well_num, item.time_before_del])}\r\n                        columns={[\"Номер ствола\", \"Участок ствола\", \"Диаметр\", \"Номер скважины\", \"Прошедшее время с момента удаления\"]}\r\n                        options={{\r\n                        print: false,\r\n                        filter: false,\r\n                        download: false,\r\n                        rowsPerPage: 50,\r\n                        rowsPerPageOptions: [50,100,500],\r\n                        viewColumns: \"false\",\r\n                        textLabels: textLabels,\r\n                        rowsSelected: selectedRows,\r\n                        onRowSelectionChange: (rowsSelectedData, allRows, rowsSelected) => {\r\n                            setSelectedRows(rowsSelected)\r\n                        },\r\n                        customToolbarSelect: (selectedRows, displayData, setSelectedRows) => (\r\n                            <CustomToolbarSelectTrash selectedRows={selectedRows} displayData={displayData} setSelectedRows={setSelectedRows} onRowsRecovery={recoveryRowsWellbore} onRowsDelete={rowsDeleteWellbore}/>\r\n                        ),\r\n                        selectableRows: (role === \"user\" || role === \"superuser\" ? 'single' : 'none'),\r\n                        }}\r\n                    />}\r\n                </Grid>}\r\n                {category === \"Пласты\" && <Grid item xs={12}>\r\n                    {stratasData.length === 0 ? <NotFound/> :\r\n                    <MUIDataTable\r\n                        title={<Typography variant=\"h6\">\r\n                        Удаленные пласты\r\n                        {stratasData.length === 0 && <CircularProgress size={24} style={{ marginLeft: 15, position: 'relative', top: 4 }} />}\r\n                    </Typography>}\r\n                        data={stratasData.map(item => [item.name, item.field_name, item.time_before_del])}\r\n                        columns={columnsStrata}\r\n                        options={{\r\n                        print: false,\r\n                        filter: false,\r\n                        download: false,\r\n                        rowsPerPage: 50,\r\n                        rowsPerPageOptions: [50,100,500],\r\n                        viewColumns: \"false\",\r\n                        textLabels: textLabels,\r\n                        rowsSelected: selectedRows,\r\n                        onRowSelectionChange: (rowsSelectedData, allRows, rowsSelected) => {\r\n                            setSelectedRows(rowsSelected)\r\n                        },\r\n                        customToolbarSelect: (selectedRows, displayData, setSelectedRows) => (\r\n                            <CustomToolbarSelectTrash selectedRows={selectedRows} displayData={displayData} setSelectedRows={setSelectedRows} onRowsRecovery={recoveryRowsStrata} onRowsDelete={rowsDeleteStrata}/>\r\n                        ),\r\n                        selectableRows: (role === \"user\" || role === \"superuser\" ? 'single' : 'none'),\r\n                        }}\r\n                    />}\r\n                </Grid>}\r\n                {category === \"Сервисные компании\" && <Grid item xs={12}>\r\n                    {servicesData.length === 0 ? <NotFound/> :\r\n                    <MUIDataTable\r\n                        title={<Typography variant=\"h6\">\r\n                        Удаленные сервисные компании\r\n                        {servicesData.length === 0 && <CircularProgress size={24} style={{ marginLeft: 15, position: 'relative', top: 4 }} />}\r\n                    </Typography>}\r\n                        data={servicesData.map(item => [item.name, item.time_before_del])}\r\n                        columns={[\"Название\", \"Прошедшее время с момента удаления\"]}\r\n                        options={{\r\n                        print: false,\r\n                        filter: false,\r\n                        download: false,\r\n                        rowsPerPage: 50,\r\n                        rowsPerPageOptions: [50,100,500],\r\n                        viewColumns: \"false\",\r\n                        textLabels: textLabels,\r\n                        rowsSelected: selectedRows,\r\n                        onRowSelectionChange: (rowsSelectedData, allRows, rowsSelected) => {\r\n                            setSelectedRows(rowsSelected)\r\n                        },\r\n                        customToolbarSelect: (selectedRows, displayData, setSelectedRows) => (\r\n                            <CustomToolbarSelectTrash selectedRows={selectedRows} displayData={displayData} setSelectedRows={setSelectedRows} onRowsRecovery={recoveryRowsService} onRowsDelete={rowsDeleteService}/>\r\n                        ),\r\n                        selectableRows: (role === \"user\" || role === \"superuser\" ? 'single' : 'none'),\r\n                        }}\r\n                    />}\r\n                </Grid>}\r\n                {category === \"Сервисные методы\" && <Grid item xs={12}>\r\n                    {serviceMethodsData.length === 0 ? <NotFound/> :\r\n                    <MUIDataTable\r\n                        title={<Typography variant=\"h6\">\r\n                        Удаленные сервисные методы\r\n                        {serviceMethodsData.length === 0 && <CircularProgress size={24} style={{ marginLeft: 15, position: 'relative', top: 4 }} />}\r\n                    </Typography>}\r\n                        data={serviceMethodsData.map(item => [item.tool_type, item.method, item.service_name, item.time_before_del])}\r\n                        columns={[\"Название инструмента\", \"Метод\", \"Сервисная компания\", \"Прошедшее время с момента удаления\"]}\r\n                        options={{\r\n                        print: false,\r\n                        filter: false,\r\n                        download: false,\r\n                        rowsPerPage: 50,\r\n                        rowsPerPageOptions: [50,100,500],\r\n                        viewColumns: \"false\",\r\n                        textLabels: textLabels,\r\n                        rowsSelected: selectedRows,\r\n                        onRowSelectionChange: (rowsSelectedData, allRows, rowsSelected) => {\r\n                            setSelectedRows(rowsSelected)\r\n                        },\r\n                        customToolbarSelect: (selectedRows, displayData, setSelectedRows) => (\r\n                            <CustomToolbarSelectTrash selectedRows={selectedRows} displayData={displayData} setSelectedRows={setSelectedRows} onRowsRecovery={recoveryRowsServiceMethod} onRowsDelete={rowsDeleteServiceMethod}/>\r\n                        ),\r\n                        selectableRows: (role === \"user\" || role === \"superuser\" ? 'single' : 'none'),\r\n                        }}\r\n                    />}\r\n                </Grid>}\r\n                {category === \"Отчеты качества ГИС\" && <Grid item xs={12}>\r\n                    {qualityControlsData.length === 0 ? <NotFound/> :\r\n                    <MUIDataTable\r\n                        title={<Typography variant=\"h6\">\r\n                        Удаленные отчеты качества ГИС\r\n                        {qualityControlsData.length === 0 && <CircularProgress size={24} style={{ marginLeft: 15, position: 'relative', top: 4 }} />}\r\n                    </Typography>}\r\n                        data={qualityControlsData.map(item => [item.quality_control_id, item.customer, item.field, item.well, item.data_type === \"Реального времени\" ? \"Оперативный\" : \"Финальный\", item.section_interval_start + \" - \" + item.section_interval_end, item.value, item.time_before_del])}\r\n                        columns={[\"Номер отчета\", \"Дочернее общество\", \"Месторождение\", \"Скважина\", \"Тип отчёта\", \"Интервал секции (м)\", \"Оценка (%)\", \"Прошедшее время с момента удаления\"]}\r\n                        options={{\r\n                        print: false,\r\n                        filter: false,\r\n                        download: false,\r\n                        rowsPerPage: 50,\r\n                        rowsPerPageOptions: [50,100,500],\r\n                        viewColumns: \"false\",\r\n                        textLabels: textLabels,\r\n                        rowsSelected: selectedRows,\r\n                        onRowSelectionChange: (rowsSelectedData, allRows, rowsSelected) => {\r\n                            setSelectedRows(rowsSelected)\r\n                        },\r\n                        customToolbarSelect: (selectedRows, displayData, setSelectedRows) => (\r\n                            <CustomToolbarSelectTrash selectedRows={selectedRows} displayData={displayData} setSelectedRows={setSelectedRows} onRowsRecovery={recoveryRowsQualityControl} onRowsDelete={rowsDeleteQualityControl}/>\r\n                        ),\r\n                        selectableRows: (role === \"user\" || role === \"superuser\" ? 'single' : 'none'),\r\n                        }}\r\n                    />}\r\n                </Grid>}\r\n            </Grid>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Trash;\r\n","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Layout\\styles.js",[],"C:\\Users\\s_martyanova\\CheckList\\Front\\src\\pages\\strata\\Strata.js",["471","472"],"import React, {useEffect, useState} from 'react';\r\n\r\nimport {\r\n    Grid,\r\n    Button,\r\n    CircularProgress,\r\n    Typography,\r\n    Divider,\r\n    Card,\r\n    CardContent,\r\n    TextField,\r\n    FormControl,\r\n    InputLabel, Select, MenuItem\r\n  } from \"@material-ui/core\";\r\nimport MUIDataTable from \"mui-datatables\";\r\n\r\nimport {Form, Row, Col} from \"react-bootstrap\";\r\n\r\nimport { useHistory } from \"react-router\";\r\n\r\nimport CustomToolbarSelect from '../../components/Toolbar/CustomToolbarSelect';\r\nimport AddStrataDialog from '../../components/Dialogs/AddStrataDialog';\r\nimport EditStrataDialog from '../../components/Dialogs/EditStrataDialog';\r\nimport Loading from \"../../components/Loading/Loading\";\r\nimport PageTitle from \"../../components/PageTitle\";\r\nimport SuccessToast from \"../../components/Toasts/SuccessToast\";\r\nimport ErrorToast from \"../../components/Toasts/ErrorToast\";\r\n// http://127.0.0.1:8000\r\nfunction Strata(props) {\r\n    const history = useHistory();\r\n    const role = localStorage.getItem('role');\r\n    const constant = false;\r\n    const [isSuccessToast, setIsSuccessToast] = useState(false)\r\n    const [field, setField] = useState({});\r\n    const [method, setMethod] = useState(\"\");\r\n    const [collectors, setCollectors] = useState(null);\r\n    const [saturation, setSaturation] = useState(null);\r\n    const [kp, setKp] = useState(null);\r\n    const [kng, setKng] = useState(null);\r\n    const [lithotype, setLithotype] = useState(null);\r\n    const [statusError, setStatusError] = useState(0)\r\n    const [strata, setStrata] = useState([]);\r\n    const [strataObj, setStrataObj] = useState({\r\n        id: null,\r\n        name: \"\",\r\n        strata_file: \"\",\r\n    });\r\n    const [selectedRows, setSelectedRows] = useState([]);\r\n\r\n    const [allMethodsData, setAllMethodsData] = useState([]);\r\n    const [petroData, setPetroData] = useState({});\r\n    const [isLoading, setIsLoading] = useState(false)\r\n    const [load, setLoad] = useState(false);\r\n    const [isErrorToast, setIsErrorToast] = useState(false)\r\n    const [showModalStrata, setShowModalStrata] = useState(false);\r\n    const [showModalEditStrata, setShowModalEditStrata] = useState(false);\r\n    const [idPetro, setIdPetro] = useState(null)\r\n    const columns = [\r\n        {\r\n            name: \"Название пласта\"\r\n        },\r\n        {\r\n            name: \"Прикрепленный файл\",\r\n            options: {\r\n                customBodyRender: (value, tableMeta, updateValue) => {\r\n                    return (\r\n                        strata[tableMeta.rowIndex].strata_file_name ? <Button size=\"medium\" onClick={() => getStrataFile(strata[tableMeta.rowIndex].id, strata[tableMeta.rowIndex].name)} style={{outline: \"none\", width: \"25%\", backgroundColor:\"#34547A\", color:\"#fff\"}}>Открыть файл</Button>\r\n                        : <Button size=\"medium\" onClick={() => {setStrataObj(strata[tableMeta.rowIndex]); handleModalEditStrata();}} style={{outline: \"none\", visibility: (role === \"user\" || role === \"superuser\" ? 'visible' : 'hidden'), backgroundColor:\"#F6D106\", color:\"#000\", width: \"25%\"}}>Добавить файл</Button>\r\n                        );\r\n                  }\r\n            }\r\n        }\r\n    ]\r\n\r\n    const getStrataFile = (strata_id, name) =>{\r\n        fetch(process.env.REACT_APP_API+'strata/file/id/'+strata_id,{\r\n            method: 'GET',\r\n            headers:{\r\n                'Accept':'application/json',\r\n                'Content-Type':'application/json',\r\n                'Authorization': \"Token \" + localStorage.getItem('id_token')\r\n            },\r\n        }).then(response=>response.blob())\r\n        .then(data=>{\r\n            const exselURL = window.URL.createObjectURL(data);\r\n            const tempLink = document.createElement('a');\r\n            tempLink.href = exselURL;\r\n            tempLink.download=String(`Пласт ${name}`);\r\n            tempLink.click();\r\n        })\r\n    }\r\n    const putPetroValues = (method_id) => {\r\n        fetch(process.env.REACT_APP_API+'petrophysics/id/'+ idPetro + '?format=json',{\r\n            method: 'PUT',\r\n            headers:{\r\n                'Accept':'application/json',\r\n                'Content-Type':'application/json',\r\n                'Authorization': \"Token \" + localStorage.getItem('id_token')\r\n            },\r\n            body: JSON.stringify({\r\n                \"separation_of_reservoirs\": collectors === \"\" ? null : collectors,\r\n                \"determination_nature_saturation\": saturation === \"\" ? null : saturation,\r\n                \"determination_Kp\": kp === \"\" ? null : kp,\r\n                \"determination_Kng\": kng === \"\" ? null : kng,\r\n                \"determination_lithotype\": lithotype === \"\" ? null : lithotype,\r\n            }) \r\n        }).then((response) => {\r\n            if(!response.ok) {setStatusError(response.status); setIsErrorToast(true)}\r\n            else setIsSuccessToast(true);\r\n        }).catch((err)=>{console.log(err)})\r\n    }\r\n\r\n    const getFieldInformation = (props) => {\r\n        setLoad(true);\r\n        fetch(process.env.REACT_APP_API+'fields/id/'+ props.match.params.id +'?format=json', { headers : { \r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n            'Authorization': \"Token \" + localStorage.getItem('id_token')\r\n           }\r\n        }) \r\n        .then(response=>response.json())\r\n        .then(data=>{\r\n            setField(data);\r\n        })\r\n        setLoad(false);\r\n    }\r\n\r\n    const getStrataInformation = (props) => {\r\n        fetch(process.env.REACT_APP_API+'strata/'+ props.match.params.id +'?format=json', { headers : { \r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n            'Authorization': \"Token \" + localStorage.getItem('id_token')\r\n           }\r\n        }) \r\n        .then(response=>response.json())\r\n        .then(data=>{\r\n            setStrata(data);\r\n        })\r\n    }\r\n\r\n    const getPetroInformation = (props, e) => {\r\n        setIsLoading(true)\r\n        fetch(process.env.REACT_APP_API+'petrophysics/'+ props.match.params.id + '/' + allMethodsData.find(item => item.name === e.target.value).id +'?format=json', { headers : { \r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n            'Authorization': \"Token \" + localStorage.getItem('id_token')\r\n           }\r\n        }) \r\n        .then(response=>response.json())\r\n        .then(data=>{\r\n            setPetroData(data);\r\n            setIdPetro(data.id)\r\n            if (data.length !== 0) {\r\n                setCollectors(data.separation_of_reservoirs)\r\n                setSaturation(data.determination_nature_saturation)\r\n                setKp(data.determination_Kp)\r\n                setKng(data.determination_Kng)\r\n                setLithotype(data.determination_lithotype)\r\n            }\r\n            setIsLoading(false)  \r\n        })\r\n        .finally(()=>{})\r\n    }\r\n\r\n    const changeName = () => {\r\n        setStrataObj(strata[selectedRows[0]]);\r\n        handleModalEditStrata();\r\n    }\r\n\r\n    const deleteStrata = (strata_id) => {\r\n        fetch(process.env.REACT_APP_API+'strata/id/'+ strata_id + '?format=json', { method: 'DELETE', headers: {'Authorization': \"Token \" + localStorage.getItem('id_token')} })\r\n    }\r\n\r\n    const rowsDelete = () => {\r\n        if (window.confirm('Вы точно хотите удалить пласт '+ strata[selectedRows[0]].name +'?')){\r\n          deleteStrata(strata[selectedRows[0]].id);\r\n          strata.splice(selectedRows[0], 1);\r\n          setSelectedRows([]);\r\n        }\r\n    }\r\n\r\n    const getAllMethods = () => {\r\n        fetch(process.env.REACT_APP_API+'methods/?format=json', { headers : { \r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n            'Authorization': \"Token \" + localStorage.getItem('id_token')\r\n           }\r\n        }) \r\n        .then(response=>response.json())\r\n        .then(data=>{\r\n            setAllMethodsData(data);\r\n        })\r\n    }\r\n\r\n    const updateMethod = (e) => {\r\n        setMethod(e.target.value)\r\n        getPetroInformation(props, e)\r\n    }\r\n\r\n    useEffect(() => {\r\n        getFieldInformation(props);\r\n        getStrataInformation(props);\r\n        getAllMethods();\r\n    }, [constant])\r\n\r\n    const handleModalStrata = () => {\r\n        setShowModalStrata(!showModalStrata);\r\n    }\r\n    const handleModalEditStrata = () => {\r\n        setShowModalEditStrata(!showModalEditStrata);\r\n    }\r\n    const handleSuccessToast = () => {\r\n        setIsSuccessToast(!isSuccessToast);\r\n    }\r\n    const handleErrorToast = () => {\r\n        setIsErrorToast(!isErrorToast);\r\n    }\r\n    useEffect(()=>{\r\n        setPetroData({\r\n            id:idPetro,\r\n            collectors,\r\n            saturation, \r\n            kp,\r\n            kng,\r\n            lithotype\r\n        })\r\n    },[collectors, saturation, kp, kng, lithotype])\r\n    return (\r\n        <>\r\n            <SuccessToast active={isSuccessToast} setActive={handleSuccessToast}/>\r\n            <ErrorToast active={isErrorToast} setActive={handleErrorToast} statusError={statusError}/>\r\n            <AddStrataDialog active={showModalStrata} setActive={handleModalStrata} field_id={props.match.params.id} strataAll={strata} setStrataAll={setStrata}/>\r\n            <EditStrataDialog active={showModalEditStrata} setActive={handleModalEditStrata} strata_id={strataObj.id} strata_name={strataObj.name} strata_file={strataObj.strata_file} strata_file_name={strataObj.strata_file_name} strataList={strata} setStrataList={setStrata}/>\r\n            <Grid item xs={12}>\r\n                <PageTitle title=\"Настройка петрофизической задачи\"/>\r\n                <Form.Group as={Row} style={{paddingBottom:\"1rem\"}}>\r\n                        <Col xs=\"3\">\r\n                            <FormControl fullWidth variant=\"standard\">\r\n                                <InputLabel id=\"method\">Метод</InputLabel>\r\n                                    <Select labelId=\"method\" name=\"method\" label=\"Метод\" size=\"small\" value={method} onChange={e => updateMethod(e)}>\r\n                                        <MenuItem hidden disabled></MenuItem>\r\n                                        {allMethodsData.map(item => <MenuItem key={item.name} value={item.name} style={{fontSize:\"20px\"}}>{item.name}</MenuItem>)}\r\n                                    </Select>\r\n                            </FormControl>\r\n                        </Col>\r\n                        <Col xs=\"9\"></Col>\r\n                </Form.Group>\r\n                {isLoading ? (<Loading />) :\r\n                <Card sx={{ minWidth: 275 }}>\r\n                    <CardContent>\r\n                    <Form.Group as={Row} xs=\"10\">\r\n                        <Col xs=\"2\">\r\n                        <TextField type=\"number\" InputLabelProps={{ shrink: true }} fullWidth id=\"collectors\" label=\"Выделение коллекторов\" variant=\"standard\" value={collectors === null ? \"\" : collectors} onChange={e => setCollectors(e.target.value)}/>\r\n                        </Col>\r\n                        <Col xs=\"2\">\r\n                        <TextField type=\"number\" InputLabelProps={{ shrink: true }} fullWidth id=\"saturation\" label=\"Определение характера насыщения\" variant=\"standard\" value={saturation === null ? \"\" : saturation} onChange={e => setSaturation(e.target.value)}/>\r\n                        </Col>\r\n                        <Col xs=\"2\">\r\n                        <TextField type=\"number\" InputLabelProps={{ shrink: true }} fullWidth id=\"kp\" label=\"Определение Кп\" variant=\"standard\" value={kp === null ? \"\" : kp} onChange={e => setKp(e.target.value)}/>\r\n                        </Col>\r\n                        <Col xs=\"2\">\r\n                        <TextField type=\"number\" InputLabelProps={{ shrink: true }} fullWidth id=\"kng\" label=\"Определение Кнг\" variant=\"standard\" value={kng === null ? \"\" : kng} onChange={e => setKng(e.target.value)}/>\r\n                        </Col>\r\n                        <Col xs=\"2\">\r\n                        <TextField type=\"number\" InputLabelProps={{ shrink: true }} fullWidth id=\"lithotype\" label=\"Литологическое расчленение\" variant=\"standard\" value={lithotype === null ? \"\" : lithotype} onChange={e => setLithotype(e.target.value)}/>\r\n                        </Col>\r\n                        <Col xs=\"2\" style={{textAlign:\"center\"}}>\r\n                            <Button onClick={() => petroData.length !== 0 && putPetroValues(petroData.id)} style={{outline: \"none\", display: \"inline-block\", marginTop: \"0.75rem\", height:\"100%\", width:\"85%\", backgroundColor:\"#34547A\", color:\"#fff\", visibility: (role === \"user\" || role === \"superuser\" ? 'visible' : 'hidden')}}>Сохранить</Button>\r\n                        </Col>\r\n                    </Form.Group>\r\n                    </CardContent>\r\n                </Card>\r\n                }\r\n                <Divider/>\r\n            </Grid>\r\n            <PageTitle title={field.name !== undefined ? \"Пласты месторождения \" + field.name : \"Пласты месторождения \"} button={<Button\r\n            variant=\"contained\"\r\n            size=\"medium\"\r\n            color=\"secondary\"\r\n            style={{outline: \"none\", backgroundColor:\"#34547A\", visibility: (role === \"user\" || role === \"superuser\" ? 'visible' : 'hidden')}}\r\n            onClick={handleModalStrata}\r\n            >\r\n                Добавить пласт\r\n            </Button>} />\r\n            <Grid container spacing={4}>\r\n                <Grid item xs={12}>\r\n                    <MUIDataTable\r\n                        title={<Typography variant=\"h6\">\r\n                        Список пластов в базе\r\n                        {load && <CircularProgress size={24} style={{ marginLeft: 15, position: 'relative', top: 4 }} />}\r\n                    </Typography>}\r\n                        data={strata.map(item => [item.name])}\r\n                        columns={columns}\r\n                        options={{\r\n                        print: false,\r\n                        filter: false,\r\n                        download: false,\r\n                        rowsPerPage: 100,\r\n                        rowsPerPageOptions: [100,500,1000],\r\n                        viewColumns: \"false\",\r\n                        rowsSelected: selectedRows,\r\n                        textLabels: {\r\n                            body: {\r\n                              noMatch: \"Записей не найдено.\",\r\n                              toolTip: \"Сортировать\"\r\n                            },\r\n                            filter: {\r\n                              all: \"Все\",\r\n                              title: \"Фильтры\",\r\n                              reset: \"СБРОСИТЬ\",\r\n                            },\r\n                            toolbar: {\r\n                              search: \"Поиск\",\r\n                              viewColumns: \"Показать столбцы\",\r\n                                filterTable: \"Фильтр таблицы\"\r\n                            },\r\n                            viewColumns: {\r\n                                title: \"Показать столбцы\"\r\n                              },\r\n                            selectedRows: {\r\n                              text: \"строка выбрана\"\r\n                            },\r\n                            pagination: {\r\n                                next: \"Следующая страница\",\r\n                                previous: \"Предыдущая страница\",\r\n                                rowsPerPage: \"Строк на странице:\",\r\n                                displayRows: \"из\",\r\n                              },\r\n                          },\r\n                        onRowSelectionChange: (rowsSelectedData, allRows, rowsSelected) => {\r\n                            setSelectedRows(rowsSelected);\r\n                        },\r\n                        customToolbarSelect: (selectedRows, displayData, setSelectedRows) => (\r\n                            <CustomToolbarSelect selectedRows={selectedRows} displayData={displayData} setSelectedRows={setSelectedRows} onChangeName={changeName} onRowsDelete={rowsDelete}/>\r\n                        ),\r\n                        selectableRows: (role === \"user\" || role === \"superuser\" ? 'single' : 'none'),\r\n                        }}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                <Button color=\"secondary\" variant=\"contained\" onClick={() => {history.push({pathname: \"/app/customers\"})}} style={{outline: \"none\", backgroundColor:\"#34547A\"}}>Вернуться назад</Button>\r\n                </Grid>\r\n            </Grid>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Strata\r\n","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\pages\\admin\\Admin.js",[],"C:\\Users\\s_martyanova\\CheckList\\Front\\src\\pages\\help\\Help.js",["473","474","475","476","477","478","479","480","481","482","483","484","485","486","487","488","489","490","491","492","493","494","495","496","497","498","499","500","501","502","503","504","505","506","507","508","509","510","511","512","513","514"],"import React, {useState} from 'react';\r\n\r\nimport {\r\n    Grid\r\n} from \"@material-ui/core\";\r\nimport {\r\n    Delete as DeleteIcon,\r\n    Person as PersonIcon,\r\n    Settings as SettingsIcon,\r\n    Description as DescriptionIcon,\r\n    NoteAdd as NoteAddIcon,\r\n    Storage as StorageIcon,\r\n    TableChart as TableChartIcon,\r\n    Toll as TollIcon,\r\n} from \"@material-ui/icons\";\r\n\r\nimport img1 from \"./images/1.png\"\r\nimport img2 from \"./images/2.png\"\r\nimport img3 from \"./images/3.png\"\r\nimport img4 from \"./images/4.png\"\r\nimport img5 from \"./images/5.png\"\r\nimport img6 from \"./images/6.png\"\r\nimport img7a from \"./images/7a.png\"\r\nimport img7b from \"./images/7b.png\"\r\nimport img7c from \"./images/7c.png\"\r\nimport img8 from \"./images/8.png\"\r\nimport img9 from \"./images/9.png\"\r\nimport img10 from \"./images/10.png\"\r\nimport img11 from \"./images/11.png\"\r\nimport img12 from \"./images/12.png\"\r\nimport img13 from \"./images/13.png\"\r\nimport img14 from \"./images/14.png\"\r\nimport img15 from \"./images/15.png\"\r\nimport img16 from \"./images/16.png\"\r\nimport img17 from \"./images/17.png\"\r\nimport img18 from \"./images/18.png\"\r\nimport img19 from \"./images/19.png\"\r\nimport img20 from \"./images/20.png\"\r\nimport img21 from \"./images/21.png\"\r\nimport img22 from \"./images/22.png\"\r\nimport img23 from \"./images/23.png\"\r\nimport img24 from \"./images/24.png\"\r\nimport img25 from \"./images/25.png\"\r\nimport img26 from \"./images/26.png\"\r\nimport img27 from \"./images/27.png\"\r\nimport img28 from \"./images/28.png\"\r\nimport img29 from \"./images/29.png\"\r\nimport img30 from \"./images/30.png\"\r\nimport img31 from \"./images/31.png\"\r\nimport img32 from \"./images/32.png\"\r\nimport img33 from \"./images/33.png\"\r\nimport img34 from \"./images/34.png\"\r\nimport img35 from \"./images/35.png\"\r\nimport img36 from \"./images/36.png\"\r\nimport img37 from \"./images/37.png\"\r\nimport img38a from \"./images/38a.png\"\r\nimport img38b from \"./images/38b.png\"\r\nimport img38c from \"./images/38c.png\"\r\n\r\nimport PageTitle from \"../../components/PageTitle\";\r\nimport CustomAccordion from './CustomAccordion';\r\nimport {fixImg, marginSpan, helpContainer} from \"./styles\"\r\n\r\nconst data = [\r\n    {\r\n        panelNum: \"panel1\",\r\n        icon: <PersonIcon/>,\r\n        name: \"Общества группы\",\r\n        text: \r\n        <div style={helpContainer}>\r\n            <span style={marginSpan}>Данный раздел содержит список обществ группы.</span>\r\n            <img src={img1} style={fixImg}/>\r\n            <span style={marginSpan}>A также списки относящихся к ним месторождений.</span>\r\n            <img src={img2} style={fixImg}/>\r\n            <span style={marginSpan}>Можно самостоятельно добавить новое общество группы.</span> \r\n            <img src={img3} style={fixImg}/>\r\n            <span style={marginSpan}>Для каждого общества группы доступны функции <b>добавления</b> нового месторождения, <b>изменения</b> названия и <b>удаления</b>.</span>\r\n            <img src={img4} style={fixImg}/>\r\n            <span style={marginSpan}>Для каждого месторождения доступны функции <b>изменения</b> названия и <b>удаления</b>.</span>\r\n            <img src={img5} style={fixImg}/>\r\n            <span style={marginSpan}><b>При нажатии</b> на любое месторождение открываются подразделы «Настройка петрофизической задачи» и «Пласты месторождения …»</span>\r\n            <img src={img6} style={fixImg}/>\r\n            <span style={marginSpan}>В подразделе «Настройка петрофизической задачи» можно посмотреть или, если необходимо, изменить вклад любого метода ГИС в решение определённой петрофизической задачи для данного месторождения. Для этого нужно из выпадающего списка во вкладке «Метод» выбрать метод ГИС, изменить значение вклада и <b>нажать кнопку «Сохранить»</b>.</span>\r\n            <img src={img7a} style={fixImg}/>\r\n            <img src={img7b} style={fixImg}/>\r\n            <img src={img7c} style={fixImg}/>\r\n            <span style={marginSpan}>В подразделе «Пласты месторождения …» содержится список пластов данного месторождения.</span>\r\n            <img src={img8} style={fixImg}/>\r\n            <span style={marginSpan}>Можно самостоятельно добавить новый пласт.</span>\r\n            <img src={img9} style={fixImg}/>\r\n            <span style={marginSpan}>Для каждого пласта доступны функции <b>изменения</b> названия и <b>удаления</b>.</span>\r\n            <img src={img10} style={fixImg}/>\r\n            <span style={marginSpan}>В прикреплённых файлах содержатся методические рекомендации по определению ФЕС в скважинах, вышедших из бурения по данному месторождению. Можно самостоятельного добавить новый файл.</span>\r\n            <img src={img11} style={fixImg}/>\r\n            <div style={{marginBottom: \"2rem\"}}></div>\r\n        </div>\r\n    },\r\n    {\r\n        panelNum: \"panel2\",\r\n        icon: <StorageIcon/>,\r\n        name: \"Создать скважину\",\r\n        text: \r\n        <div style={helpContainer}>\r\n            <span style={marginSpan}>\r\n                Данный раздел предназначен для создания скважин.<br/>\r\n                Для этого необходимо выбрать <b>общество группы</b> и <b>месторождение</b>, на котором ведется бурение этой скважины \r\n                (база обществ группы и месторождений находится в разделе <a href=\"/app/customers\">«Общества группы»</a>), и <b>последовательно</b> внести \r\n                данные о номере куста, номере скважины и её типе (вертикальная, горизонтальная, многозабойная, многоствольная или наклонно-направленная) \r\n                и об участке ствола (боковой, пилотный, транспортный, горизонтальный), его номере и диаметре.\r\n            </span>\r\n            <img src={img12} style={fixImg}/>\r\n            <span style={marginSpan}>\r\n                Все созданные скважины хранятся в разделе <a href=\"/app/trackedwells\">«База данных скважин»</a>.<br/>\r\n                Для свойств всех кустов, скважин и стволов доступны функции <b>изменения</b> названия и <b>удаления</b>.\r\n            </span>\r\n            <img src={img13} style={fixImg}/>\r\n            <div style={{marginBottom: \"2rem\"}}></div>\r\n        </div>\r\n    },\r\n    {\r\n        panelNum: \"panel3\",\r\n        icon: <SettingsIcon/>,\r\n        name: \"Сервисные компании\",\r\n        text: \r\n        <div style={helpContainer}>\r\n            <span style={marginSpan}>Данный раздел содержит список сервисных компаний.</span>\r\n            <img src={img14} style={fixImg}/>\r\n            <span style={marginSpan}>Можно самостоятельно <b>добавить</b> новую сервисную компанию.</span>\r\n            <img src={img15} style={fixImg}/>\r\n            <span style={marginSpan}>Для каждой сервисной компании доступны функции <b>изменения</b> названия и <b>удаления</b>.</span>\r\n            <img src={img16} style={fixImg}/>\r\n            <span style={marginSpan}>При нажатии на любую сервисную компанию появляется список методов данной сервисной компании.</span>\r\n            <img src={img17} style={fixImg}/>\r\n            <span style={marginSpan}>При выборе любого метода сервисной компании появляется информация о приборе.</span>\r\n            <img src={img18} style={fixImg}/>\r\n            <span style={marginSpan}>Можно самостоятельно <b>добавить</b> новый метод и прибор сервисной компании.</span>\r\n            <img src={img19} style={fixImg}/>\r\n            <span style={marginSpan}>Для каждого прибора доступна функция <b>удаления</b>; с удалением прибора удаляется и метод.</span>\r\n            <img src={img20} style={fixImg}/>\r\n            <div style={{marginBottom: \"2rem\"}}></div>\r\n        </div>\r\n    },\r\n    {\r\n        panelNum: \"panel4\",\r\n        icon: <TableChartIcon/>,\r\n        name: \"База мнемоник\",\r\n        text: \r\n        <div style={helpContainer}>\r\n            <span style={marginSpan}>\r\n                Данный раздел содержит информацию о методах ГИС (регистрируемый параметр, сокращение на латинице, тип кривой, единица измерения, описание), сгруппированных в классы.\r\n            </span>\r\n            <img src={img21} style={fixImg}/>\r\n            <span style={marginSpan}>Можно самостоятельно <b>добавить</b> новый класс методов ГИС.</span>\r\n            <img src={img22} style={fixImg}/>\r\n            <span style={marginSpan}>Для каждого класса методов ГИС доступны функции <b>изменения</b> названия и <b>удаления</b>.</span>\r\n            <img src={img23} style={fixImg}/>\r\n            <span style={marginSpan}>В любой класс методов ГИС можно самостоятельно <b>добавить</b> новый метод.</span>\r\n            <img src={img24} style={fixImg}/>\r\n            <span style={marginSpan}>Для каждого метода ГИС доступны функции <b>изменения</b> названия и <b>удаления</b>.</span>\r\n            <img src={img25} style={fixImg}/>\r\n            <span style={marginSpan}>В любой метод ГИС можно самостоятельно <b>добавить</b> новый регистрируемый параметр.</span>\r\n            <img src={img26} style={fixImg}/>\r\n            <span style={marginSpan}>Для каждого регистрируемого параметра метода ГИС доступны функции <b>изменения</b> названия и <b>удаления</b>.</span>\r\n            <img src={img27} style={fixImg}/>\r\n            <div style={{marginBottom: \"2rem\"}}></div>\r\n        </div>\r\n    },\r\n    {\r\n        panelNum: \"panel5\",\r\n        icon: <NoteAddIcon/>,\r\n        name: \"Создать отчет\",\r\n        text: \r\n        <div style={helpContainer}>\r\n            <span style={marginSpan}>\r\n                Данный раздел предназначен для создания отчётов. Для этого необходимо <b>последовательно</b> заполнить <b style={{color: \"red\"}}>ВЕСЬ верхний блок</b> в листе оценки ГИС.\r\n            </span>\r\n            <img src={img28} style={fixImg}/>\r\n            <span style={marginSpan}>\r\n                Нижний блок можно заполнить сразу в этом разделе либо позже в разделе <a href=\"/app/reports\">«Отчёты по контролю качества»</a>.\r\n            </span>\r\n        </div>\r\n    },\r\n    {\r\n        panelNum: \"panel6\",\r\n        icon: <DescriptionIcon/>,\r\n        name: \"Отчеты по контролю качества\",\r\n        text: \r\n        <div style={helpContainer}>\r\n            <span style={marginSpan}>Данный раздел содержит список созданных отчётов.</span>\r\n            <img src={img29} style={fixImg}/>\r\n            <span style={marginSpan}>Можно <b>отредактировать</b> шаблон выгрузки Excel, скачав, изменив и загрузив его обратно.</span>\r\n            <img src={img30} style={fixImg}/>\r\n            <span style={marginSpan}>Можно самостоятельно <b>добавить</b> новый отчёт, и тогда откроется раздел <a href=\"/app/checklist\">«Создать отчёт»</a>.</span>\r\n            <img src={img31} style={fixImg}/>\r\n            <span style={marginSpan}>Для каждого отчёта доступна функция <b>удаления</b>.</span>\r\n            <img src={img32} style={fixImg}/>\r\n            <span style={marginSpan}>\r\n                При нажатии на любой отчёт открывается полная информация о нём. Здесь можно <b>заполнить нижний блок</b>, если это не было сделано ранее (при создании отчёта в разделе <a href=\"/app/checklist\">«Создать отчёт»</a>).\r\n            </span>\r\n            <img src={img33} style={fixImg}/>\r\n            <span style={marginSpan}>\r\n                Для того чтобы добавить новый интервал секции, можно просто <b>изменить значения интервала</b> и дату ГИС (если необходимо) и нажать кнопку <b>«Сохранить»</b>.\r\n            </span>\r\n            <img src={img34} style={fixImg}/>\r\n            <span style={marginSpan}>\r\n                После добавления нового интервала секции <b>автоматически</b> создастся новый отчёт.\r\n            </span> \r\n        </div>\r\n    },\r\n    {\r\n        panelNum: \"panel7\",\r\n        icon: <TollIcon/>,\r\n        name: \"База данных скважин\",\r\n        text:\r\n        <div style={helpContainer}>\r\n            <span style={marginSpan}>Данный раздел содержит список сопровождаемых скважин.</span>\r\n            <img src={img35} style={fixImg}/>\r\n            <span style={marginSpan}>Можно самостоятельно <b>добавить</b> новый ствол скважины, и тогда откроется раздел <a href=\"/app/database\">«Создать скважину»</a>.</span>\r\n            <img src={img36} style={fixImg}/>\r\n            <span style={marginSpan}>Для добавления информации о скважине <b>нужно нажать</b> на неё <b>и заполнить</b> все необходимые поля.</span>\r\n            <img src={img37} style={fixImg}/>\r\n            <div style={{marginBottom: \"2rem\"}}></div>\r\n        </div>\r\n    },\r\n    {\r\n        panelNum: \"panel8\",\r\n        icon: <DeleteIcon/>,\r\n        name: \"Корзина\",\r\n        text: \r\n        <div style={helpContainer}>\r\n            <span style={marginSpan}>\r\n                Данный раздел содержит все удалённые объекты.<br/>\r\n                Для того чтобы восстановить или удалить окончательно объект, <b>необходимо выбрать категорию объекта и сам объект</b>.\r\n            </span>\r\n            <img src={img38a} style={fixImg}/>\r\n            <img src={img38b} style={fixImg}/>\r\n            <img src={img38c} style={fixImg}/>\r\n            <span style={marginSpan}>Объект удалится автоматически, если с момента удаления прошло <b>более 28 суток</b>.</span>\r\n        </div>\r\n    },\r\n]\r\n\r\nfunction Help() {\r\n    const [expanded, setExpanded] = useState(false)\r\n\r\n  const handleChange = (panel) => (event, isExpanded) => {\r\n    setExpanded(isExpanded ? panel : false);\r\n  };\r\n    \r\n    return (\r\n        <>\r\n        <PageTitle title=\"Помощь\" />\r\n        <Grid container spacing={4}>\r\n            <Grid item xs={12}>\r\n            {data.map(item => \r\n                <CustomAccordion\r\n                    expanded={expanded}\r\n                    handleChange={handleChange}\r\n                    panelNum={item.panelNum}\r\n                    icon={item.icon}\r\n                    name={item.name}\r\n                    text={item.text}\r\n                />\r\n                )}\r\n            <h2 style={{display: \"block\", margin: \"1.5rem 0 0.5rem 0\"}}>\r\n                По всем вопросам, замечаниям и предложениям пишите на почту <a href=\"mailto:ilinkd@igirgi.rosneft.ru\">ilinkd@igirgi.rosneft.ru</a>\r\n            </h2>\r\n            </Grid>\r\n        </Grid>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Help;","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\pages\\checklist\\Checklist.js",["515","516","517","518","519","520","521","522","523","524","525","526","527","528","529","530","531","532","533","534"],"import React, {useEffect, useState, Suspense} from \"react\";\r\nimport {Form, Button, Badge, Row, Col} from 'react-bootstrap';\r\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\r\nimport {\r\n    Grid,\r\n    Input,\r\n    Table, TableHead, TableRow, TableCell, TableBody,\r\n    Card, CardContent,\r\n    IconButton,\r\n    ListSubheader,\r\n    Typography,\r\n    Select, MenuItem, FormControl,\r\n    InputLabel, Chip\r\n} from \"@material-ui/core\";\r\nimport { calc_finish_value, calc_tablet_digitalData, calc_value_rt, calc_value_memory, calc_value_memory_azimut, calc_value_rt_azimut, } from \"../calcScripts\";\r\n\r\nimport {\r\n    AddCircleOutline as PlusIcon,\r\n    NotInterested as NotInterestedIcon,\r\n    RemoveCircleOutline as RemoveCircleOutlineIcon,\r\n  } from \"@material-ui/icons\";\r\n\r\nimport { useHistory } from \"react-router\";\r\n\r\nimport { styleCell, styleInput, styleSelect, styleTextfield, styleBlueInput, styleBlueInputDisabled } from \"./styles\";\r\n\r\nimport PageTitle from \"../../components/PageTitle\";\r\nimport ValidityToast from \"../../components/Toasts/ValidityToast\";\r\nimport SuccessToast from \"../../components/Toasts/SuccessToast\";\r\n\r\nimport Blocked from \"../../components/Blocked/Blocked\";\r\n\r\nimport { prepare_for_post_inform_method, prepare_for_post_secondtable, check_validity } from \"./Scripts\";\r\nimport { make_indexes } from \"../reports/Scripts\";\r\n\r\nimport \"../../pages/styles.css\"\r\n\r\nconst FullnessDialog = React.lazy(() => import('../../components/Dialogs/FullnessDialog'));\r\n//const LasDialog = React.lazy(() => import('../../components/Dialogs/LasDialog'));\r\n//const WitsmlDialog = React.lazy(() => import('../../components/Dialogs/WitsmlDialog'));\r\nconst DigitalDialog = React.lazy(() => import('../../components/Dialogs/DigitalDialog'));\r\nconst DensityDialog = React.lazy(() => import('../../components/Dialogs/DensityDialog'));\r\nconst FillDataDialog = React.lazy(() => import('../../components/Dialogs/FillDataDialog'));\r\n\r\nvar tableRowIndex = 0;\r\n\r\nfunction Checklist() {\r\n    const role = localStorage.getItem('role');\r\n    const history = useHistory();\r\n    const [hover, setHover] = useState({\r\n        index: 0,\r\n        hover: false\r\n    });\r\n    const [showModalData, setShowModalData] = useState(false);\r\n    const [showModalFullness, setShowModalFullness] = useState(false);\r\n    //const [showModalLas, setShowModalLas] = useState(false);\r\n    //const [showModalWitsml, setShowModalWitsml] = useState(false);\r\n    const [showModalDigital, setShowModalDigital] = useState(false);\r\n    const [showModalDensity, setShowModalDensity] = useState(false);\r\n    const [showValidityToast, setShowValidityToast] = useState(false);\r\n    const [showSuccessToast, setShowSuccessToast] = useState(false);\r\n    const [rows, setRows] = useState([]);\r\n    const [method_value, setMethod_value] = useState(null);\r\n    const [secondrows, setSecondrows] = useState([]);\r\n    /*const [witsmlData, setWitsmlData] = useState({\r\n        fullness_data: \"\",\r\n        curvenames: \"\",\r\n        mnemodescription: \"\",\r\n        witsml_count: null,\r\n        status: true\r\n    });\r\n    const [lasData, setLasData] = useState({\r\n        cap: \"\",\r\n        parametres: \"\",\r\n        mnemodescription: \"\",\r\n        tabledata: \"\",\r\n        las_file_count: null,\r\n        status: true\r\n    });*/\r\n    const [digitalData, setDigitalData] = useState({\r\n        type:\"LAS\",\r\n        digital_count:0,\r\n        wellLas: \"\",\r\n        parameteresLas: \"\",\r\n        curveLas: \"\",\r\n        log_dataLas: \"\",\r\n        wellWitsml: \"\",\r\n        parameteresWitsml: \"\",\r\n        curveWitsml: \"\",\r\n        log_dataWitsml: \"\"\r\n    });\r\n    const [densityData, setDensityData] = useState({\r\n        density: null,\r\n    });\r\n    const [fullnessData, setFullnessData] = useState({\r\n        act: \"\",\r\n        titul_list: \"\",\r\n        well_construction: \"\",\r\n        wellbore_sizes: \"\",\r\n        chrono_data: \"\",\r\n        sol_data: \"\",\r\n        dash_comp: \"\",\r\n        summary_data: \"\",\r\n        inklino_data: \"\",\r\n        main_record: \"\",\r\n        parametr: \"\",\r\n        control_record: \"\",\r\n        lqc: \"\",\r\n        calibration: \"\",\r\n        full_inf_count: null,\r\n    });\r\n    const [quality_id, setQuality_id] = useState(null);\r\n    const [customer, setCustomer] = useState(\"\");\r\n    const [field, setField] = useState(\"\");\r\n    const [num_pad, setNum_pad] = useState(\"\");\r\n    const [num_well, setNum_well] = useState(\"\");\r\n    const [num_wellbore, setNum_wellbore] = useState(\"\");\r\n    const [well_type, setWell_type] = useState(\"\");\r\n    const [service, setService] = useState(\"\");\r\n    const [service_id, setService_id] = useState(null);\r\n    const [pie_well, setPie_well] = useState(\"\");\r\n    const [data_type, setData_type] = useState(\"\");\r\n    const [column_shoe, setColumn_shoe] = useState(null);\r\n    const [section_interval_start, setSection_interval_start] = useState(null);\r\n    const [section_interval_end, setSection_interval_end] = useState(null);\r\n    const [diametr, setDiametr] = useState(null);\r\n    const [value, setValue] = useState(null);\r\n    const [start_date, setStart_date] = useState(null);\r\n    const [end_date, setEnd_date] = useState(null);\r\n    const [note, setNote] = useState(\"\");\r\n    const [test, setTest] = useState(\"\");\r\n    const [rowIndex, setRowIndex] = useState(null);\r\n    const [koefDensity, setKoefDensity] = useState(1)\r\n    const [servicesData, setServicesData] = useState([]);\r\n    const [methodsData, setMethodsData] = useState([]);\r\n    const [devicesData, setDevicesData] = useState([]);\r\n    const [customersData, setCustomersData] = useState([]);\r\n    const [fieldsData, setFieldsData] = useState([]);\r\n    const [clustersData, setClustersData] = useState([]);\r\n    const [wellsData, setWellsData] = useState([]);\r\n    const [wellboresData, setWellboresData] = useState([]);\r\n    const [dataEscort, setDataEscort]=useState('')\r\n    const [arrNumWells, setArrNumWells] = useState([]);\r\n    const [complex_definition, setComplex_definition] = useState([])\r\n    const escort=[{name:'Круглосуточно'}, {name:'ТЗ'}]\r\n    const [dragActive, setDragActive] = useState(false)\r\n    const [interval_fact, setInterval_fact]=useState({\r\n        start_interval:'',\r\n        end_interval:''\r\n    })\r\n    const [fileLas, setFileLas]=useState(null)\r\n    const mainData = {\r\n        customer: customer, \r\n        field: field,\r\n        field_id: field !== \"\" ? fieldsData.find(item => item.name === field).id : null, \r\n        num_pad: num_pad, \r\n        num_well: num_well, \r\n        num_wellbore: num_wellbore, \r\n        pie_well: pie_well, \r\n        well_type: well_type,\r\n        service: service,\r\n        start_date: start_date,\r\n        end_date: end_date,\r\n        data_type: data_type,\r\n        section_interval_start: interval_fact.start_interval || section_interval_start,\r\n        section_interval_end: interval_fact.end_interval || section_interval_end,\r\n        diametr: diametr\r\n    }\r\n\r\n    const getServices = () => {\r\n        fetch(process.env.REACT_APP_API+'services/?format=json', { headers : { \r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n            'Authorization': \"Token \" + localStorage.getItem('id_token')\r\n           }\r\n        }) \r\n        .then(response=>response.json())\r\n        .then(data=>{\r\n            setServicesData(data);\r\n        })\r\n    }\r\n\r\n    const getCustomers = () => {\r\n        fetch(process.env.REACT_APP_API+'quality_customers/?format=json', { headers : { \r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n            'Authorization': \"Token \" + localStorage.getItem('id_token')\r\n           }\r\n        }) \r\n        .then(response=>response.json())\r\n        .then(data=>{\r\n            setCustomersData(data);\r\n        })\r\n    }\r\n\r\n    const getFields = (customer_id) => {\r\n        fetch(process.env.REACT_APP_API+'fields/'+ customer_id +'?format=json', { headers : { \r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n            'Authorization': \"Token \" + localStorage.getItem('id_token')\r\n           }\r\n        }) \r\n        .then(response=>response.json())\r\n        .then(data=>{\r\n            setFieldsData(data);\r\n        })\r\n    }\r\n\r\n    const getClusters = (field_id) => {\r\n        fetch(process.env.REACT_APP_API+'clusters/'+ field_id +'?format=json', { headers : { \r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n            'Authorization': \"Token \" + localStorage.getItem('id_token')\r\n           }\r\n        }) \r\n        .then(response=>response.json())\r\n        .then(data=>{\r\n            setClustersData(data);\r\n        })\r\n    }\r\n\r\n    const getWells = (cluster_id) => {\r\n        fetch(process.env.REACT_APP_API+'wells/'+ cluster_id +'?format=json', { headers : { \r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n            'Authorization': \"Token \" + localStorage.getItem('id_token')\r\n           }\r\n        }) \r\n        .then(response=>response.json())\r\n        .then(data=>{\r\n            setWellsData(data);\r\n            var arr = []\r\n            for (const num of data.map(item => item.num_well).filter((value, index, self) => {return self.indexOf(value) === index})) {\r\n                arr.push({ \"num_well\": num, \"wells\": data.filter(item => item.num_well === num)})\r\n            }\r\n            setArrNumWells(arr)\r\n        })\r\n    }\r\n\r\n    const getWellbores = (well_id) => {\r\n        fetch(process.env.REACT_APP_API+'wellbores/'+ well_id +'?format=json', { headers : { \r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n            'Authorization': \"Token \" + localStorage.getItem('id_token')\r\n           }\r\n        }) \r\n        .then(response=>response.json())\r\n        .then(data=>{\r\n            setWellboresData(data);\r\n        })\r\n    }\r\n    \r\n    const getMethods = (service_id) => {\r\n        service_id !== null &&\r\n          methodsData.length === 0 &&\r\n          fetch(\r\n            process.env.REACT_APP_API + \"methods/\" + service_id + \"?format=json\",\r\n            {\r\n              headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                'Authorization': \"Token \" + localStorage.getItem('id_token'),\r\n                'Accept': \"application/json\",\r\n              },\r\n            },\r\n          )\r\n            .then((response) => response.json())\r\n            .then((data) => {\r\n              setMethodsData(data);\r\n            });\r\n      }\r\n\r\n    const getDevices = (service_id) => {\r\n        fetch(\r\n          process.env.REACT_APP_API +\r\n            \"service_devices/\" +\r\n            service_id +\r\n            \"?format=json\",\r\n          {\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              Accept: \"application/json\",\r\n              'Authorization': \"Token \" + localStorage.getItem('id_token')\r\n            },\r\n          },\r\n        )\r\n          .then((response) => response.json())\r\n          .then((data) => {\r\n            setDevicesData(data);\r\n          });\r\n      };\r\n\r\n    const putWellboreValues = (wellbore_id) => {\r\n        fetch(process.env.REACT_APP_API+'wellbores/id/'+ wellbore_id +'?format=json',{\r\n            method: 'PUT',\r\n            headers:{\r\n                'Accept':'application/json',\r\n                'Content-Type':'application/json',\r\n                'Authorization': \"Token \" + localStorage.getItem('id_token')\r\n            },\r\n            body: JSON.stringify({\r\n                \"id\": wellbore_id,\r\n                \"num_wellbore\": num_wellbore.split(\" \")[1],\r\n                \"WP_CS\": column_shoe\r\n            }) \r\n        })\r\n    }\r\n\r\n    const postReport = () => {\r\n        \r\n        if(check_validity(customer, field, num_pad, num_well, num_wellbore, data_type, section_interval_start, section_interval_end)) {\r\n        var split_wellbore = num_wellbore.split(\" \");\r\n        console.log('rows', rows)\r\n        console.log('methodsData',methodsData)\r\n        console.log('devicesData', devicesData)\r\n        fetch(process.env.REACT_APP_API+'full_post/',{\r\n            method: 'POST',\r\n            headers:{\r\n                'Accept':'application/json',\r\n                'Content-Type':'application/json',\r\n                'Authorization': \"Token \" + localStorage.getItem('id_token')\r\n            },\r\n            body: JSON.stringify({\r\n                \"value\": value,\r\n                \"density\": densityData,\r\n                \"id_wellbore\": wellboresData.find(i => i.num_wellbore === split_wellbore[1] && i.pie_well === split_wellbore[0]).id,\r\n                \"section_interval_start\": section_interval_start,\r\n                \"section_interval_end\": section_interval_end,\r\n                \"service_id\": servicesData.find(s => s.name === service).id,\r\n                \"data_type\": data_type, \r\n                \"note\": note,\r\n                \"start_date\": start_date,\r\n                \"end_date\": end_date,\r\n                \"full_inform\": fullnessData,\r\n                \"digital_data\": digitalData,\r\n                //\"las_file\": lasData,\r\n                //\"witsml\": witsmlData,\r\n                \"inform_for_method\": prepare_for_post_inform_method(rows, methodsData, devicesData),\r\n                \"second_table\": prepare_for_post_secondtable(secondrows, methodsData),\r\n                \"accompaniment_type\": dataEscort,\r\n                \"complex_definition\": complex_definition,\r\n            }) \r\n        })\r\n        .then(response => response.json())\r\n        .then(data=>{\r\n            putWellboreValues(wellboresData.find(i => i.num_wellbore === split_wellbore[1] && i.pie_well === split_wellbore[0]).id)\r\n            history.push({\r\n                pathname:  `/app/reports/${data.quality_control_pk}`,\r\n             })\r\n        })\r\n        localStorage.setItem('post_quality_json', JSON.stringify({\r\n            \"value\": value,\r\n            \"density\": densityData,\r\n            \"id_wellbore\": wellboresData.find(i => i.num_wellbore === split_wellbore[1] && i.pie_well === split_wellbore[0]).id,\r\n            \"section_interval_start\": section_interval_start,\r\n            \"section_interval_end\": section_interval_end,\r\n            \"service_id\": servicesData.find(s => s.name === service).id,\r\n            \"data_type\": data_type,\r\n            \"note\": note,\r\n            \"start_date\": start_date,\r\n            \"end_date\": end_date,\r\n            \"WP_CS\": column_shoe,\r\n            \"full_inform\": fullnessData,\r\n            \"digital_data\": digitalData,\r\n            //\"las_file\": lasData,\r\n            //\"witsml\": witsmlData,\r\n            \"inform_for_method\": prepare_for_post_inform_method(rows, methodsData, devicesData),\r\n            \"second_table\": prepare_for_post_secondtable(secondrows, methodsData)\r\n    }));\r\n       \r\n        } else setShowValidityToast(!showValidityToast);\r\n    }\r\n\r\n    function updateBaseValues(e){\r\n        var inputName = e.target.name;\r\n        var inputValue = e.target.value;\r\n        if(inputName === 'customer'){\r\n                setCustomer(inputValue)\r\n                setField(\"\")\r\n                setNum_pad(\"\")\r\n                setNum_well(\"\")\r\n                setNum_wellbore(\"\")\r\n                getFields(customersData.find(i => i.name === inputValue).id)\r\n           }\r\n        else if(inputName === 'field'){\r\n               setField(inputValue)\r\n               setNum_pad(\"\")\r\n               setNum_well(\"\")\r\n               setNum_wellbore(\"\")\r\n               getClusters(fieldsData.find(i => i.name === inputValue).id)\r\n           }\r\n        else if(inputName === 'num_pad'){\r\n                setNum_pad(inputValue)\r\n                setNum_well(\"\")\r\n                setNum_wellbore(\"\")\r\n                getWells(clustersData.find(i => i.name === inputValue).id)\r\n           }\r\n        else if(inputName === 'num_well'){\r\n                var split_well = inputValue.split(\" \")\r\n                setNum_well(inputValue)\r\n                setNum_wellbore(\"\")\r\n                getWellbores(wellsData.find(i => i.num_well === split_well[1] && i.well_type === split_well[0]).id)\r\n           }\r\n        else if(inputName === 'num_wellbore'){\r\n                var split_wellbore = inputValue.split(\" \")\r\n                setNum_wellbore(inputValue)\r\n                setDiametr(wellboresData.find(i => i.num_wellbore === split_wellbore[1] && i.pie_well === split_wellbore[0]).diametr)\r\n           }\r\n        else if(inputName === 'well_type'){\r\n                setWell_type(inputValue)\r\n           }\r\n        else if(inputName === 'service'){\r\n                setService(inputValue);\r\n                setService_id(servicesData.find(i => i.name === inputValue).id);\r\n                getMethods(servicesData.find(i => i.name === inputValue).id);\r\n                getDevices(servicesData.find(i => i.name === inputValue).id);\r\n            }\r\n        else if(inputName === 'pie_well'){\r\n                setPie_well(inputValue);\r\n            }\r\n        else if(inputName === 'data_type'){\r\n                setData_type(inputValue);\r\n            }\r\n        else if(inputName === 'section_interval_start'){\r\n                inputValue === \"\" ? setSection_interval_start(null) : setSection_interval_start(inputValue);\r\n            }\r\n        else if(inputName === 'column_shoe'){\r\n                inputValue === \"\" ? setColumn_shoe(null) : setColumn_shoe(inputValue);\r\n                inputValue === \"\" ? setSection_interval_start(null) : setSection_interval_start(inputValue);\r\n            }\r\n        else if(inputName === 'section_interval_end'){\r\n                inputValue === \"\" ? setSection_interval_end(null) : setSection_interval_end(inputValue);\r\n            }\r\n        else if(inputName === 'diametr'){\r\n                inputValue === \"\" ? setDiametr(null) : setDiametr(inputValue);\r\n            }\r\n        else if(inputName === 'start_date'){\r\n                setStart_date(inputValue)\r\n            }\r\n        else if(inputName === 'end_date'){\r\n                setEnd_date(inputValue)\r\n            }\r\n        else if(inputName === 'escort'){\r\n            setDataEscort(inputValue)\r\n        }\r\n        else if (inputName === 'complex_definition'){\r\n            setComplex_definition(inputValue)\r\n        }\r\n    }\r\n\r\n    /*const updateWitsmlValues = (data) => {\r\n        setWitsmlData(data);\r\n        if (data.status === false && lasData.status === false)\r\n            setLasData({...lasData, \"status\": true })\r\n    }\r\n    const updateLasValues = (data) => {\r\n        setLasData(data);\r\n        if (data.status === false && witsmlData.status === false)\r\n            setWitsmlData({...witsmlData, \"status\": true })\r\n\r\n    }*/\r\n    const updateFullnessValues = (data) => {\r\n        setFullnessData(data);\r\n    }\r\n    const updateDensityValues = (data) => {\r\n        setDensityData(data);\r\n    }\r\n    const updateData = (row, secondrow) => {\r\n        var updatedRows = [...rows]\r\n        var updatedRowsSecond = [...secondrows]\r\n        if (rows.length === 0) {\r\n            setRows([{...row, index: 0}])\r\n            setSecondrows([{...secondrow, index: 0}])\r\n        }\r\n        if (rows.length !== 0 && row.index === null){\r\n            tableRowIndex = parseFloat(tableRowIndex) + 1\r\n            updatedRows[tableRowIndex] = {...row, index: tableRowIndex}\r\n            updatedRowsSecond[tableRowIndex] = {...secondrow, index: tableRowIndex}\r\n            setRows(updatedRows);\r\n            setSecondrows(updatedRowsSecond);\r\n        }\r\n        if (rows.length !== 0 && row.index !== null){\r\n            updatedRows[row.index] = row\r\n            updatedRowsSecond[secondrow.index] = secondrow\r\n            setRows(updatedRows);\r\n            setSecondrows(updatedRowsSecond);\r\n        }\r\n        if (rows.length !== 0) {\r\n            setValue(calc_finish_value(rows, digitalData.digital_count, digitalData.type, fullnessData.full_inf_count).toFixed(1))\r\n        }\r\n    }\r\n    const handleDrag = (e)=>{\r\n        e.preventDefault()\r\n        setDragActive(true)\r\n    }\r\n    const handleLeave = (e)=>{\r\n        e.preventDefault()\r\n        setDragActive(false)\r\n    }\r\n    const deleteData = (index) => {\r\n        if(rows.length > 0){\r\n            var updatedRows = [...rows]\r\n            var updatedRowsSecond = [...secondrows]\r\n            var indexToRemove = updatedRows.findIndex(x => x.index === index);\r\n            if(index > -1 && indexToRemove >= 0){\r\n               updatedRows.splice(indexToRemove, 1);\r\n               updatedRowsSecond.splice(indexToRemove, 1);\r\n               setRows(make_indexes(updatedRows));\r\n               setSecondrows(make_indexes(updatedRowsSecond));\r\n            }\r\n            setValue(parseFloat(calc_finish_value(rows, digitalData.digital_count, digitalData.type, fullnessData.full_inf_count).toFixed(2)))\r\n         }\r\n    }\r\n\r\n    const handleModalData = () => {\r\n        setShowModalData(!showModalData);\r\n    }\r\n    const handleModalFullness = () => {\r\n        setShowModalFullness(!showModalFullness);\r\n    }\r\n    /*const handleModalLas = () => {\r\n        setShowModalLas(!showModalLas);\r\n    }\r\n    const handleModalWitsml = () => {\r\n        setShowModalWitsml(!showModalWitsml);\r\n    }*/\r\n    const handleModalDigital = () => {\r\n        setShowModalDigital(!showModalDigital);\r\n    }\r\n    const handleModalDensity = () => {\r\n        setShowModalDensity(!showModalDensity);\r\n    }\r\n    const handleValidityToast = () => {\r\n        setShowValidityToast(!showValidityToast);\r\n    }\r\n    const handleSuccessToast = () => {\r\n        setShowSuccessToast(!showSuccessToast);\r\n    }\r\n\r\n    const colorForChip = (m_value) => {\r\n        if (m_value < 50)\r\n            return \"#f5364c\"\r\n        else if (m_value < 85)\r\n            return \"#f9bd27\"\r\n        else return \"#22bd53\"\r\n    }\r\n    const OnSumbitFileLas = (event) => {\r\n        event.preventDefault();\r\n        setFileLas( event.target.files[0]);\r\n        const myData = new FormData();\r\n        myData.append('file', event.target.files[0]);\r\n\r\n        fetch(process.env.REACT_APP_API+'las_file/get_interval',{\r\n            method: 'POST',\r\n            headers:{\r\n                \r\n                'Authorization': \"Token \" + localStorage.getItem('id_token')\r\n            },\r\n            body:myData})\r\n        .then(response => response.json())\r\n        .then(data=>{\r\n            setInterval_fact(data)\r\n        \r\n    })\r\n        .catch((err)=>(console.log(err)))\r\n        \r\n      };\r\n    const handleDrop =(e) => {\r\n        e.preventDefault();\r\n        setDragActive(false)\r\n        if (e.dataTransfer.files && e.dataTransfer.files[0]){\r\n            const myData = new FormData();\r\n            myData.append('file', e.dataTransfer.files[0]);\r\n    \r\n            fetch(process.env.REACT_APP_API+'las_file/get_interval',{\r\n                method: 'POST',\r\n                headers:{\r\n                    \r\n                    'Authorization': \"Token \" + localStorage.getItem('id_token')\r\n                },\r\n                body:myData})\r\n            .then(response => response.json())\r\n            .then(data=>{setInterval_fact(data)})\r\n            .catch((err)=>(console.log(err)))\r\n            setFileLas(e.dataTransfer.files[0])\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        getServices();\r\n        getCustomers();\r\n    }, [test])\r\n\r\n    useEffect(() => {\r\n        rows.length !== 0 && (tableRowIndex = rows.length - 1) \r\n    }, [rows])\r\n    useEffect(()=>{\r\n        for (let i=0;i<secondrows.length; i+=1){\r\n            if (mainData.data_type === \"Реального времени\")\r\n                if (rows[i].method.split(\" \")[0] !== \"Азимутальный\"){\r\n                    rows[i].method_value=parseFloat(calc_value_rt(secondrows[i], fullnessData.lqc, digitalData.type).toFixed(2))\r\n                }\r\n                else{\r\n                    rows[i].method_value=parseFloat(calc_value_rt_azimut(secondrows[i], fullnessData.lqc).toFixed(2))\r\n                }\r\n            if (mainData.data_type === \"Из памяти прибора\")\r\n                if (rows[i].method.split(\" \")[0] !== \"Азимутальный\")\r\n                    rows[i].method_value=parseFloat(calc_value_memory(secondrows[i], fullnessData.lqc, rows[i].koef_shod).toFixed(2))\r\n                else\r\n                    rows[i].method_value=parseFloat(calc_value_memory_azimut(secondrows[i], fullnessData.lqc, rows[i].koef_shod, digitalData.type).toFixed(2))\r\n        }\r\n        setValue(calc_finish_value(rows, digitalData.digital_count, digitalData.type, fullnessData.full_inf_count))\r\n    }, [digitalData, fullnessData, mainData.data_type])\r\n    useEffect(() => {\r\n        if (densityData.density>=3){\r\n            setKoefDensity(1)     \r\n        }\r\n        else if (densityData.density==2){\r\n            setKoefDensity(0.75)\r\n        }\r\n        else if (densityData.density==1){\r\n            setKoefDensity(0.5)\r\n    } \r\n        else if (densityData.density==0){\r\n            setKoefDensity(0)\r\n    }  \r\n    setValue(calc_finish_value(rows, digitalData.digital_count, digitalData.type, fullnessData.full_inf_count))\r\n    }, [rows, densityData.density])\r\n\r\n    \r\n    if (role === \"user\" || role === \"superuser\") \r\n        return (\r\n            <>\r\n                <Suspense fallback={<p style={{zIndex: \"9999\"}}></p>}>\r\n                    <FullnessDialog active={showModalFullness} setActive={handleModalFullness} fullness={fullnessData} fullnessData={fullnessData} setFullnessData={setFullnessData}/>\r\n                </Suspense>\r\n                <Suspense fallback={<p style={{zIndex: \"9999\"}}></p>}>    \r\n                    <FillDataDialog \r\n                        active={showModalData} \r\n                        setActive={handleModalData} \r\n                        methodsData = {methodsData} \r\n                        devicesData = {devicesData} \r\n                        mainData = {mainData} \r\n                        row={rowIndex !== 999999 ? rows[rowIndex] : {}} \r\n                        secondrow={rowIndex !== 999999 ? secondrows[rowIndex] : {}} \r\n                        fullnessAct={fullnessData.act} \r\n                        service_id={service_id} \r\n                        lqc={fullnessData.lqc}\r\n                        onUpdate={updateData} \r\n                        onDelete={deleteData}\r\n                        digitalData_type={digitalData.type}\r\n                        full_inf_count={fullnessData.full_inf_count}\r\n                        digital_count={digitalData.digital_count}\r\n                        data_type={data_type}\r\n                        digital_type={digitalData.type}\r\n                    />\r\n                    {/*<LasDialog active={showModalLas} setActive={handleModalLas} las={lasData} onUpdate={updateLasValues}/>\r\n                    <WitsmlDialog active={showModalWitsml} setActive={handleModalWitsml} witsml={witsmlData} onUpdate={updateWitsmlValues}/>*/}\r\n                    <DigitalDialog active={showModalDigital} setActive={handleModalDigital} digital={digitalData} digitalData={digitalData} setDigitalData={setDigitalData}/>\r\n                    <DensityDialog active={showModalDensity} setActive={handleModalDensity} density_data={densityData} onUpdate={updateDensityValues}/>\r\n                </Suspense>\r\n                <ValidityToast active={showValidityToast} setActive={handleValidityToast}/>\r\n                <SuccessToast active={showSuccessToast} setActive={handleSuccessToast}/>\r\n                <PageTitle title={data_type === \"\" && \"Качество данных ГИС\" || data_type === \"Реального времени\" && \"Качество данных ГИС (Оперативный отчёт)\" \r\n                || data_type === \"Из памяти прибора\" && \"Качество данных ГИС (Финальный отчёт)\"} />\r\n                <Grid container spacing={4}>\r\n                <Grid item xs={12}>\r\n                <Card\r\n                    sx={{ minWidth: 275 }}\r\n                    elevation={4}\r\n                    style={{\r\n                    borderRadius: \"15px\",\r\n                    backgroundColor: \"#34547A\",\r\n                    color: \"#fff\",\r\n                    }}\r\n                >\r\n                <CardContent style={{ padding: \"0.5rem 1.5rem 0 1.5rem\", color:\"white\"}}>\r\n                    <Form.Group as={Row}>\r\n                        <Col xs=\"2\">\r\n                            <FormControl fullWidth variant=\"standard\">\r\n                                <InputLabel id=\"customer\" style={styleInput}>Общество</InputLabel>\r\n                                    <Select labelId=\"customer\" name=\"customer\" label=\"Общество\" size=\"small\" style={styleSelect} value={customer} onChange={e => updateBaseValues(e)}>\r\n                                        <MenuItem hidden disabled></MenuItem>\r\n                                        {customersData.map(item => (<MenuItem key={item.name} value={item.name} style={{fontSize:\"20px\"}}>{item.name}</MenuItem>))}\r\n                                    </Select>\r\n                            </FormControl>\r\n                        </Col>\r\n                        <Col xs=\"2\">\r\n                            <FormControl fullWidth variant=\"standard\">\r\n                                <InputLabel id=\"field\" style={styleInput}>Месторождение</InputLabel>\r\n                                    <Select labelId=\"field\" name=\"field\" label=\"Месторождение\" size=\"small\" style={styleSelect} value={field} onChange={e => updateBaseValues(e)}>\r\n                                        <MenuItem hidden disabled></MenuItem>\r\n                                        {fieldsData.map(item => (<MenuItem key={item.name} value={item.name} style={{fontSize:\"20px\"}}>{item.name}</MenuItem>))}\r\n                                    </Select>\r\n                            </FormControl>\r\n                        </Col>\r\n                        <Col xs=\"1\">\r\n                            <FormControl fullWidth variant=\"standard\">\r\n                                <InputLabel id=\"num_pad\" style={styleInput}>Куст</InputLabel>\r\n                                    <Select labelId=\"num_pad\" name=\"num_pad\" label=\"Куст\" size=\"small\" style={styleSelect} value={num_pad} onChange={e => updateBaseValues(e)}>\r\n                                        <MenuItem hidden disabled></MenuItem>\r\n                                        {clustersData.map(item => {return <MenuItem key={item.name} value={item.name} style={{fontSize:\"20px\"}}>{item.name}</MenuItem>})}\r\n                                    </Select>\r\n                            </FormControl>\r\n                        </Col>\r\n                        <Col xs=\"2\">\r\n                            <FormControl fullWidth variant=\"standard\">\r\n                                <InputLabel htmlFor=\"num_well\" style={styleInput}>Скважина</InputLabel>\r\n                                    <Select labelId=\"num_well\" name=\"num_well\" label=\"Скважина\" size=\"small\" style={styleSelect} value={num_well} onChange={e => updateBaseValues(e)}>\r\n                                        <MenuItem hidden disabled></MenuItem>\r\n                                        {arrNumWells.map(item => {return [<ListSubheader style={{pointerEvents: \"none\"}}>{\"Скважина \" + item.num_well}</ListSubheader>, item.wells.map(i => {return <MenuItem key={i.well_type + i.num_well} value={i.well_type + \" \" + i.num_well} style={{fontSize:\"20px\"}}>{i.well_type + \" \" + i.num_well}</MenuItem>})]})}\r\n                                    </Select>\r\n                            </FormControl>\r\n                        </Col>\r\n                        <Col xs=\"2\">\r\n                            <FormControl fullWidth variant=\"standard\">\r\n                                <InputLabel id=\"num_wellbore\" style={styleInput}>Ствол</InputLabel>\r\n                                    <Select labelId=\"num_wellbore\" name=\"num_wellbore\" label=\"Ствол\" size=\"small\" style={styleSelect} value={num_wellbore} onChange={e => updateBaseValues(e)}>\r\n                                        <MenuItem hidden disabled></MenuItem>\r\n                                        {wellboresData.map(item => {return <MenuItem key={item.num_wellbore + item.pie_well} value={item.pie_well + \" \" + item.num_wellbore} style={{fontSize:\"20px\"}}>{item.num_wellbore !== \"1\" ? item.pie_well + \" \" + item.num_wellbore : item.pie_well}</MenuItem>})}\r\n                                    </Select>\r\n                            </FormControl>\r\n                        </Col>\r\n                        <Form.Label column xs=\"2\" style={{textAlign:\"right\", fontSize: \"22px\", fontWeight:\"700\", paddingTop:\"1.25rem\"}}>\r\n                        <NotInterestedIcon style={{fontSize:\"30px\"}}/>диаметр долота, {diametr} мм\r\n                        </Form.Label>\r\n                        <Col xs=\"1\" >\r\n                            <Button variant=\"yellow\" style={{minHeight:\"100%\", minWidth:\"100%\", marginTop:\"1rem\", width:\"120px\"}} onClick={() => postReport()}>Сохранить</Button>\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row}>\r\n                        <Col xs=\"4\"></Col>\r\n                        <Form.Label column xs=\"2\" style={{textAlign:\"center\", verticalAlign:\"top\", fontSize: \"22px\", fontWeight:\"700\"}}>\r\n                        Башмак колонны, м\r\n                        </Form.Label>\r\n                        <Form.Label column xs=\"2\" style={{textAlign:\"center\", verticalAlign:\"top\", fontSize: \"22px\", fontWeight:\"700\"}}>\r\n                        Интервал секции, м\r\n                        </Form.Label>\r\n                        <Col xs=\"1\"></Col>\r\n                        <Form.Label column xs=\"2\" style={{textAlign:\"center\", verticalAlign:\"top\", fontSize: \"22px\", fontWeight:\"700\"}}>\r\n                        Дата ГИС\r\n                        </Form.Label>\r\n                        <Col xs=\"1\"></Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} style={{paddingBottom:\"0.5rem\"}}>\r\n                        <Col xs=\"2\">\r\n                            <FormControl fullWidth variant=\"outlined\" size=\"small\">\r\n                                <InputLabel id=\"service\" style={styleInput}>Сервисная компания</InputLabel>\r\n                                    <Select labelId=\"service\" name=\"service\" style={styleSelect} size=\"small\" label=\"Сервисная компания\" value={service} onChange={e => updateBaseValues(e)}>\r\n                                        <MenuItem hidden disabled></MenuItem>\r\n                                        {servicesData.map(item => (<MenuItem key={item.name} value={item.name} style={{fontSize:\"20px\"}}>{item.name}</MenuItem>))}\r\n                                    </Select>\r\n                            </FormControl>\r\n                        </Col>\r\n                        \r\n                        <Col xs=\"2\">\r\n                            <FormControl fullWidth variant=\"outlined\" size=\"small\">\r\n                                <InputLabel id=\"data_type\" style={styleInput}>Вид данных</InputLabel>\r\n                                    <Select labelId=\"data_type\" name=\"data_type\" style={styleSelect} size=\"small\" label=\"Вид данных\" value={data_type} onChange={e => updateBaseValues(e)}>\r\n                                        <MenuItem key=\"1\" value=\"Реального времени\" style={{fontSize:\"20px\"}}>Реального времени</MenuItem>\r\n                                        <MenuItem key=\"2\" value=\"Из памяти прибора\" style={{fontSize:\"20px\"}}>Из памяти прибора</MenuItem>\r\n                                    </Select>\r\n                            </FormControl>\r\n                        </Col>\r\n                        <Col xs=\"2\">\r\n                            <div style={{width: \"50%\", margin: \"auto\"}}>\r\n                                <Form.Control id=\"column_shoe\" name=\"column_shoe\" style={styleBlueInput} value={column_shoe} type=\"number\" step=\"0.01\" onChange={e => updateBaseValues(e)}/>\r\n                            </div>\r\n                        </Col>\r\n                        <Col xs=\"1\">\r\n                            <Form.Control id=\"section_interval_start\" name=\"section_interval_start\" style={styleBlueInput} value={section_interval_start} type=\"number\" step=\"0.01\" onChange={e => updateBaseValues(e)}/>\r\n                        </Col>\r\n                        <Col xs=\"1\">\r\n                            <Form.Control id=\"section_interval_end\" name=\"section_interval_end\" style={styleBlueInput} value={section_interval_end} type=\"number\" step=\"0.01\" onChange={e => updateBaseValues(e)}/>\r\n                        </Col>\r\n                        <Col xs=\"2\">\r\n                        <Form.Control\r\n                            disabled={!(role === \"user\" || role === \"superuser\")}\r\n                            id=\"start_date\"\r\n                            name=\"start_date\"\r\n                            value={start_date}\r\n                            onChange={(e) => setStart_date(e.target.value)}\r\n                            style={styleBlueInput}\r\n                            type=\"date\"\r\n                        />\r\n                        </Col>\r\n                        <Col xs=\"2\">\r\n                        <Form.Control\r\n                            disabled={!(role === \"user\" || role === \"superuser\")}\r\n                            id=\"end_date\"\r\n                            name=\"end_date\"\r\n                            value={end_date}\r\n                            onChange={(e) => setEnd_date(e.target.value)}\r\n                            style={styleBlueInput}\r\n                            type=\"date\"\r\n                        />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} style={{paddingBottom:\"0.5rem\"}}>\r\n                        <Col xs=\"2\">\r\n                            <FormControl fullWidth variant=\"outlined\" size=\"small\">\r\n                                <InputLabel id=\"escort\" style={styleInput}>Сопровождение</InputLabel>\r\n                                    <Select labelId=\"escort\" name=\"escort\" style={styleSelect} size=\"small\" label=\"Сопровождения\" value={dataEscort} onChange={e => updateBaseValues(e)}>\r\n                                        <MenuItem hidden disabled></MenuItem>\r\n                                        {escort.map(item => (<MenuItem key={item.name} value={item.name} style={{fontSize:\"20px\"}}>{item.name}</MenuItem>))}\r\n                                    </Select>\r\n                            </FormControl>\r\n                        </Col>\r\n                    </Form.Group>\r\n                </CardContent>\r\n            </Card>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                <Card\r\n                sx={{ minWidth: 275 }}\r\n                elevation={4}\r\n                style={{\r\n                  borderRadius: \"15px\",\r\n                  backgroundColor: \"#3F6694\",\r\n                  color: \"#fff\",\r\n                }}\r\n              >\r\n                <CardContent style={{ paddingBottom: \"0\", paddingTop:\"1rem\", fontWeight:\"600\" }}>\r\n                  <Form.Group as={Row} style={{marginBottom:\"1rem\"}}>\r\n                    <Form.Label column sm=\"4\" style={{textAlign:\"center\", fontSize:\"22px\"}}>\r\n                    Автоматическое определение комплекса\r\n                    </Form.Label>\r\n                    <Col sm=\"8\" style={{verticalAlign:\"middle\"}}>\r\n                    <Form.Control as=\"select\" id=\"complex_definition\" name=\"complex_definition\" style={styleBlueInput} value={complex_definition} onChange={e => updateBaseValues(e)}>\r\n                            <option></option>\r\n                            <option>ГК+УЭС</option>\r\n                            <option>Полный</option>\r\n                            <option>Специальный</option>\r\n                            <option>Отсутствует</option>\r\n                        </Form.Control>\r\n                    </Col>\r\n                  </Form.Group>\r\n                </CardContent>\r\n              </Card>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                <Card\r\n                sx={{ minWidth: 275 }}\r\n                elevation={4}\r\n                style={{\r\n                  borderRadius: \"15px\",\r\n                  backgroundColor: \"#3F6694\",\r\n                  color: \"#fff\",\r\n                }}\r\n              >\r\n                <CardContent style={{ height:\"100%\", paddingBottom: \"0\", paddingTop:\"1rem\", fontWeight:\"600\" }}>\r\n                <Col sm=\"12\" style={{height:\"100%\", backgroundColor:'white'}}>\r\n                  <Form.Group as={Row} style={{marginBottom:\"1rem\"}}>\r\n                  \r\n                    <Form.Label column style={dragActive ? styleBlueInputDisabled : styleBlueInput} onDragEnter={handleDrag} onDrop={handleDrop} onDragOver={handleDrag} onDragLeave={handleLeave}>\r\n                    <input accept=\".las\" style={{ display: \"none\" }}  type=\"file\" onChange={OnSumbitFileLas}/>\r\n                    <CloudUploadIcon style={{ marginRight: \"10px\" }}/>\r\n                    {fileLas? fileLas.name : \"Загрузить файл LAS\"}\r\n                    </Form.Label>\r\n                  </Form.Group>\r\n                  </Col>\r\n                </CardContent>\r\n                \r\n              </Card>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                <Card\r\n                    sx={{ minWidth: 275 }}\r\n                    elevation={4}\r\n                    style={{\r\n                    borderRadius: \"15px\",\r\n                    backgroundColor: \"#34547A\",\r\n                    color: \"#fff\",\r\n                    }}\r\n                >\r\n                <CardContent style={{ paddingBottom: \"0\", color:\"white\"}}>\r\n                    <Row>\r\n                        <Col xs={4} style={{borderRight:\"2px solid #6985AF\"}}>\r\n                        <Button variant=\"deepblueadd\" size=\"large\" onClick={handleModalFullness} style={{width: \"100%\", height: \"100%\", fontSize: \"18px\"}}>Полнота предоставления данных<br/> на планшете&nbsp;&nbsp;\r\n                        <Badge variant=\"light\">{fullnessData.full_inf_count !== null ? fullnessData.full_inf_count + \"%\" : \"%\"}</Badge></Button>\r\n                        </Col>\r\n                        {/*<Col xs={3} style={{borderRight:\"2px solid #6985AF\"}}>\r\n                        <Button variant=\"deepblueadd\" size=\"large\" onClick={handleModalLas} style={{width: \"100%\", height: \"100%\", fontSize: \"18px\", display:\"inline-block\"}}>Оформление Las-файла&nbsp;&nbsp;\r\n                        <Badge variant=\"light\">{lasData.status === true ? (lasData.las_file_count !== null ? lasData.las_file_count + \"%\" : \"%\") : \"отсутствует\"}</Badge></Button>\r\n                        </Col>\r\n                        <Col xs={3} style={{borderRight:\"2px solid #6985AF\"}}>\r\n                        <Button variant=\"deepblueadd\" size=\"large\" onClick={handleModalWitsml} style={{width: \"100%\", height: \"100%\", fontSize: \"18px\"}}>Корректность загрузки данных реального времени (WITSML)&nbsp;&nbsp;\r\n                        <Badge variant=\"light\">{witsmlData.status === true ? (witsmlData.witsml_count !== null ? witsmlData.witsml_count + \"%\" : \"%\") : \"отсутствует\"}</Badge></Button>\r\n                        </Col>*/}\r\n                        <Col xs={4} style={{borderRight:\"2px solid #6985AF\"}}>\r\n                        <Button variant=\"deepblueadd\" size=\"large\" onClick={handleModalDigital} style={{width: \"100%\", height: \"100%\", fontSize: \"18px\"}}>Полнота предоставления цифровых данных&nbsp;&nbsp;\r\n                        <Badge variant=\"light\">{digitalData.type+' '+digitalData.digital_count+ \"%\"}</Badge></Button>\r\n                        </Col>\r\n                        <Col xs={4}>\r\n                        <Button variant=\"deepblueadd\" size=\"large\" onClick={handleModalDensity} style={{width: \"100%\", height: \"100%\", fontSize: \"18px\"}}>Плотность данных:&nbsp;&nbsp;\r\n                        <Badge variant=\"light\">{densityData.density !== null ? densityData.density + \" точ. на метр\" : \"точ. на метр\"}</Badge></Button>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                    <Table>\r\n                            <TableHead style={{backgroundColor:\"#34547A\"}}>\r\n                                <TableRow>\r\n                                    <TableCell align=\"center\" style={{width:\"50px\", color:\"white\", borderBottom:\"2px solid #6985AF\"}}>\r\n                                    <IconButton\r\n                                        aria-haspopup=\"false\"\r\n                                        color=\"innherit\"\r\n                                        onClick={() => {setRowIndex(999999); handleModalData();}}\r\n                                        style={{outline: \"none\", visibility: (data_type === \"\" || service === \"\" || field === \"\" ? \"hidden\" : \"visible\")}}\r\n                                        >\r\n                                        <PlusIcon style={{color:\"white\"}}/>\r\n                                    </IconButton>\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\" style={{width: \"450px\", color:\"white\", borderBottom:\"2px solid #6985AF\", fontSize:\"18px\"}}>Метод</TableCell>\r\n                                    <TableCell align=\"center\" style={{width: \"150px\", color:\"white\", borderBottom:\"2px solid #6985AF\", fontSize:\"18px\"}}>Тип прибора</TableCell>\r\n                                    <TableCell align=\"center\" style={{color:\"white\", borderBottom:\"2px solid #6985AF\", fontSize:\"18px\"}}>Номер прибора</TableCell>\r\n                                    <TableCell align=\"center\" style={{color:\"white\", borderBottom:\"2px solid #6985AF\", fontSize:\"18px\"}}>Дата калибровки прибора</TableCell>\r\n                                    <TableCell align=\"center\" style={{width: \"200px\", color:\"white\", borderBottom:\"2px solid #6985AF\", fontSize:\"18px\"}}>Интервал записи (факт), м</TableCell>\r\n                                    <TableCell align=\"center\" style={{width: \"300px\", color:\"white\", borderBottom:\"2px solid #6985AF\", fontSize:\"18px\"}}>Коэффициент сходимости данных</TableCell>\r\n                                    <TableCell align=\"center\" style={{color:\"white\", borderBottom:\"2px solid #6985AF\", fontSize:\"18px\"}}>Причина расхождения данных</TableCell>\r\n                                    <TableCell align=\"center\" style={{width: \"200px\", color:\"white\", borderBottom:\"2px solid #6985AF\", fontSize:\"18px\"}}>Петрофизическая задача</TableCell>\r\n                                    <TableCell align=\"center\" style={{width: \"100px\", color:\"white\", borderBottom:\"2px solid #6985AF\", fontSize:\"18px\"}}>Оценка по методу</TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody style={{paddingTop:\"100px\"}}>\r\n                                {rows.map((row, index) => {\r\n                                        if (row) return(\r\n                                        <TableRow key={index} style={{cursor: \"pointer\", height:\"50px\", margin:\"0\", padding:\"0\", backgroundColor: (hover.index === index && hover.hover ? '#f0f0f0' : '#fff')}} onMouseEnter={() => setHover({index: index, hover: true})} onMouseLeave={() => setHover({index: index, hover: false})}>\r\n                                            <TableCell align=\"center\" style={styleCell}>\r\n                                            <IconButton\r\n                                                    aria-haspopup=\"true\"\r\n                                                    color=\"innherit\"\r\n                                                    onClick={() => {window.confirm(\"Вы точно хотите удалить данный метод?\") && deleteData(index)}}\r\n                                                    style={{outline: \"none\", padding:\"0\", margin:\"0\"}}\r\n                                                    >\r\n                                                    <RemoveCircleOutlineIcon style={{color:\"black\"}}/>\r\n                                                </IconButton>\r\n                                            </TableCell>\r\n                                            <TableCell align=\"center\" onClick={() => {setRowIndex(index); handleModalData()}} style={styleCell}>{row.method === \"\" ? <>&mdash;</> : row.method}</TableCell>\r\n                                            <TableCell align=\"center\" onClick={() => {setRowIndex(index); handleModalData()}} style={styleCell}>{row.tool_type === \"\" ? <>&mdash;</> : row.tool_type}</TableCell>\r\n                                            <TableCell align=\"center\" onClick={() => {setRowIndex(index); handleModalData()}} style={styleCell}>{row.tool_num === \"\" ? <>&mdash;</> : row.tool_num}</TableCell>\r\n                                            <TableCell align=\"center\" onClick={() => {setRowIndex(index); handleModalData()}} style={styleCell}>{row.calibr_date === null ? <>&mdash;</> : row.calibr_date}</TableCell>\r\n                                            <TableCell align=\"center\" onClick={() => {setRowIndex(index); handleModalData()}} style={styleCell}>{row.interval_shod_start === null || row.interval_shod_end === null ? <>&mdash;</> : row.interval_shod_start+\" - \"+row.interval_shod_end}</TableCell>\r\n                                            <TableCell align=\"center\" onClick={() => {setRowIndex(index); handleModalData()}} style={styleCell}>{row.koef_shod === null ? <>&mdash;</> : row.koef_shod}</TableCell>\r\n                                            <TableCell align=\"center\" onClick={() => {setRowIndex(index); handleModalData()}} style={styleCell}>{row.reason_rashod === \"\" ? <>&mdash;</> : row.reason_rashod}</TableCell>\r\n                                            <TableCell align=\"center\" onClick={() => {setRowIndex(index); handleModalData()}} style={styleCell}>{row.petrophysic_task === null ? <>&mdash;</> : row.petrophysic_task}</TableCell>\r\n                                            <TableCell align=\"center\" onClick={() => {setRowIndex(index); handleModalData()}} style={styleCell}>{row.method_value === null ? <>&mdash;</> : <Chip style={{backgroundColor: (colorForChip(row.method_value)), color: \"#fff\"}} label={parseFloat((row.method_value +calc_tablet_digitalData(digitalData.digital_count, digitalData.type, fullnessData.full_inf_count))*koefDensity*Number(row.petrophysic_task)).toFixed(2)+\"%\"}/>}</TableCell>\r\n                                        </TableRow>\r\n                                    )\r\n                                })}\r\n                            </TableBody>\r\n                    </Table>\r\n                    </Row>\r\n                </CardContent>\r\n                </Card>\r\n                </Grid>\r\n                <Grid item xs>\r\n                <Card\r\n                    sx={{ minWidth: 275 }}\r\n                    elevation={4}\r\n                    style={{ borderRadius: \"15px\" }}\r\n                >\r\n                    <CardContent style={{ paddingBottom: \"0.2rem\" }}>\r\n                    <Form.Group>\r\n                        <Form.Control\r\n                        disabled={!(role === \"user\" || role === \"superuser\")}\r\n                        id=\"note\"\r\n                        name=\"note\"\r\n                        type=\"text\"\r\n                        value={note}\r\n                        onChange={(e) => setNote(e.target.value)}\r\n                        placeholder=\"Введите примечания...\"\r\n                        style={{ border: \"0\" }}\r\n                        />\r\n                    </Form.Group>\r\n                    </CardContent>\r\n                </Card>\r\n                </Grid>\r\n                <Grid item xs=\"auto\" style={{textAlign: \"right\", display: (value ? \"block\" : \"none\")}}>\r\n                <Card\r\n                    sx={5}\r\n                    elevation={4}\r\n                    style={{\r\n                    borderRadius: \"15px\",\r\n                    backgroundColor: \"#34547A\",\r\n                    color: \"#fff\"\r\n                    }}\r\n                >\r\n                <CardContent style={{paddingBottom: \"1rem\", color:\"white\"}}>\r\n                    <Typography variant=\"button\" component=\"h2\" style={{fontSize: \"25px\"}}>\r\n                        {`Общая оценка качества составила: ${parseFloat((Number(value)*koefDensity).toFixed(2))}%`}\r\n                    </Typography>\r\n                    </CardContent>\r\n                    </Card>\r\n                </Grid>\r\n                </Grid>\r\n            </>\r\n        )\r\n    else return(<Blocked/>)\r\n}\r\n\r\nexport default Checklist;","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\pages\\services\\Service.js",["535","536"],"import React, {useState, useEffect, Suspense} from 'react';\r\n\r\n//import {DropdownButton, Dropdown} from 'react-bootstrap';\r\nimport {\r\n    Grid,\r\n//    Table, TableHead, TableRow, TableCell, TableBody, TableContainer,\r\n    Button,\r\n    CircularProgress,\r\n    Typography,\r\n//    Paper\r\n} from \"@material-ui/core\";\r\nimport MUIDataTable from \"mui-datatables\";\r\nimport { useHistory } from \"react-router\";\r\n//import { MdDeleteSweep } from 'react-icons/md';\r\n\r\nimport PageTitle from \"../../components/PageTitle\";\r\n//import { unique, optimize_for_table } from './Scripts';\r\n//import DropdownMenu from 'react-bootstrap/esm/DropdownMenu';\r\nimport Loading from '../../components/Loading/Loading';\r\n\r\nconst AddToolDialog = React.lazy(() => import('../../components/Dialogs/AddToolDialog'));\r\n\r\nfunction Service(props) {\r\n    const [servicesData, setServicesData]= useState({});\r\n    const [method_index, setMethod_index] = useState(null)\r\n    const constant = false;\r\n    const history = useHistory();\r\n    //const [names_methods, setNames_methods] = useState([]);\r\n    //const [optimizedData, setOptimizedData] = useState([]);\r\n    const [showModalAddTool, setShowModalAddTool] = useState(false);\r\n    const role = localStorage.getItem('role');\r\n\r\n    useEffect(() => {\r\n        getService(props);\r\n      }, [constant])\r\n\r\n    const getService = (props) => {\r\n        fetch(process.env.REACT_APP_API+'full_data_services/'+ props.match.params.id +'?format=json', { headers : { \r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n            'Authorization': \"Token \" + localStorage.getItem('id_token')\r\n           }\r\n        }) \r\n        .then(response=>response.json())\r\n        .then(data=>{\r\n            setServicesData(data)\r\n            //setNames_methods(unique(data.method.map(item => item.method_class_name)));\r\n            //setOptimizedData(optimize_for_table(data.method, unique(data.method.map(item => item.method_class_name))))\r\n        })\r\n    }\r\n\r\n    const deleteTool = (tool_id) => {\r\n        if (role === (\"superuser\" || \"user\"))\r\n            fetch(process.env.REACT_APP_API+'service_methods/id/'+ tool_id + '?format=json', { method: 'DELETE', headers: {'Authorization': \"Token \" + localStorage.getItem('id_token')} })\r\n      }\r\n\r\n    /*const runCallbackTableRow = (cb) => {\r\n        return cb();\r\n      };\r\n    const runCallbackTableCell = (cb) => {\r\n        return cb();\r\n    };\r\n    */\r\n    const handleModalAddTool = () => {\r\n        setShowModalAddTool(!showModalAddTool);\r\n    }\r\n\r\n    if (servicesData.method)\r\n    return (\r\n        <>\r\n        <Suspense fallback={<p style={{zIndex: \"9999\"}}></p>}>\r\n            <AddToolDialog active={showModalAddTool} setActive={handleModalAddTool} service_id={props.match.params.id}/>\r\n        </Suspense>\r\n        <PageTitle title={`${servicesData.name} (${servicesData.short})`} button={<Button\r\n            variant=\"contained\"\r\n            size=\"medium\"\r\n            color=\"secondary\"\r\n            style={{outline: \"none\", backgroundColor:\"#34547A\", visibility: (role === \"user\" || role === \"superuser\" ? 'visible' : 'hidden')}}\r\n            onClick={() => handleModalAddTool()}\r\n            >\r\n                Добавить инструмент\r\n            </Button>} />\r\n        <Grid container spacing={4}>\r\n            <Grid item xs={12}>\r\n            {/*<TableContainer component={Paper}>\r\n                <Table>\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {\r\n                            names_methods.length !==0 ? names_methods.map(item => { return <TableCell align=\"center\">{item}</TableCell>}) : <TableCell align=\"center\">МЕТОДОВ В СЕРВИСНОЙ КОМПАНИИ НЕ НАЙДЕНО</TableCell>\r\n                            }\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {runCallbackTableRow(() => {\r\n                            const row = [];\r\n                            const copy_optimized = [...optimizedData]\r\n                            for (var i = 0; i < Math.ceil(optimizedData.length / names_methods.length); i++) {\r\n                                row.push(<TableRow>\r\n                                    {runCallbackTableCell(() => {\r\n                                        const cells = [];\r\n                                        for (var j = 0; j < names_methods.length; j++){\r\n                                            cells.push(<TableCell align=\"center\" style={{minWidth:\"100%\"}}>\r\n                                                {copy_optimized[j].name !== undefined && <DropdownButton variant=\"secondary\" style={{minWidth:\"100%\"}} drop=\"right\" title={copy_optimized[j].name}>\r\n                                                    {copy_optimized[j].device !== undefined && copy_optimized[j].device.map(item => {\r\n                                                        return <Dropdown.Item style={{width:\"100%\", textAlign:\"center\", fontSize:\"20px\"}} onClick={() => {deleteTool(item.id_service_method); history.go(0);}}>{(role === (\"superuser\" || \"user\")) && <MdDeleteSweep/>}&ensp;{item.tool_type}</Dropdown.Item>\r\n                                                    })}\r\n                                                </DropdownButton>}\r\n                                            </TableCell>);\r\n                                        }\r\n                                        copy_optimized.splice(0, names_methods.length); \r\n                                        return cells;\r\n                                    })}\r\n                                </TableRow>);\r\n                            }\r\n                            return row;\r\n                        })}\r\n                    </TableBody>\r\n                </Table>\r\n                    </TableContainer>*/}\r\n            <MUIDataTable\r\n            title={<Typography variant=\"h6\">\r\n            Список методов и инструментов\r\n          </Typography>}\r\n            data={servicesData.method.map(item => [item.name])}\r\n            columns={[\"Список методов в базе данных\"]}\r\n            options={{\r\n              responsive: 'vertical',\r\n              sort: false,\r\n              viewColumns: false,\r\n              filter: false,\r\n              print: false,\r\n              download: false,\r\n              pagination: false,\r\n              rowsPerPage: 1000000,\r\n              textLabels: {\r\n                body: {\r\n                  noMatch: \"Записей не найдено.\",\r\n                  toolTip: \"Сортировать\"\r\n                },\r\n                toolbar: {\r\n                  search: \"Поиск\"\r\n                },\r\n              },\r\n              expandableRows: true,\r\n              expandableRowsHeader: false,\r\n              onRowExpansionChange: (currentRowsExpanded, allRowsExpanded, rowsExpanded) => {\r\n                setMethod_index(currentRowsExpanded[0].index);\r\n              },\r\n              isRowExpandable: (dataIndex, expandedRows) => {\r\n                // Prevent expand/collapse of any row if there are 1 row expanded already (but allow those already expanded to be collapsed)\r\n                if (expandedRows.data.length > 1 && expandedRows.data.filter(d => d.dataIndex === dataIndex).length === 0) return false\r\n                else return true;\r\n              },\r\n              selectableRows: 'none',\r\n              renderExpandableRow: (rowData, rowMeta) => {\r\n                return (\r\n                  <React.Fragment>\r\n                    <tr>\r\n                      <td colSpan={6}>\r\n                        <MUIDataTable\r\n                          title=\"Сервисные приборы\"\r\n                          data={ servicesData && servicesData.method[rowMeta.dataIndex].device.map(item => [item.tool_type])}\r\n                          columns={[\"\"]}\r\n                          options={{\r\n                            viewColumns: false,\r\n                            filter: false,\r\n                            print: false,\r\n                            download: false,\r\n                            sort: false,\r\n                            textLabels: {\r\n                              body: {\r\n                                noMatch: \"Записей не найдено.\",\r\n                                toolTip: \"Сортировать\"\r\n                              },\r\n                              pagination: {\r\n                                next: \"Следующая страница\",\r\n                                previous: \"Предыдущая страница\",\r\n                                rowsPerPage: \"Строк на странице:\",\r\n                                displayRows: \"из\",\r\n                              },\r\n                              toolbar: {\r\n                                search: \"Поиск\"\r\n                              },\r\n                              selectedRows: {\r\n                                text: \"строка выбрана\"\r\n                              },\r\n                            },\r\n                            onRowsDelete: (rowMeta) => {\r\n                                if (window.confirm('Вы действительно хотите удалить инструмент '+ servicesData.method[method_index].device[rowMeta.data[0].dataIndex].tool_type +' из списка инструментов?'))\r\n                                    deleteTool(servicesData.method[method_index].device[rowMeta.data[0].dataIndex].id_service_method)\r\n                                else\r\n                                    getService(props)\r\n                            },\r\n                            selectableRows: (role === \"user\" || role === \"superuser\" ? 'single' : 'none')\r\n                          }}\r\n                        />\r\n                      </td>\r\n                    </tr>\r\n                  </React.Fragment>\r\n                );\r\n              },\r\n            }}\r\n            />\r\n            </Grid>\r\n            <Grid item xs={12}>    \r\n                <Button color=\"secondary\" variant=\"contained\" onClick={() => {history.goBack()}} style={{outline: \"none\", backgroundColor:\"#34547A\"}}>Вернуться назад</Button>    \r\n            </Grid>\r\n        </Grid>\r\n        \r\n        </>\r\n    )\r\n    else return (<Loading/>)\r\n}\r\n\r\nexport default Service;","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\pages\\services\\Services.js",[],"C:\\Users\\s_martyanova\\CheckList\\Front\\src\\pages\\reports\\Reports.js",["537"],"import React, {useState, useEffect} from 'react';\r\n\r\nimport {\r\n    Grid,\r\n    Button,\r\n    Typography,\r\n    CircularProgress\r\n  } from \"@material-ui/core\";\r\n\r\nimport { useHistory } from \"react-router\";\r\nimport MUIDataTable from \"mui-datatables\";\r\nimport PageTitle from \"../../components/PageTitle\";\r\nimport NotFound from '../../components/NotFound/NotFound';\r\n\r\nimport EditSampleExDialog from '../../components/Dialogs/EditSampleExDialog';\r\nimport Loading from '../../components/Loading/Loading';\r\n\r\nfunction Reports() {\r\n    const [reportsData, setReportsData] = useState([]);\r\n    const constant = false;\r\n    const history = useHistory();\r\n    const role = localStorage.getItem('role');\r\n\r\n    const [showSampleModal, setShowSampleModal] = useState(false)\r\n    let isLoading=false\r\n    useEffect(() => {\r\n        getReports();\r\n    },[constant])\r\n\r\n    const getReports = () => {\r\n      isLoading=true\r\n        fetch(process.env.REACT_APP_API+'quality_control/?format=json', { headers : { \r\n          'Content-Type': 'application/json',\r\n          'Accept': 'application/json',\r\n          'Authorization': \"Token \" + localStorage.getItem('id_token')\r\n         }\r\n      }) \r\n        .then(response=>response.json())\r\n        .then(data=>{\r\n          isLoading=false\r\n            setReportsData(data);\r\n        })\r\n        .catch(err=> console.log(err))\r\n      }\r\n\r\n    const deleteReport = (report_id) => {\r\n        fetch(process.env.REACT_APP_API+'quality_control/id/'+ report_id +'?format=json', { method: 'DELETE', headers: {'Authorization': \"Token \" + localStorage.getItem('id_token')} })\r\n    }\r\n    \r\n    const handleModal = () => {\r\n      setShowSampleModal(!showSampleModal)\r\n    }\r\n\r\n    if (!isLoading)\r\n    return (\r\n        <>\r\n        <EditSampleExDialog active={showSampleModal} setActive={handleModal}/>\r\n        <PageTitle title=\"Отчёты по контролю качества\" button={<Button\r\n            variant=\"contained\"\r\n            size=\"medium\"\r\n            color=\"secondary\"\r\n            style={{marginRight: \"2rem\", outline: \"none\", backgroundColor:\"#34547A\", visibility: (role === \"user\" || role === \"superuser\" ? 'visible' : 'hidden')}}\r\n            onClick={handleModal}\r\n            >\r\n                Редактировать шаблон выгрузки Excel\r\n            </Button>}\r\n            button2={<Button\r\n              variant=\"contained\"\r\n              size=\"medium\"\r\n              color=\"secondary\"\r\n              style={{outline: \"none\", backgroundColor:\"#34547A\", visibility: (role === \"user\" || role === \"superuser\" ? 'visible' : 'hidden')}}\r\n              onClick={() => {history.push({pathname: \"/app/checklist\"})}}\r\n              >\r\n                  Добавить новый отчёт\r\n              </Button>}\r\n            />\r\n        <Grid container spacing={4}>\r\n        <Grid item xs={12}>\r\n          {reportsData.length === 0 ? <NotFound/> : \r\n          <MUIDataTable\r\n            title={<Typography variant=\"h6\">\r\n            Список отчётов в базе\r\n            {reportsData.length === 0 && <CircularProgress size={24} style={{ marginLeft: 15, position: 'relative', top: 4 }} />}\r\n          </Typography>}\r\n            data={reportsData.map(item => [item.customer, item.field, item.well, item.pie_well + \" №\" + item.num_wellbore, item.data_type === \"Реального времени\" ? \"Оперативный\" : \"Финальный\", item.section_interval_start + \" - \" + item.section_interval_end, item.data_of_created, item.author, item.value])}\r\n            columns={[\"Общество\", \"Месторождение\", \"Скважина\", \"Ствол\", \"Тип отчёта\", \"Интервал секции (м)\", \"Дата создания\", \"Автор\", \"Оценка (%)\"]}\r\n            options={{\r\n              filterType: \"textField\",\r\n              print: false,\r\n              download: false,\r\n              pagination: false,\r\n              sortOrder: {\r\n                name: 'Дата создания',\r\n                direction: 'desc'\r\n              },\r\n              rowsPerPage: 1000000,\r\n              textLabels: {\r\n                body: {\r\n                  noMatch: \"Записей не найдено.\",\r\n                  toolTip: \"Сортировать\"\r\n                },\r\n                filter: {\r\n                  all: \"Все\",\r\n                  title: \"Фильтры\",\r\n                  reset: \"СБРОСИТЬ\",\r\n                },\r\n                toolbar: {\r\n                  search: \"Поиск\",\r\n                  viewColumns: \"Показать столбцы\",\r\n                    filterTable: \"Фильтр таблицы\"\r\n                },\r\n                viewColumns: {\r\n                    title: \"Показать столбцы\"\r\n                  },\r\n                selectedRows: {\r\n                  text: \"строка выбрана\"\r\n                },\r\n              },\r\n              selectableRows: (role === \"user\" || role === \"superuser\" ? 'single' : 'none'),\r\n              setRowProps: value => ({ style: { cursor: 'pointer' } }),\r\n              onRowClick: (rowData, rowMeta) => {\r\n                history.push({\r\n                  pathname:  `/app/reports/${reportsData[rowMeta.dataIndex].quality_control_id}`,\r\n               });\r\n              },\r\n              onRowsDelete: (rowMeta) => {\r\n                if (window.confirm('Вы точно хотите удалить отчет №'+ reportsData[rowMeta.data[0].dataIndex].quality_control_id +' из списка отчётов?'))\r\n                    deleteReport(reportsData[rowMeta.data[0].dataIndex].quality_control_id);\r\n                else\r\n                    getReports();\r\n              },\r\n            }}\r\n          />\r\n          }\r\n        </Grid>\r\n        </Grid>\r\n        </>\r\n    )\r\n    else return (<Loading/>)\r\n}\r\n\r\nexport default Reports;","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\pages\\customers\\Customers.js",["538","539","540"],"import React, {useState, useRef, useEffect, Suspense} from \"react\";\r\n\r\nimport { makeStyles } from \"@material-ui/styles\";\r\nimport {\r\n    Grid,\r\n    Button,\r\n    Typography,\r\n    CircularProgress\r\n  } from \"@material-ui/core\";\r\nimport MUIDataTable from \"mui-datatables\";\r\n\r\nimport CustomToolbarSelect from \"../../components/Toolbar/CustomToolbarSelect\";\r\nimport CustomToolbarSelectWithAdd from \"../../components/Toolbar/CustomToolbarSelectWithAdd\";\r\nimport PageTitle from \"../../components/PageTitle\";\r\nimport { useHistory } from \"react-router\";\r\nimport { mdiConsoleNetwork } from \"@mdi/js\";\r\n\r\nconst AddCustomerDialog = React.lazy(() => import('../../components/Dialogs/AddCustomerDialog'));\r\nconst AddFieldDialog = React.lazy(() => import('../../components/Dialogs/AddFieldDialog'));\r\nconst EditCustomerDialog = React.lazy(() => import('../../components/Dialogs/EditCustomerDialog'));\r\nconst EditFieldDialog = React.lazy(() => import('../../components/Dialogs/EditFieldDialog'));\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    tableOverflow: {\r\n      overflow: 'auto'\r\n    }\r\n}))\r\n\r\nfunction Customers() {\r\n    const [fullData, setFullData] = useState([]);\r\n    const [showModalCustomer, setShowModalCustomer] = useState(false);\r\n    const [showModalEditCustomer, setShowModalEditCustomer] = useState(false);\r\n    const [showModalEditField, setShowModalEditField] = useState(false);\r\n    const [showModalField, setShowModalField] = useState(false);\r\n    const [customer_id_addfield, setCustomer_id_addfield] = useState(0);\r\n    const [customer_name_addfield, setCustomer_name_addfield] = useState(\"\");\r\n    const [customer_short_addfield, setCustomer_short_addfield] = useState(\"\");\r\n    const [field_id, setField_id] = useState(0);\r\n    const [field_name, setField_name] = useState(\"\");\r\n    const [customer_index, setCustomer_index] = useState(null);\r\n    const [selectedRowCustomer, setSelectedRowCustomer] = useState([]);\r\n    const [selectedRowField, setSelectedRowField] = useState([[]]);\r\n    const [constant, setConstant] = useState(false);\r\n    const role = localStorage.getItem('role');\r\n    const history = useHistory();\r\n    const isDisabledAddCustomer=useRef(true)\r\n    const isDisabledEditCustomer=useRef(true)\r\n    const isDisabledAddDeposits=useRef(true)\r\n    const isDisabledEditDeposits=useRef(true)\r\n    const [error, setError] = useState(false)\r\n    const [textError, setTextError]=useState('')\r\n    const getCustomers = () => {\r\n      fetch(process.env.REACT_APP_API+'full_data_customers/?format=json', { headers : { \r\n        'Content-Type': 'application/json',\r\n        'Accept': 'application/json',\r\n        'Authorization': \"Token \" + localStorage.getItem('id_token'),\r\n       }\r\n    }) \r\n      .then(response=>response.json())\r\n      .then(data=>{\r\n          setFullData(data);\r\n      })\r\n    }\r\n\r\n    const deleteCustomer = (customer_id) => {\r\n      fetch(process.env.REACT_APP_API+'customers/'+ customer_id +'?format=json', { method: 'DELETE', headers: {'Authorization': \"Token \" + localStorage.getItem('id_token')} })\r\n    }\r\n\r\n    const deleteField = (field_id) => {\r\n      fetch(process.env.REACT_APP_API+'fields/id/'+ field_id +'?format=json', { method: 'DELETE', headers: {'Authorization': \"Token \" + localStorage.getItem('id_token')} })\r\n    }\r\n\r\n    const changeNameField = () => {\r\n      setField_id(fullData[customer_index].field[selectedRowField[customer_index][0]].id);\r\n      setField_name(fullData[customer_index].field[selectedRowField[customer_index][0]].name);\r\n      handleModalEditField();\r\n    }\r\n  \r\n    const changeNameCustomer = () => {\r\n      setCustomer_id_addfield(fullData[selectedRowCustomer[0]].id);\r\n      setCustomer_name_addfield(fullData[selectedRowCustomer[0]].name);\r\n      setCustomer_short_addfield(fullData[selectedRowCustomer[0]].short);\r\n      handleModalEditCustomer();\r\n    }\r\n  \r\n    const rowsDeleteCustomer = () => {\r\n      if (window.confirm(\"Вы точно хотите удалить \" + fullData[selectedRowCustomer[0]].name + \" из списка обществ?\")){\r\n        deleteCustomer(fullData[selectedRowCustomer[0]].id);\r\n        fullData.splice(selectedRowCustomer[0], 1);\r\n      }\r\n      else\r\n        getCustomers();\r\n      setSelectedRowCustomer([]);\r\n    }\r\n\r\n    const fieldAdd = () => {\r\n      setCustomer_id_addfield(fullData[selectedRowCustomer[0]].id);\r\n      handleModalField();\r\n    }\r\n\r\n    const rowsDeleteField = () => {\r\n      if (window.confirm(\"Вы точно хотите удалить \" + fullData[customer_index].field[selectedRowField[customer_index][0]].name + \" из списка месторождений?\")){\r\n        deleteField(fullData[customer_index].field[selectedRowField[customer_index][0]].id);\r\n        fullData[customer_index].field.splice(selectedRowField[customer_index][0], 1);\r\n      }\r\n      else\r\n        getCustomers();\r\n      setSelectedRowField([]);\r\n    }\r\n\r\n    useEffect(() => {\r\n      getCustomers();\r\n    }, [constant])\r\n\r\n    const handleModalCustomer = () => {\r\n      setError(false)\r\n      setTextError('')\r\n      isDisabledAddCustomer.current=!isDisabledAddCustomer.current\r\n      setShowModalCustomer(!showModalCustomer);\r\n    }\r\n    const handleModalField = () => {\r\n      setError(false)\r\n      setTextError('')\r\n      isDisabledAddDeposits.current=!isDisabledAddDeposits.current\r\n      setShowModalField(!showModalField);\r\n    }\r\n    const handleModalEditCustomer = () => {\r\n      setError(false)\r\n      setTextError('')\r\n      isDisabledEditCustomer.current=!isDisabledEditCustomer.current\r\n      setShowModalEditCustomer(!showModalEditCustomer);\r\n    }\r\n    const handleModalEditField = () => {\r\n      setError(false)\r\n      setTextError('')\r\n      isDisabledEditDeposits.current=!isDisabledEditDeposits.current\r\n      setShowModalEditField(!showModalEditField);\r\n    }\r\n    return (\r\n        <>\r\n        <Suspense fallback={<p style={{zIndex: \"9999\"}}></p>}>\r\n          <EditCustomerDialog active={!isDisabledEditCustomer.current} setActive={handleModalEditCustomer} customer_id={customer_id_addfield} customer_name={customer_name_addfield} customer_short={customer_short_addfield} fullData={fullData} setFullData={setFullData} isDisabledEditCustomer={isDisabledEditCustomer} error={error} setError={setError} textError={textError} setTextError={setTextError}/>\r\n          <EditFieldDialog active={!isDisabledEditDeposits.current} setActive={handleModalEditField} field_id={field_id} field_name={field_name} fullData={fullData} setFullData={setFullData} isDisabledEditDeposits={isDisabledEditDeposits} error={error} setError={setError} textError={textError} setTextError={setTextError}/>\r\n          <AddFieldDialog active={!isDisabledAddDeposits.current} setActive={handleModalField} customer_id={customer_id_addfield} fullData={fullData} setFullData={setFullData} isDisabledAddDeposits={isDisabledAddDeposits} error={error} setError={setError} textError={textError} setTextError={setTextError}/>\r\n          <AddCustomerDialog active={!isDisabledAddCustomer.current} setActive={handleModalCustomer} setFullData={setFullData} isDisabledAddCustomer={isDisabledAddCustomer} error={error} setError={setError} textError={textError} setTextError={setTextError}/>\r\n        </Suspense>\r\n        <PageTitle title=\"Общества группы\" button={<Button\r\n                variant=\"contained\"\r\n                size=\"medium\"\r\n                color=\"secondary\"\r\n                style={{outline: \"none\", backgroundColor:\"#34547A\", visibility: (role === \"user\" || role === \"superuser\" ? 'visible' : 'hidden')}}\r\n                onClick={handleModalCustomer}\r\n                >\r\n                Добавить общество\r\n            </Button>} />\r\n        <Grid container spacing={4}>\r\n        <Grid item xs={12}>\r\n          <MUIDataTable\r\n            title={<Typography variant=\"h6\">\r\n            Список обществ группы\r\n            {fullData.length === 0 && <CircularProgress size={24} style={{ marginLeft: 15, position: 'relative', top: 4 }} />}\r\n          </Typography>}\r\n            data={fullData.map(item => item.short ? [item.name + ` (${item.short})`] : [item.name])}\r\n            columns={[\"\"]}\r\n            options={{\r\n              responsive: 'vertical',\r\n              sort: false,\r\n              viewColumns: false,\r\n              filter: false,\r\n              print: false,\r\n              download: false,\r\n              pagination: false,\r\n              rowsPerPage: 1000000,\r\n              textLabels: {\r\n                body: {\r\n                  noMatch: \"Записей не найдено.\",\r\n                  toolTip: \"Сортировать\"\r\n                },\r\n                toolbar: {\r\n                  search: \"Поиск\"\r\n                },\r\n                selectedRows: {\r\n                  text: \"строка выбрана\"\r\n                },\r\n              },\r\n              expandableRows: true,\r\n              expandableRowsHeader: false,\r\n              rowsSelected: selectedRowCustomer,\r\n              setRowProps: value => ({ style: { cursor: 'pointer' } }),\r\n              selectableRowsOnClick: true,\r\n              isRowExpandable: (dataIndex, expandedRows) => {\r\n                // Prevent expand/collapse of any row if there are 1 row expanded already (but allow those already expanded to be collapsed)\r\n                if (expandedRows.data.length > 1 && expandedRows.data.filter(d => d.dataIndex === dataIndex).length === 0) return false\r\n                else return true;\r\n              },\r\n              onRowExpansionChange: (currentRowsExpanded, allRowsExpanded, rowsExpanded) => {\r\n                setCustomer_index(currentRowsExpanded[0].index);\r\n              },\r\n              onRowSelectionChange: (rowsSelectedData, allRows, rowsSelected) => {\r\n                setSelectedRowCustomer(rowsSelected);\r\n              },\r\n              customToolbarSelect: (selectedRows, displayData, setSelectedRows) => (\r\n                <CustomToolbarSelectWithAdd selectedRows={selectedRows} displayData={displayData} setSelectedRows={setSelectedRows} onChangeName={changeNameCustomer} onRowsDelete={rowsDeleteCustomer} onRowsAdd={fieldAdd}/>\r\n              ),\r\n              selectableRows: (role === \"user\" || role === \"superuser\" ? 'single' : 'none'),\r\n              selectableRowsHideCheckboxes: true,\r\n              renderExpandableRow: (rowData, rowMeta) => {\r\n                //setCustomer_index(rowMeta.dataIndex);\r\n                return (\r\n                  <React.Fragment>\r\n                    <tr>\r\n                      <td colSpan={6}>\r\n                        <MUIDataTable\r\n                          title=\"Месторождения\"\r\n                          data={fullData[rowMeta.dataIndex].field.map(item => [item.name])}\r\n                          columns={[\"\"]}\r\n                          options={{\r\n                            viewColumns: false,\r\n                            filter: false,\r\n                            print: false,\r\n                            download: false,\r\n                            sort: false,\r\n                            textLabels: {\r\n                              body: {\r\n                                noMatch: \"Записей не найдено.\",\r\n                                toolTip: \"Сортировать\"\r\n                              },\r\n                              pagination: {\r\n                                next: \"Следующая страница\",\r\n                                previous: \"Предыдущая страница\",\r\n                                rowsPerPage: \"Строк на странице:\",\r\n                                displayRows: \"из\",\r\n                              },\r\n                              toolbar: {\r\n                                search: \"Поиск\"\r\n                              },\r\n                              selectedRows: {\r\n                                text: \"строка выбрана\"\r\n                              },\r\n                            },\r\n                            rowsSelected: selectedRowField[rowMeta.dataIndex],\r\n                            onRowSelectionChange: (rowsSelectedData, allRows, rowsSelected) => {\r\n                              selectedRowField[rowMeta.dataIndex] = rowsSelected;\r\n                            },\r\n                            customToolbarSelect: (selectedRows, displayData, setSelectedRows) => (\r\n                              <CustomToolbarSelect selectedRows={selectedRows} displayData={displayData} setSelectedRows={setSelectedRows} onChangeName={changeNameField} onRowsDelete={rowsDeleteField}/>\r\n                            ),\r\n                            setRowProps: value => ({ style: { cursor: 'pointer' } }),\r\n                            onRowClick: (rowData, rowMeta) => {\r\n                              history.push({\r\n                                pathname:  `/app/strata/${fullData[customer_index].field[rowMeta.dataIndex].id}`,\r\n                             });\r\n                            },\r\n                            selectableRows: (role === \"user\" || role === \"superuser\" ? 'single' : 'none')\r\n                          }}\r\n                        />\r\n                      </td>\r\n                    </tr>\r\n                  </React.Fragment>\r\n                );\r\n              },\r\n            }}\r\n          />\r\n        </Grid>\r\n        </Grid>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Customers;","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\pages\\reports\\Report.js",["541","542","543","544","545","546","547","548","549","550","551","552","553","554","555","556","557","558","559","560","561","562","563","564","565","566","567","568","569","570","571","572","573","574"],"import React, {useEffect, useState, Suspense} from \"react\";\r\nimport {Form, Button, Badge, Row, Col} from 'react-bootstrap';\r\nimport {\r\n    Grid,\r\n    //Button,\r\n    Table, TableHead, TableRow, TableCell, TableBody, \r\n    ListSubheader,\r\n    IconButton,\r\n    Typography,\r\n    Select, MenuItem, FormControl,\r\n    CircularProgress, InputLabel,\r\n    Card, CardContent, Chip\r\n} from \"@material-ui/core\";\r\nimport { useHistory } from \"react-router\";\r\nimport {\r\n    AddCircleOutline as PlusIcon,\r\n    NotInterested as NotInterestedIcon,\r\n    RemoveCircleOutline as RemoveCircleOutlineIcon\r\n  } from \"@material-ui/icons\";\r\n\r\nimport { calc_finish_value, calc_tablet_digitalData, calc_value_rt, calc_value_memory, calc_value_memory_azimut, calc_value_rt_azimut, } from \"../calcScripts\";\r\n\r\nimport PageTitle from \"../../components/PageTitle\";\r\nimport ValidityToast from \"../../components/Toasts/ValidityToast\";\r\nimport SuccessToast from \"../../components/Toasts/SuccessToast\";\r\nimport NoChangesToast from \"../../components/Toasts/NoChangesToast\";\r\nimport { prepare_for_put_secondtable, prepare_for_post_secondtable, prepare_for_put_inform_method, prepare_for_post_inform_method } from \"../checklist/Scripts\";\r\nimport { styleSelect, styleInput, styleBlueInput, styleCell } from \"../checklist/styles\"; \r\nimport { make_indexes } from \"./Scripts\";\r\nimport { check_validity } from \"../checklist/Scripts\";\r\n\r\nconst FullnessDialog = React.lazy(() => import('../../components/Dialogs/FullnessDialog'));\r\n//const LasDialog = React.lazy(() => import('../../components/Dialogs/LasDialog'));\r\n//const WitsmlDialog = React.lazy(() => import('../../components/Dialogs/WitsmlDialog'));\r\nconst DigitalDialog = React.lazy(() => import('../../components/Dialogs/DigitalDialog'));\r\nconst DensityDialog = React.lazy(() => import('../../components/Dialogs/DensityDialog'));\r\nconst FillDataDialog = React.lazy(() => import('../../components/Dialogs/FillDataDialog'));\r\n\r\nvar tableRowIndex = 0;\r\n\r\nconst ITEM_HEIGHT = 48;\r\nconst ITEM_PADDING_TOP = 8;\r\n\r\nfunction Report(props) {\r\n    const [reportData, setReportData]= useState({});\r\n    const history = useHistory();\r\n    const role = localStorage.getItem('role');\r\n    const [hover, setHover] = useState({\r\n        index: 0,\r\n        hover: false\r\n    });\r\n    const [koefDensity, setKoefDensity] = useState(1)\r\n    const [showModalFullness, setShowModalFullness] = useState(false);\r\n    //const [showModalLas, setShowModalLas] = useState(false);\r\n    //const [showModalWitsml, setShowModalWitsml] = useState(false);\r\n    const [showModalDigital, setShowModalDigital] = useState(false);\r\n    const [showModalDensity, setShowModalDensity] = useState(false);\r\n    const [showValidityToast, setShowValidityToast] = useState(false);\r\n    const [showNoChangesToast, setShowNoChangesToast] = useState(false);\r\n    const [showSuccessToast, setShowSuccessToast] = useState(false);\r\n    const [showModalData, setShowModalData] = useState(false);\r\n\r\n    const [rows, setRows] = useState([]);\r\n    const [secondrows, setSecondrows] = useState([]);\r\n    /*const [witsmlData, setWitsmlData] = useState({\r\n        fullness_data: \"\",\r\n        curvenames: \"\",\r\n        mnemodescription: \"\",\r\n        witsml_count: null,\r\n        status: true\r\n    });\r\n    const [lasData, setLasData] = useState({\r\n        cap: \"\",\r\n        parametres: \"\",\r\n        mnemodescription: \"\",\r\n        tabledata: \"\",\r\n        las_file_count: null,\r\n        status: true\r\n    });*/\r\n    const [digitalData, setDigitalData] = useState({\r\n        type:\"LAS\",\r\n        digital_count:0,\r\n        well: \"\",\r\n        parameteres: \"\",\r\n        curve: \"\",\r\n        log_data: \"\",\r\n        wellWitsml: \"\",\r\n        parameteresWitsml: \"\",\r\n        curveWitsml: \"\",\r\n        log_dataWitsml: \"\"\r\n    });\r\n    const [densityData, setDensityData] = useState({\r\n        density: null,\r\n    });\r\n    const [fullnessData, setFullnessData] = useState({\r\n        act: \"\",\r\n        titul_list: \"\",\r\n        well_construction: \"\",\r\n        wellbore_sizes: \"\",\r\n        chrono_data: \"\",\r\n        sol_data: \"\",\r\n        dash_comp: \"\",\r\n        summary_data: \"\",\r\n        inklino_data: \"\",\r\n        main_record: \"\",\r\n        parametr: \"\",\r\n        control_record: \"\",\r\n        lqc: \"\",\r\n        calibration: \"\",\r\n        full_inf_count: null,\r\n    });\r\n    const [customer, setCustomer] = useState(\"\");\r\n    const [field, setField] = useState(\"\");\r\n    const [field_id, setField_id] = useState(null);\r\n    const [num_pad, setNum_pad] = useState(\"\");\r\n    const [cluster_id, setCluster_id] = useState(null);\r\n    const [num_well, setNum_well] = useState(\"\");\r\n    const [well_id, setWell_id] = useState(null);\r\n    const [num_wellbore, setNum_wellbore] = useState(\"\");\r\n    const [wellbore_id, setWellbore_id] = useState(null);\r\n    const [well_type, setWell_type] = useState(\"\");\r\n    const [service, setService] = useState(\"\");\r\n    const [service_id, setService_id] = useState(null);\r\n    const [pie_well, setPie_well] = useState(\"\");\r\n    const [data_type, setData_type] = useState(\"\");\r\n    const [column_shoe, setColumn_shoe] = useState(null);\r\n    const [section_interval_start, setSection_interval_start] = useState(null);\r\n    const [section_interval_end, setSection_interval_end] = useState(null);\r\n    const [diametr, setDiametr] = useState(null);\r\n    const [value, setValue] = useState(null);\r\n    const [author, setAuthor] = useState(null);\r\n    const [start_date, setStart_date] = useState(null);\r\n    const [end_date, setEnd_date] = useState(null);\r\n    const [note, setNote] = useState(\"\");\r\n    const [rowIndex, setRowIndex] = useState(null);\r\n    const [test, setTest] = useState(\"\");\r\n\r\n    const [servicesData, setServicesData] = useState([]);\r\n    const [methodsData, setMethodsData] = useState([]);\r\n    const [devicesData, setDevicesData] = useState([]);\r\n    const [customersData, setCustomersData] = useState([]);\r\n    const [fieldsData, setFieldsData] = useState([]);\r\n    const [clustersData, setClustersData] = useState([]);\r\n    const [wellsData, setWellsData] = useState([]);\r\n    const [wellboresData, setWellboresData] = useState([]);\r\n    \r\n    const [arrNumWells, setArrNumWells] = useState([]);\r\n\r\n    const [checkWellboreValues, setCheckWellboreValues] = useState(false);\r\n    const [checkWellValues, setCheckWellValues] = useState(false);\r\n    const [checkValues, setCheckValues] = useState(false);\r\n    const [checkValuesForPost, setCheckValuesForPost] = useState(false);\r\n    //const [checkLasChange, setCheckLasChange] = useState(false);\r\n    //const [checkWitsmlChange, setCheckWitsmlChange] = useState(false);\r\n    const [checkDigitalChange, setCheckDigitalChange] = useState(false);\r\n    const [checkFullnessChange, setCheckFullnessChange] = useState(false);\r\n    const [checkDensityChange, setCheckDensityChange] = useState(false);\r\n    const [dataEscort, setDataEscort]=useState('')\r\n    const [complex_definition, setComplex_definition] = useState([])\r\n    const escort=[{name:'Круглосуточно'}, {name:'ТЗ'}]\r\n    const mainData = {\r\n        customer: customer, \r\n        field: field,\r\n        field_id: reportData.field_id, \r\n        num_pad: num_pad, \r\n        num_well: num_well, \r\n        num_wellbore: num_wellbore, \r\n        pie_well: pie_well, \r\n        well_type: well_type,\r\n        service: service,\r\n        start_date: start_date,\r\n        end_date: end_date,\r\n        data_type: data_type,\r\n        section_interval_start: section_interval_start,\r\n        section_interval_end: section_interval_end,\r\n        diametr: diametr\r\n    }\r\n    const getServices = () => {\r\n        fetch(process.env.REACT_APP_API+'services/?format=json', { headers : { \r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n            'Authorization': \"Token \" + localStorage.getItem('id_token')\r\n           }\r\n        }) \r\n        .then(response=>response.json())\r\n        .then(data=>{\r\n            setServicesData(data);\r\n        })\r\n        //setMethodsData([]);\r\n    }\r\n\r\n    const getCustomers = () => {\r\n        fetch(process.env.REACT_APP_API+'quality_customers/', { headers : { \r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n            'Authorization': \"Token \" + localStorage.getItem('id_token')\r\n           }\r\n        }) \r\n        .then(response=>response.json())\r\n        .then(data=>{\r\n            setCustomersData(data);\r\n        })\r\n        //setFieldsData([]);\r\n    }\r\n\r\n    const getReport = (props) => {\r\n        fetch(process.env.REACT_APP_API+'full_get/'+ props.match.params.id +'?format=json', { headers : { \r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n            'Authorization': \"Token \" + localStorage.getItem('id_token')\r\n           }\r\n        }) \r\n        .then(response=>response.json())\r\n        .then(data=>{\r\n            setReportData(data);\r\n            setCustomer(data.customer_name);\r\n            setField(data.field_name);\r\n            setField_id(data.field_id);\r\n            setNum_pad(data.num_pad);\r\n            setCluster_id(data.cluster_id);\r\n            setNum_well(data.well_type + \" \" + data.num_well);\r\n            setWell_id(data.well_id);\r\n            setNum_wellbore(data.pie_well + \" \" + data.num_wellbore);\r\n            setWellbore_id(data.wellbore_id);\r\n            setPie_well(data.pie_well);\r\n            setWell_type(data.well_type);\r\n            setService(data.service_name);\r\n            setData_type(data.data_type);\r\n            setColumn_shoe(data.WP_CS);\r\n            setNote(data.note);\r\n            setStart_date(data.start_date)\r\n            setEnd_date(data.end_date)\r\n            setService_id(data.service_id);\r\n            setSection_interval_end(data.section_interval_end);\r\n            setSection_interval_start(data.section_interval_start);\r\n            setDiametr(data.diametr);\r\n            setValue(data.value);\r\n            setAuthor(data.author);\r\n            setDigitalData(data.digital_data);\r\n            //setLasData(data.las_file);\r\n            //setWitsmlData(data.witsml);\r\n            setFullnessData(data.full_inform);\r\n            setDensityData(data.density);\r\n            setDataEscort(data.accompaniment_type)\r\n            setComplex_definition(data.complex_definition)\r\n            data.inform_for_method && setRows(make_indexes(data.inform_for_method));\r\n            data.second_table && setSecondrows(make_indexes(data.second_table));\r\n            \r\n        })\r\n    }\r\n\r\n    const getFields = (customer_id) => {\r\n        fetch(process.env.REACT_APP_API+'fields/'+ customer_id +'?format=json', { headers : { \r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n            'Authorization': \"Token \" + localStorage.getItem('id_token')\r\n           }\r\n        }) \r\n        .then(response=>response.json())\r\n        .then(data=>{\r\n            setFieldsData(data);\r\n        })\r\n    }\r\n\r\n    const getClusters = (field_id) => {\r\n        fetch(process.env.REACT_APP_API+'clusters/'+ field_id +'?format=json', { headers : { \r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n            'Authorization': \"Token \" + localStorage.getItem('id_token')\r\n           }\r\n        }) \r\n        .then(response=>response.json())\r\n        .then(data=>{\r\n            setClustersData(data);\r\n        })\r\n    }\r\n\r\n    const getWells = (cluster_id) => {\r\n        fetch(process.env.REACT_APP_API+'wells/'+ cluster_id +'?format=json', { headers : { \r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n            'Authorization': \"Token \" + localStorage.getItem('id_token')\r\n           }\r\n        }) \r\n        .then(response=>response.json())\r\n        .then(data=>{\r\n            setWellsData(data);\r\n            var arr = []\r\n            for (const num of data.map(item => item.num_well).filter((value, index, self) => {return self.indexOf(value) === index})) {\r\n                arr.push({ \"num_well\": num, \"wells\": data.filter(item => item.num_well === num)})\r\n            }\r\n            setArrNumWells(arr)\r\n        })\r\n    }\r\n\r\n    const getWellbores = (well_id) => {\r\n        fetch(process.env.REACT_APP_API+'wellbores/'+ well_id +'?format=json', { headers : { \r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n            'Authorization': \"Token \" + localStorage.getItem('id_token')\r\n           }\r\n        }) \r\n        .then(response=>response.json())\r\n        .then(data=>{\r\n            setWellboresData(data);\r\n        })\r\n    }\r\n\r\n    const getMethods = (service_id) => {\r\n        fetch(process.env.REACT_APP_API+'methods/'+ service_id +'?format=json', { headers : { \r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n            'Authorization': \"Token \" + localStorage.getItem('id_token')\r\n           }\r\n        }) \r\n        .then(response=>response.json())\r\n        .then(data=>{\r\n            setMethodsData(data);\r\n        })\r\n    }\r\n\r\n    const getDevices = (service_id) => {\r\n        fetch(process.env.REACT_APP_API+'service_devices/'+ service_id +'?format=json', { headers : { \r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n            'Authorization': \"Token \" + localStorage.getItem('id_token')\r\n           }\r\n        }) \r\n        .then(response=>response.json())\r\n        .then(data=>{\r\n            setDevicesData(data);\r\n        })\r\n    }\r\n\r\n    \r\n\r\n\r\n\r\n    const postReport = (quality_control_id) => {\r\n        if(check_validity(customer, field, num_pad, num_well, num_wellbore, data_type, section_interval_start, section_interval_end, rows)) {\r\n        var split_wellbore = num_wellbore.split(\" \");\r\n        fetch(process.env.REACT_APP_API+'full_post/?format=json',{\r\n            method: 'PUT',\r\n            headers:{\r\n                'Accept':'application/json',\r\n                'Content-Type':'application/json',\r\n                'Authorization': \"Token \" + localStorage.getItem('id_token')\r\n            },\r\n            body: JSON.stringify({\r\n                \"quality_control_id\": quality_control_id,\r\n                \"value\": value,\r\n                \"density\": densityData,\r\n                \"id_wellbore\": wellboresData.find(i => i.num_wellbore === split_wellbore[1] && i.pie_well === split_wellbore[0]).id,\r\n                \"section_interval_start\": section_interval_start,\r\n                \"section_interval_end\": section_interval_end,\r\n                \"service_id\": servicesData.find(s => s.name === service).id,\r\n                \"data_type\": data_type, \r\n                \"note\": note,\r\n                \"start_date\": start_date,\r\n                \"end_date\": end_date,\r\n                \"WP_CS\": column_shoe,\r\n                \"full_inform\": fullnessData,\r\n                \"digital_data\": digitalData,\r\n                //\"las_file\": lasData,\r\n                //\"witsml\": witsmlData,\r\n                \"inform_for_method\": prepare_for_post_inform_method(rows, methodsData, devicesData),\r\n                \"second_table\": prepare_for_post_secondtable(secondrows, methodsData),\r\n                \"accompaniment_type\": dataEscort,\r\n                \"complex_definition\": complex_definition,\r\n            }) \r\n        })\r\n        .then((response) => {\r\n            if(!response.ok) throw new Error(response.status);\r\n            else alert(\"Сохранение прошло успешно\");\r\n          })\r\n        console.log(JSON.stringify({\r\n            \"value\": value,\r\n            \"density\": densityData,\r\n            \"id_wellbore\": wellboresData.find(i => i.num_wellbore === split_wellbore[1] && i.pie_well === split_wellbore[0]).id,\r\n            \"section_interval_start\": section_interval_start,\r\n            \"section_interval_end\": section_interval_end,\r\n            \"service_id\": servicesData.find(s => s.name === service).id,\r\n            \"data_type\": data_type,\r\n            \"note\": note,\r\n            \"start_date\": start_date,\r\n            \"end_date\": end_date,\r\n            \"full_inform\": fullnessData,\r\n            \"digital_data\": digitalData,\r\n            //\"las_file\": lasData,\r\n            //\"witsml\": witsmlData,\r\n            \"inform_for_method\": prepare_for_post_inform_method(rows, methodsData, devicesData),\r\n            \"second_table\": prepare_for_post_secondtable(secondrows, methodsData)\r\n        }))\r\n        setCheckValuesForPost(false);\r\n        } else { setShowValidityToast(true);};\r\n    }\r\n\r\n    const putReport = (props) => {\r\n        postReport(props.match.params.id)\r\n    }\r\n\r\n    const deleteInformMethod = (id) => {\r\n        fetch(process.env.REACT_APP_API+'inform_for_method/id/'+ id +'?format=json', { method: 'DELETE', headers:{'Authorization': \"Token \" + localStorage.getItem('id_token')} })\r\n    }\r\n\r\n    const getExcel = (props) => {\r\n        fetch(process.env.REACT_APP_API+'save_file_xlsx/'+ props.match.params.id +'?format=json', { headers : { \r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n            'Authorization': \"Token \" + localStorage.getItem('id_token')\r\n           }\r\n        }) \r\n        .then(response=>response.blob())\r\n        .then(data=>{\r\n            const exselURL = window.URL.createObjectURL(data);\r\n            const tempLink = document.createElement('a');\r\n            tempLink.href = exselURL;\r\n            tempLink.download=String(`Отчет №${props.match.params.id}`);\r\n            tempLink.click();\r\n        })\r\n    }\r\n\r\n    const getPdf = (props) => {\r\n        fetch(process.env.REACT_APP_API+'save_file_pdf/'+ props.match.params.id +'?format=json', { headers : { \r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n            'Authorization': \"Token \" + localStorage.getItem('id_token')\r\n           }\r\n        }) \r\n        .then(response=>response.blob())\r\n        .then(data=>{\r\n            const pdfURL = window.URL.createObjectURL(data);\r\n            const tempLink = document.createElement('a');\r\n            tempLink.href = pdfURL;\r\n            tempLink.download=String(`Отчет №${props.match.params.id}`);\r\n            tempLink.click();\r\n        })\r\n    }\r\n\r\n    function updateBaseValues(e){\r\n        var inputName = e.target.name;\r\n        var inputValue = e.target.value;\r\n        if(inputName === 'customer'){\r\n                setCustomer(inputValue);\r\n                getFields(customersData.find(i => i.name === inputValue).id)\r\n           }\r\n        else if(inputName === 'field'){\r\n               setField(inputValue);\r\n               getClusters(fieldsData.find(i => i.name === inputValue).id);\r\n            }\r\n        else if(inputName === 'num_pad'){\r\n                setNum_pad(inputValue);\r\n                getWells(clustersData.find(i => i.name === inputValue).id);\r\n            }\r\n        else if(inputName === 'num_well'){\r\n                var split_well = inputValue.split(\" \");\r\n                setNum_well(inputValue);\r\n                getWellbores(wellsData.find(i => i.num_well === split_well[1] && i.well_type === split_well[0]).id);\r\n            }\r\n        else if(inputName === 'num_wellbore'){\r\n                var split_wellbore = inputValue.split(\" \");\r\n                setNum_wellbore(inputValue);\r\n                setPie_well(wellboresData.find(i => i.num_wellbore === split_wellbore[1] && i.pie_well === split_wellbore[0]).pie_well);\r\n                setDiametr(wellboresData.find(i => (i.num_wellbore === split_wellbore[1] || i.num_wellbore === split_wellbore[2]) && i.pie_well === split_wellbore[0]).diametr)\r\n            }\r\n        else if(inputName === 'well_type'){\r\n                setWell_type(inputValue);\r\n            }\r\n        else if(inputName === 'service'){\r\n                setService(inputValue);\r\n                setService_id(servicesData.find(s => s.name === inputValue).id)\r\n                getMethods(servicesData.find(i => i.name === inputValue).id);\r\n                getDevices(servicesData.find(i => i.name === inputValue).id);\r\n            }\r\n        else if(inputName === 'pie_well'){\r\n                setPie_well(inputValue);\r\n            }\r\n        else if(inputName === 'data_type'){\r\n                setData_type(inputValue);\r\n                setCheckValuesForPost(true);\r\n            }\r\n        else if(inputName === 'section_interval_start'){\r\n                inputValue === \"\" ? setSection_interval_start(null) : setSection_interval_start(inputValue);\r\n                setCheckDensityChange(true);\r\n            }\r\n        else if(inputName === 'section_interval_end'){\r\n                inputValue === \"\" ? setSection_interval_end(null) : setSection_interval_end(inputValue);\r\n                setCheckValuesForPost(true);\r\n            }\r\n        else if(inputName === 'diametr'){\r\n                inputValue === \"\" ? setDiametr(null) : setDiametr(inputValue);\r\n            }\r\n        else if(inputName === 'column_shoe'){\r\n                inputValue === \"\" ? setColumn_shoe(null) : setColumn_shoe(inputValue);\r\n                inputValue === \"\" ? setSection_interval_start(null) : setSection_interval_start(inputValue);\r\n                setCheckWellboreValues(true)\r\n            }\r\n        else if(inputName === 'note'){\r\n                setNote(inputValue)\r\n                setCheckDensityChange(true)\r\n            }\r\n        else if(inputName === 'start_date'){\r\n                setStart_date(inputValue)\r\n                setCheckDensityChange(true)\r\n            }\r\n        else if(inputName === 'end_date'){\r\n                setEnd_date(inputValue)\r\n                setCheckDensityChange(true)\r\n            }\r\n        else if(inputName === 'escort'){\r\n            setDataEscort(inputValue)\r\n        }\r\n        else if (inputName === 'complex_definition'){\r\n            setComplex_definition(inputValue)\r\n        }\r\n    }\r\n\r\n    /*const updateWitsmlValues = (data) => {\r\n        setWitsmlData(data);\r\n        if (data.status === false && lasData.status === false)\r\n            setLasData({...lasData, \"status\": true })\r\n        setCheckWitsmlChange(true);\r\n    }\r\n    const updateLasValues = (data) => {\r\n        setLasData(data);\r\n        if (data.status === false && witsmlData.status === false)\r\n            setWitsmlData({...witsmlData, \"status\": true })\r\n        setCheckLasChange(true);\r\n    }*/\r\n    const updateFullnessValues = (data) => {\r\n        setFullnessData(data);\r\n        setCheckFullnessChange(true);\r\n    }\r\n    const updateDensityValues = (data) => {\r\n        setDensityData(data);\r\n        setCheckDensityChange(true);\r\n    }\r\n\r\n     const deleteData = (index) => {\r\n        if(rows.length > 0){\r\n            var updatedRows = [...rows]\r\n            var updatedRowsSecond = [...secondrows]\r\n            var indexToRemove = updatedRows.findIndex(x => x.index === index);\r\n            if(index > -1 && indexToRemove >= 0){\r\n                if(updatedRows[indexToRemove].id !== null) deleteInformMethod(updatedRows[indexToRemove].id)\r\n                updatedRows.splice(indexToRemove, 1);\r\n                updatedRowsSecond.splice(indexToRemove, 1);\r\n                setRows(make_indexes(updatedRows));\r\n                setSecondrows(make_indexes(updatedRowsSecond));\r\n            }\r\n            setCheckValues(true);\r\n            setValue(parseFloat(calc_finish_value(rows, digitalData.digital_count, digitalData.type, fullnessData.full_inf_count).toFixed(2)))\r\n         }\r\n    }\r\n\r\n    const handleModalFullness = () => {\r\n        setShowModalFullness(!showModalFullness);\r\n    }\r\n    /*const handleModalLas = () => {\r\n        setShowModalLas(!showModalLas);\r\n    }\r\n    const handleModalWitsml = () => {\r\n        setShowModalWitsml(!showModalWitsml);\r\n    }*/\r\n    const handleModalDigital = () => {\r\n        setShowModalDigital(!showModalDigital);\r\n    }\r\n    const handleModalDensity = () => {\r\n        setShowModalDensity(!showModalDensity);\r\n    }\r\n    const handleValidityToast = () => {\r\n        setShowValidityToast(!showValidityToast);\r\n    }\r\n    const handleNoChangesToast = () => {\r\n        setShowNoChangesToast(!showNoChangesToast);\r\n    }\r\n    const handleSuccessToast = () => {\r\n        setShowSuccessToast(!showSuccessToast);\r\n    }\r\n    const handleModalData = () => {\r\n        setShowModalData(!showModalData);\r\n    }\r\n\r\n    const updateData = (row, secondrow) => {\r\n        if (rows.length === 0) {\r\n            setRows([{...row, index: 0}])\r\n            setSecondrows([{...secondrow, index: 0}])\r\n        }\r\n        if (rows.length !== 0 && row.index === null){\r\n            tableRowIndex = parseFloat(tableRowIndex) + 1\r\n            var updatedRows = [...rows]\r\n            var updatedRowsSecond = [...secondrows]\r\n            updatedRows[tableRowIndex] = {...row, index: tableRowIndex}\r\n            updatedRowsSecond[tableRowIndex] = {...secondrow, index: tableRowIndex}\r\n            setRows(updatedRows);\r\n            setSecondrows(updatedRowsSecond);\r\n        }\r\n        if (rows.length !== 0 && row.index !== null){\r\n            var updatedRows = [...rows]\r\n            var updatedRowsSecond = [...secondrows]\r\n            updatedRows[row.index] = row\r\n            updatedRowsSecond[secondrow.index] = secondrow\r\n            setRows(updatedRows);\r\n            setSecondrows(updatedRowsSecond);\r\n        }\r\n        if (rows.length !== 0) {\r\n            setValue(calc_finish_value(rows, digitalData.digital_count, digitalData.type, fullnessData.full_inf_count).toFixed(1))\r\n        }\r\n        setCheckValues(true);\r\n    }\r\n\r\n    const colorForChip = (m_value) => {\r\n        if (m_value < 50)\r\n            return \"#f5364c\"\r\n        else if (m_value < 85)\r\n            return \"#f9bd27\"\r\n        else return \"#22bd53\"\r\n    }\r\n\r\n    useEffect(() => {\r\n        getServices();\r\n        getCustomers();\r\n        getReport(props);\r\n    }, [test])\r\n\r\n    useEffect(() => {\r\n        rows.length !== 0 && (tableRowIndex = rows.length - 1) \r\n    }, [rows])\r\n\r\n    useEffect(() => {\r\n        if (reportData.customer_id !== undefined){\r\n        getFields(reportData.customer_id);\r\n        getClusters(reportData.field_id);\r\n        getWells(reportData.cluster_id);\r\n        getWellbores(reportData.well_id);\r\n        reportData.service_id !== undefined && getMethods(reportData.service_id);\r\n        reportData.service_id !== undefined && getDevices(reportData.service_id);\r\n        }\r\n    }, [reportData])\r\n    useEffect(()=>{\r\n        for (let i=0;i<secondrows.length; i+=1){\r\n            if (mainData.data_type === \"Реального времени\")\r\n                if (rows[i].method.split(\" \")[0] !== \"Азимутальный\"){\r\n                    rows[i].method_value=parseFloat(calc_value_rt(secondrows[i], fullnessData.lqc, digitalData.type).toFixed(2))\r\n                }\r\n                else{\r\n                    rows[i].method_value=parseFloat(calc_value_rt_azimut(secondrows[i], fullnessData.lqc).toFixed(2))\r\n                }\r\n            if (mainData.data_type === \"Из памяти прибора\")\r\n                if (rows[i].method.split(\" \")[0] !== \"Азимутальный\")\r\n                    rows[i].method_value=parseFloat(calc_value_memory(secondrows[i], fullnessData.lqc, rows[i].koef_shod).toFixed(2))\r\n                else\r\n                    rows[i].method_value=parseFloat(calc_value_memory_azimut(secondrows[i], fullnessData.lqc, rows[i].koef_shod, digitalData.type).toFixed(2))\r\n        }\r\n        setValue(parseFloat(calc_finish_value(rows, digitalData.digital_count, digitalData.type, fullnessData.full_inf_count).toFixed(2)))\r\n    }, [digitalData, fullnessData, mainData.data_type])\r\n    useEffect(() => {\r\n        if (densityData.density>=3){\r\n            setKoefDensity(1)     \r\n        }\r\n        else if (densityData.density==2){\r\n            setKoefDensity(0.75)\r\n        }\r\n        else if (densityData.density==1){\r\n            setKoefDensity(0.5)\r\n    } \r\n        else if (densityData.density==0){\r\n            setKoefDensity(0)\r\n    }  \r\n        setValue(calc_finish_value(rows, digitalData.digital_count, digitalData.type, fullnessData.full_inf_count))\r\n    }, [rows, densityData.density])\r\n\r\n    \r\n    console.log('rows', rows)\r\n    return (\r\n        <>\r\n            <Suspense fallback={<p style={{zIndex: \"9999\"}}></p>}>\r\n            <FullnessDialog active={showModalFullness} setActive={handleModalFullness} fullness={fullnessData} fullnessData={fullnessData} setFullnessData={setFullnessData}/>\r\n                {/*<LasDialog active={showModalLas} setActive={handleModalLas} las={lasData} role={role} onUpdate={updateLasValues}/>\r\n                <WitsmlDialog active={showModalWitsml} setActive={handleModalWitsml} witsml={witsmlData} role={role} onUpdate={updateWitsmlValues}/>*/}\r\n                <FillDataDialog \r\n                        active={showModalData} \r\n                        setActive={handleModalData} \r\n                        methodsData = {methodsData} \r\n                        devicesData = {devicesData} \r\n                        mainData = {mainData} \r\n                        row={rowIndex !== 999999 ? rows[rowIndex] : {}} \r\n                        secondrow={rowIndex !== 999999 ? secondrows[rowIndex] : {}} \r\n                        fullnessAct={fullnessData.act} \r\n                        service_id={service_id} \r\n                        lqc={fullnessData.lqc}\r\n                        onUpdate={updateData} \r\n                        onDelete={deleteData}\r\n                        digitalData_type={digitalData.type}\r\n                    />\r\n                    {/*<LasDialog active={showModalLas} setActive={handleModalLas} las={lasData} onUpdate={updateLasValues}/>\r\n                    <WitsmlDialog active={showModalWitsml} setActive={handleModalWitsml} witsml={witsmlData} onUpdate={updateWitsmlValues}/>*/}\r\n                    <DigitalDialog active={showModalDigital} setActive={handleModalDigital} digital={digitalData} digitalData={digitalData} setDigitalData={setDigitalData}/>\r\n                <DensityDialog active={showModalDensity} setActive={handleModalDensity} density_data={densityData} role={role} onUpdate={updateDensityValues}/>\r\n                \r\n            </Suspense>\r\n            <ValidityToast active={showValidityToast} setActive={handleValidityToast}/>\r\n            <NoChangesToast active={showNoChangesToast} setActive={handleNoChangesToast}/>\r\n            <SuccessToast active={showSuccessToast} setActive={handleSuccessToast}/>\r\n            <PageTitle title={customer === \"\" ? <>Загрузка отчёта<CircularProgress size={24} style={{ marginLeft: 15, position: 'relative', top: 4 }} /></> \r\n            : (data_type === \"\" && \"\" || data_type === \"Реального времени\" && \"Оперативный \" || data_type === \"Из памяти прибора\" && \"Финальный \")\r\n            + \"отчёт №\" + reportData.quality_control_id + \" по месторождению \"+ reportData.field_name + \" скважины №\" + reportData.num_well}/>\r\n            <Grid container spacing={4}>\r\n            <Grid item xs={12}>\r\n            <Card\r\n                sx={{ minWidth: 275 }}\r\n                elevation={4}\r\n                style={{\r\n                  borderRadius: \"15px\",\r\n                  backgroundColor: \"#34547A\",\r\n                  color: \"#fff\",\r\n                }}\r\n              >\r\n            <CardContent style={{ padding: \"0.5rem 1.5rem 0 1.5rem\", color:\"white\"}}>\r\n                <Form.Group as={Row} style={{paddingBottom:\"0.5rem\"}}>\r\n                        <Col xs=\"2\">\r\n                            <FormControl fullWidth variant=\"standard\">\r\n                                <InputLabel id=\"customer\" style={styleInput}>Общество</InputLabel>\r\n                                    <Select labelId=\"customer\" name=\"customer\" label=\"Общество\" size=\"small\" style={styleSelect} value={customer} onChange={e => updateBaseValues(e)}>\r\n                                        <MenuItem hidden disabled></MenuItem>\r\n                                        {customersData.map(item => (<MenuItem key={item.name} value={item.name} style={{fontSize:\"20px\"}}>{item.name}</MenuItem>))}\r\n                                    </Select>\r\n                            </FormControl>\r\n                        </Col>\r\n                        <Col xs=\"2\">\r\n                            <FormControl fullWidth variant=\"standard\">\r\n                                <InputLabel id=\"field\" style={styleInput}>Месторождение</InputLabel>\r\n                                    <Select labelId=\"field\" name=\"field\" label=\"Месторождение\" size=\"small\" style={styleSelect} value={field} onChange={e => updateBaseValues(e)}>\r\n                                        <MenuItem hidden disabled></MenuItem>\r\n                                        {fieldsData.map(item => (<MenuItem key={item.name} value={item.name} style={{fontSize:\"20px\"}}>{item.name}</MenuItem>))}\r\n                                    </Select>\r\n                            </FormControl>\r\n                        </Col>\r\n                        <Col xs=\"1\">\r\n                            <FormControl fullWidth variant=\"standard\">\r\n                                <InputLabel id=\"num_pad\" style={styleInput}>Куст</InputLabel>\r\n                                    <Select labelId=\"num_pad\" name=\"num_pad\" label=\"Куст\" size=\"small\" style={styleSelect} value={num_pad} onChange={e => updateBaseValues(e)}>\r\n                                        <MenuItem hidden disabled></MenuItem>\r\n                                        {clustersData.map(item => {return <MenuItem key={item.name} value={item.name} style={{fontSize:\"20px\"}}>{item.name}</MenuItem>})}\r\n                                    </Select>\r\n                            </FormControl>\r\n                        </Col>\r\n                        <Col xs=\"2\">\r\n                            <FormControl fullWidth variant=\"standard\">\r\n                                <InputLabel htmlFor=\"num_well\" style={styleInput}>Скважина</InputLabel>\r\n                                    <Select labelId=\"num_well\" name=\"num_well\" label=\"Скважина\" size=\"small\" style={styleSelect} value={num_well} onChange={e => updateBaseValues(e)}>\r\n                                        <MenuItem hidden disabled></MenuItem>\r\n                                        {arrNumWells.map(item => {return [<ListSubheader style={{pointerEvents: \"none\"}}>{\"Скважина \" + item.num_well}</ListSubheader>, item.wells.map(i => {return <MenuItem key={i.well_type + i.num_well} value={i.well_type + \" \" + i.num_well} style={{fontSize:\"20px\"}}>{i.well_type + \" \" + i.num_well}</MenuItem>})]})}\r\n                                    </Select>\r\n                            </FormControl>\r\n                        </Col>\r\n                        <Col xs=\"2\">\r\n                            <FormControl fullWidth variant=\"standard\">\r\n                                <InputLabel id=\"num_wellbore\" style={styleInput}>Ствол</InputLabel>\r\n                                    <Select labelId=\"num_wellbore\" name=\"num_wellbore\" label=\"Ствол\" size=\"small\" style={styleSelect} value={num_wellbore} onChange={e => updateBaseValues(e)}>\r\n                                        <MenuItem hidden disabled></MenuItem>\r\n                                        {wellboresData.map(item => {return <MenuItem key={item.num_wellbore + item.pie_well} value={item.pie_well + \" \" + item.num_wellbore} style={{fontSize:\"20px\"}}>{item.pie_well + \" \" + item.num_wellbore}</MenuItem>})\r\n                                        }\r\n                                    </Select>\r\n                            </FormControl>\r\n                        </Col>\r\n                        <Form.Label column xs=\"2\" style={{textAlign:\"right\", fontSize: \"22px\", fontWeight:\"700\", paddingTop:\"1.25rem\"}}>\r\n                            <NotInterestedIcon style={{fontSize:\"30px\"}}/>диаметр долота, {diametr} мм\r\n                        </Form.Label>\r\n                        <Col xs=\"1\" >\r\n                            <Button variant=\"yellow\" disabled={role === (\"viewer\" || \"superviewer\")} style={{minHeight:\"100%\", minWidth:\"100%\", marginTop:\"1rem\"}} onClick={() => putReport(props)}>Сохранить</Button>\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row}>\r\n                        <Col xs=\"4\"></Col>\r\n                        <Form.Label column xs=\"2\" style={{textAlign:\"center\", verticalAlign:\"top\", fontSize: \"22px\", fontWeight:\"700\"}}>\r\n                        Башмак колонны, м\r\n                        </Form.Label>\r\n                        <Form.Label column xs=\"2\" style={{textAlign:\"center\", verticalAlign:\"top\", fontSize: \"22px\", fontWeight:\"700\"}}>\r\n                        Интервал секции, м\r\n                        </Form.Label>\r\n                        <Col xs=\"1\"></Col>\r\n                        <Form.Label column xs=\"2\" style={{textAlign:\"center\", verticalAlign:\"top\", fontSize: \"22px\", fontWeight:\"700\"}}>\r\n                        Дата ГИС\r\n                        </Form.Label>\r\n                        <Col xs=\"1\"></Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} style={{paddingBottom:\"0.5rem\"}}>\r\n                        <Col xs=\"2\">\r\n                            <FormControl fullWidth variant=\"outlined\" size=\"small\">\r\n                                <InputLabel id=\"service\" style={styleInput}>Сервисная компания</InputLabel>\r\n                                    <Select labelId=\"service\" name=\"service\" style={styleSelect} size=\"small\" label=\"Сервисная компания\" value={service} onChange={e => updateBaseValues(e)}>\r\n                                        <MenuItem hidden disabled></MenuItem>\r\n                                        {servicesData.map(item => (<MenuItem key={item.name} value={item.name} style={{fontSize:\"20px\"}}>{item.name}</MenuItem>))}\r\n                                    </Select>\r\n                            </FormControl>\r\n                        </Col>\r\n                        <Col xs=\"2\">\r\n                            <FormControl fullWidth variant=\"outlined\" size=\"small\">\r\n                                <InputLabel id=\"data_type\" style={styleInput}>Вид данных</InputLabel>\r\n                                    <Select labelId=\"data_type\" name=\"data_type\" style={styleSelect} size=\"small\" label=\"Вид данных\" value={data_type} onChange={e => updateBaseValues(e)}>\r\n                                        <MenuItem key=\"1\" value=\"Реального времени\" style={{fontSize:\"20px\"}}>Реального времени</MenuItem>\r\n                                        <MenuItem key=\"2\" value=\"Из памяти прибора\" style={{fontSize:\"20px\"}}>Из памяти прибора</MenuItem>\r\n                                    </Select>\r\n                            </FormControl>\r\n                        </Col>\r\n                        <Col xs=\"2\">\r\n                            <div style={{width: \"50%\", margin: \"auto\"}}>\r\n                                <Form.Control id=\"column_shoe\" name=\"column_shoe\" style={styleBlueInput} value={column_shoe} type=\"number\" step=\"0.01\" onChange={e => updateBaseValues(e)}/>\r\n                            </div>\r\n                        </Col>\r\n                        <Col xs=\"1\">\r\n                            <Form.Control id=\"section_interval_start\" name=\"section_interval_start\" style={styleBlueInput} value={section_interval_start} type=\"number\" step=\"0.01\" onChange={e => updateBaseValues(e)}/>\r\n                        </Col>\r\n                        <Col xs=\"1\">\r\n                            <Form.Control id=\"section_interval_end\" name=\"section_interval_end\" style={styleBlueInput} value={section_interval_end} type=\"number\" step=\"0.01\" onChange={e => updateBaseValues(e)}/>\r\n                        </Col>\r\n                        <Col xs=\"2\">\r\n                        <Form.Control\r\n                            disabled={!(role === \"user\" || role === \"superuser\")}\r\n                            id=\"start_date\"\r\n                            name=\"start_date\"\r\n                            value={start_date}\r\n                            onChange={(e) => updateBaseValues(e)}\r\n                            style={styleBlueInput}\r\n                            type=\"date\"\r\n                        />\r\n                        </Col>\r\n                        <Col xs=\"2\">\r\n                        <Form.Control\r\n                            disabled={!(role === \"user\" || role === \"superuser\")}\r\n                            id=\"end_date\"\r\n                            name=\"end_date\"\r\n                            value={end_date}\r\n                            onChange={(e) => updateBaseValues(e)}\r\n                            style={styleBlueInput}\r\n                            type=\"date\"\r\n                        />\r\n                        </Col>\r\n                        \r\n                    </Form.Group>\r\n                    <Form.Group as={Row} style={{paddingBottom:\"0.5rem\"}}>\r\n                    <Col xs=\"2\">\r\n                    <FormControl xs='2' fullWidth variant=\"outlined\" size=\"small\">\r\n                                <InputLabel id=\"escort\" style={styleInput}>Сопровождение</InputLabel>\r\n                                    <Select labelId=\"escort\" name=\"escort\" style={styleSelect} size=\"small\" label=\"Сопровождения\" value={dataEscort} onChange={e => updateBaseValues(e)}>\r\n                                        <MenuItem hidden disabled></MenuItem>\r\n                                        {escort.map(item => (<MenuItem key={item.name} value={item.name} style={{fontSize:\"20px\"}}>{item.name}</MenuItem>))}\r\n                                    </Select>\r\n                            </FormControl>\r\n                            </Col>\r\n                    <Col xs=\"1\">\r\n                            <Button variant=\"yellow\" style={{height:\"100%\", width:\"47%\", float:\"left\"}} onClick={() => getExcel(props)} >Excel</Button>\r\n                            <Button variant=\"yellow\" style={{height:\"100%\", width:\"47%\", float:\"right\"}} onClick={() => getPdf(props)}>PDF</Button>\r\n                    </Col>\r\n                    </Form.Group>\r\n            </CardContent>\r\n        </Card>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <Card\r\n                sx={{ minWidth: 275 }}\r\n                elevation={4}\r\n                style={{\r\n                  borderRadius: \"15px\",\r\n                  backgroundColor: \"#3F6694\",\r\n                  color: \"#fff\",\r\n                }}\r\n              >\r\n                <CardContent style={{ paddingBottom: \"0\", paddingTop:\"1rem\", fontWeight:\"600\" }}>\r\n                  <Form.Group as={Row} style={{marginBottom:\"1rem\"}}>\r\n                    <Form.Label column sm=\"4\" style={{textAlign:\"center\", fontSize:\"22px\"}}>\r\n                    Автоматическое определение комплекса\r\n                    </Form.Label>\r\n                    <Col sm=\"8\" style={{verticalAlign:\"middle\"}}>\r\n                    <Form.Control as=\"select\" id=\"complex_definition\" name=\"complex_definition\" style={styleBlueInput} value={complex_definition} onChange={e => updateBaseValues(e)}>\r\n                            <option></option>\r\n                            <option>ГК+УЭС</option>\r\n                            <option>Полный</option>\r\n                            <option>Специальный</option>\r\n                            <option>Отсутствует</option>\r\n                        </Form.Control>\r\n                    </Col>\r\n                  </Form.Group>\r\n                </CardContent>\r\n              </Card>\r\n                </Grid>\r\n                \r\n            <Grid item xs={12}>\r\n            <Card\r\n                sx={{ minWidth: 275 }}\r\n                elevation={4}\r\n                style={{\r\n                  borderRadius: \"15px\",\r\n                  backgroundColor: \"#34547A\",\r\n                  color: \"#fff\",\r\n                }}\r\n              >\r\n            <CardContent style={{ paddingBottom: \"0\", color:\"white\"}}>\r\n                <Row>\r\n                    <Col xs={4} style={{borderRight:\"2px solid #6985AF\"}}>\r\n                    <Button variant=\"deepblueadd\" size=\"large\" onClick={handleModalFullness} style={{width: \"100%\", height: \"100%\", fontSize: \"18px\"}}>Полнота предоставления данных<br/> на планшете&nbsp;&nbsp;\r\n                    <Badge variant=\"light\">{fullnessData.full_inf_count !== null ? fullnessData.full_inf_count + \"%\" : \"%\"}</Badge></Button>\r\n                    </Col>\r\n                    {/*<Col xs={3} style={{borderRight:\"2px solid #6985AF\"}}>\r\n                    <Button variant=\"deepblueadd\" size=\"large\" onClick={handleModalLas} style={{width: \"100%\", height: \"100%\", fontSize: \"18px\", display:\"inline-block\"}}>Оформление Las-файла&nbsp;&nbsp;\r\n                    <Badge variant=\"light\">{lasData.status === true ? (lasData.las_file_count !== null ? lasData.las_file_count + \"%\" : \"%\") : \"отсутствует\"}</Badge></Button>\r\n                    </Col>\r\n                    <Col xs={3} style={{borderRight:\"2px solid #6985AF\"}}>\r\n                    <Button variant=\"deepblueadd\" size=\"large\" onClick={handleModalWitsml} style={{width: \"100%\", height: \"100%\", fontSize: \"18px\"}}>Корректность загрузки данных реального времени (WITSML)&nbsp;&nbsp;\r\n                    <Badge variant=\"light\">{witsmlData.status === true ? (witsmlData.witsml_count !== null ? witsmlData.witsml_count + \"%\" : \"%\") : \"отсутствует\"}</Badge></Button>\r\n                    </Col>*/}\r\n                    <Col xs={4} style={{borderRight:\"2px solid #6985AF\"}}>\r\n                    <Button variant=\"deepblueadd\" size=\"large\" onClick={handleModalDigital} style={{width: \"100%\", height: \"100%\", fontSize: \"18px\"}}>Полнота предоставления цифровых данных&nbsp;&nbsp;\r\n                    <Badge variant=\"light\">{digitalData.type+' '+digitalData.digital_count+ \"%\"}</Badge></Button>\r\n                    </Col>\r\n                    <Col xs={4}>\r\n                    <Button variant=\"deepblueadd\" size=\"large\" onClick={handleModalDensity} style={{width: \"100%\", height: \"100%\", fontSize: \"18px\"}}>Плотность данных:&nbsp;&nbsp;\r\n                    <Badge variant=\"light\">{densityData.density !== null ? densityData.density + \" точ. на метр\" : \"точ. на метр\"}</Badge></Button>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                <Table>\r\n                        <TableHead style={{backgroundColor:\"#34547A\"}}>\r\n                            <TableRow>\r\n                                <TableCell align=\"center\" style={{width:\"50px\", color:\"white\", borderBottom:\"2px solid #6985AF\"}}>\r\n                                <IconButton\r\n                                    aria-haspopup=\"false\"\r\n                                    color=\"innherit\"\r\n                                    onClick={() => {setRowIndex(999999); handleModalData();}}\r\n                                    style={{outline: \"none\", visibility: (role === \"user\" || role === \"superuser\" ? 'visible' : 'hidden')}}\r\n                                    >\r\n                                    <PlusIcon style={{color:\"white\"}}/>\r\n                                </IconButton>\r\n                                </TableCell>\r\n                                <TableCell align=\"center\" style={{width:\"450px\", color:\"white\", borderBottom:\"2px solid #6985AF\", fontSize:\"18px\"}}>Метод</TableCell>\r\n                                <TableCell align=\"center\" style={{width: \"150px\", color:\"white\", borderBottom:\"2px solid #6985AF\", fontSize:\"18px\"}}>Тип прибора</TableCell>\r\n                                <TableCell align=\"center\" style={{color:\"white\", borderBottom:\"2px solid #6985AF\", fontSize:\"18px\"}}>Номер прибора</TableCell>\r\n                                <TableCell align=\"center\" style={{color:\"white\", borderBottom:\"2px solid #6985AF\", fontSize:\"18px\"}}>Дата калибровки прибора</TableCell>\r\n                                <TableCell align=\"center\" style={{width: \"200px\", color:\"white\", borderBottom:\"2px solid #6985AF\", fontSize:\"18px\"}}>Интервал записи (факт), м</TableCell>\r\n                                <TableCell align=\"center\" style={{width: \"300px\", color:\"white\", borderBottom:\"2px solid #6985AF\", fontSize:\"18px\"}}>Коэффициент сходимости данных</TableCell>\r\n                                <TableCell align=\"center\" style={{color:\"white\", borderBottom:\"2px solid #6985AF\", fontSize:\"18px\"}}>Причина расхождения данных</TableCell>\r\n                                <TableCell align=\"center\" style={{width: \"200px\", color:\"white\", borderBottom:\"2px solid #6985AF\", fontSize:\"18px\"}}>Петрофизическая задача</TableCell>\r\n                                <TableCell align=\"center\" style={{width: \"100px\", color:\"white\", borderBottom:\"2px solid #6985AF\", fontSize:\"18px\"}}>Оценка по методу</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody style={{paddingTop:\"100px\"}}>\r\n                            {rows.map((row, index) => {\r\n                                    if (row) return(\r\n                                    <TableRow key={index} style={{cursor: \"pointer\", height:\"50px\", margin:\"0\", padding:\"0\", backgroundColor: (hover.index === index && hover.hover ? '#f0f0f0' : '#fff')}} onMouseEnter={() => setHover({index: index, hover: true})} onMouseLeave={() => setHover({index: index, hover: false})}>\r\n                                        <TableCell align=\"center\" style={styleCell}>\r\n                                        <IconButton\r\n                                                aria-haspopup=\"false\"\r\n                                                color=\"innherit\"\r\n                                                onClick={() => {window.confirm(\"Вы точно хотите удалить данный метод?\") && deleteData(index)}}\r\n                                                style={{outline: \"none\", padding:\"0\", margin:\"0\", visibility: (role === \"user\" || role === \"superuser\" ? 'visible' : 'hidden')}}\r\n                                                >\r\n                                                <RemoveCircleOutlineIcon style={{color:\"black\"}}/>\r\n                                            </IconButton>\r\n                                        </TableCell>\r\n                                        <TableCell align=\"center\" onClick={() => {setRowIndex(index); handleModalData()}} style={styleCell}>{row.method === \"\" ? <>&mdash;</> : row.method}</TableCell>\r\n                                        <TableCell align=\"center\" onClick={() => {setRowIndex(index); handleModalData()}} style={styleCell}>{row.tool_type === \"\" ? <>&mdash;</> : row.tool_type}</TableCell>\r\n                                        <TableCell align=\"center\" onClick={() => {setRowIndex(index); handleModalData()}} style={styleCell}>{row.tool_num === \"\" ? <>&mdash;</> : row.tool_num}</TableCell>\r\n                                        <TableCell align=\"center\" onClick={() => {setRowIndex(index); handleModalData()}} style={styleCell}>{row.calibr_date === null ? <>&mdash;</> : row.calibr_date}</TableCell>\r\n                                        <TableCell align=\"center\" onClick={() => {setRowIndex(index); handleModalData()}} style={styleCell}>{row.interval_shod_start === null || row.interval_shod_end === null ? <>&mdash;</> : row.interval_shod_start+\" - \"+row.interval_shod_end}</TableCell>\r\n                                        <TableCell align=\"center\" onClick={() => {setRowIndex(index); handleModalData()}} style={styleCell}>{row.koef_shod === null ? <>&mdash;</> : row.koef_shod}</TableCell>\r\n                                        <TableCell align=\"center\" onClick={() => {setRowIndex(index); handleModalData()}} style={styleCell}>{row.reason_rashod === \"\" ? <>&mdash;</> : row.reason_rashod}</TableCell>\r\n                                        <TableCell align=\"center\" onClick={() => {setRowIndex(index); handleModalData()}} style={styleCell}>{row.petrophysic_task === null ? <>&mdash;</> : row.petrophysic_task}</TableCell>\r\n                                        <TableCell align=\"center\" onClick={() => {setRowIndex(index); handleModalData()}} style={styleCell}>{row.method_value === null ? <>&mdash;</> : <Chip style={{backgroundColor: (colorForChip(row.method_value)), color: \"#fff\"}} label={parseFloat((row.method_value +calc_tablet_digitalData(digitalData.digital_count, digitalData.type, fullnessData.full_inf_count))*koefDensity*Number(row.petrophysic_task)).toFixed(2) + \"%\"}/>}</TableCell>\r\n                                    </TableRow>\r\n                                )\r\n                            })}\r\n                        </TableBody>\r\n                </Table>\r\n                </Row>\r\n            </CardContent>\r\n            </Card>\r\n            </Grid>\r\n            <Grid item xs>\r\n                <Card\r\n                sx={{ minWidth: 275 }}\r\n                elevation={4}\r\n                style={{ borderRadius: \"15px\" }}\r\n                >\r\n                    <CardContent style={{ paddingBottom: \"0.2rem\" }}>\r\n                    <Form.Group>\r\n                        <Form.Control\r\n                        disabled={!(role === \"user\" || role === \"superuser\")}\r\n                        id=\"note\"\r\n                        name=\"note\"\r\n                        type=\"text\"\r\n                        value={note}\r\n                        onChange={(e) => updateBaseValues(e)}\r\n                        placeholder=\"Введите примечания...\"\r\n                        style={{ border: \"0\" }}\r\n                        />\r\n                    </Form.Group>\r\n                    </CardContent>\r\n                </Card>\r\n            </Grid>\r\n            <Grid item xs=\"auto\" style={{textAlign: \"right\", display: (value === null ? \"none\" : \"block\")}}>\r\n            <Card\r\n                sx={5}\r\n                elevation={4}\r\n                style={{\r\n                  borderRadius: \"15px\",\r\n                  backgroundColor: \"#34547A\",\r\n                  color: \"#fff\"\r\n                }}\r\n              >\r\n            <CardContent style={{paddingBottom: \"1rem\", color:\"white\"}}>\r\n                <Typography variant=\"button\" component=\"h2\" style={{fontSize: \"25px\"}}>\r\n                {`Общая оценка качества составила: ${parseFloat((Number(value)*koefDensity).toFixed(2))}%`}\r\n                </Typography>\r\n                </CardContent>\r\n                </Card>\r\n            </Grid>\r\n            <Grid item xs={12} style={{textAlign: \"right\"}}>\r\n                <h4>Отчёт подготовил: {author}</h4>    \r\n            </Grid>\r\n            <Grid item xs=\"auto\">\r\n                <Button variant=\"secondary\" onClick={() => {history.goBack()}} style={{outline: \"none\"}}>Вернуться назад</Button>    \r\n            </Grid>\r\n            </Grid>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Report;","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\pages\\database\\data.js",[],"C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Loading\\Loading.js",[],"C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Toasts\\WarningToast.js",[],"C:\\Users\\s_martyanova\\CheckList\\Front\\src\\pages\\dashboard\\Dashboard.js",["575","576","577","578","579","580","581","582","583","584","585","586","587","588","589","590","591","592","593","594","595","596","597","598","599","600","601","602","603","604","605","606","607","608","609"],"C:\\Users\\s_martyanova\\CheckList\\Front\\src\\pages\\tables\\Tables.js",[],"C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Sidebar\\Sidebar.js",["610","611","612","613"],"import React, { useState, useEffect } from \"react\";\r\nimport { Drawer, IconButton, List } from \"@material-ui/core\";\r\nimport {\r\n  Delete as DeleteIcon,\r\n  Layers as LayersIcon,\r\n  ArrowBack as ArrowBackIcon,\r\n  Person as PersonIcon,\r\n  Settings as SettingsIcon,\r\n  Description as DescriptionIcon,\r\n  NoteAdd as NoteAddIcon,\r\n  Help as HelpIcon,\r\n  Equalizer as EqualizerIcon,\r\n  Storage as StorageIcon,\r\n  TableChart as TableChartIcon,\r\n  Toll as TollIcon,\r\n} from \"@material-ui/icons\";\r\nimport { useTheme } from \"@material-ui/styles\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport classNames from \"classnames\";\r\n\r\n// styles\r\nimport useStyles from \"./styles\";\r\n\r\n// components\r\nimport SidebarLink from \"./components/SidebarLink/SidebarLink\";\r\nimport Dot from \"./components/Dot\";\r\n\r\n// context\r\nimport {\r\n  useLayoutState,\r\n  useLayoutDispatch,\r\n  toggleSidebar,\r\n} from \"../../context/LayoutContext\";\r\n\r\nconst structure = [\r\n  { id: 0, label: \"Статистика\", link: \"/app/dashboard\", icon: <EqualizerIcon /> },\r\n  { id: 1, type: \"divider\" },\r\n  { \r\n    id: 2, \r\n    label: \"Общества группы\",\r\n    link: \"/app/customers\",\r\n    icon: <PersonIcon/>\r\n  },\r\n  { \r\n    id: 3, \r\n    label: \"Создать скважину\",\r\n    link: \"/app/database\",\r\n    icon: <StorageIcon/>\r\n  },\r\n  { \r\n    id: 4, \r\n    label: \"Сервисные компании\",\r\n    link: \"/app/services\",\r\n    icon: <SettingsIcon/>\r\n  },\r\n  { \r\n    id: 5, \r\n    label: \"База мнемоник\",\r\n    link: \"/app/mnemonic\",\r\n    icon: <TableChartIcon/>\r\n  },\r\n  { id: 6, type: \"divider\" },\r\n  \r\n  { id: 7, \r\n    label: \"Создать отчёт\", \r\n    link: \"/app/checklist\", \r\n    icon: <NoteAddIcon />\r\n  },\r\n  { \r\n    id: 8, \r\n    label: \"Отчёты по контролю качества\",\r\n    link: \"/app/reports\",\r\n    icon: <DescriptionIcon/> \r\n  },\r\n  { id: 9, type: \"divider\" },\r\n  { \r\n    id: 10, \r\n    label: \"База данных скважин\",\r\n    link: \"/app/trackedwells\",\r\n    icon: <TollIcon/>\r\n  },\r\n  { id: 11, type: \"divider\" },\r\n  { \r\n    id: 12, \r\n    label: \"Корзина\",\r\n    link: \"/app/trash\",\r\n    icon: <DeleteIcon/> \r\n  },\r\n  { \r\n    id: 13, \r\n    label: \"Логи\",\r\n    link: \"/app/logs\",\r\n    icon: <LayersIcon/> \r\n  },\r\n  { \r\n    id: 14, \r\n    label: \"Помощь\",\r\n    link: \"/app/help\",\r\n    icon: <HelpIcon/> \r\n  },\r\n];\r\n\r\nfunction Sidebar({ location }) {\r\n  var classes = useStyles();\r\n  var theme = useTheme();\r\n  const role = localStorage.getItem(\"role\")\r\n\r\n  // global\r\n  var { isSidebarOpened } = useLayoutState();\r\n  var layoutDispatch = useLayoutDispatch();\r\n\r\n  // local\r\n  var [isPermanent, setPermanent] = useState(true);\r\n\r\n  useEffect(function() {\r\n    window.addEventListener(\"resize\", handleWindowWidthChange);\r\n    handleWindowWidthChange();\r\n    return function cleanup() {\r\n      window.removeEventListener(\"resize\", handleWindowWidthChange);\r\n    };\r\n  });\r\n\r\n  return (\r\n    <Drawer\r\n      variant={isPermanent ? \"permanent\" : \"temporary\"}\r\n      className={classNames(classes.drawer, {\r\n        [classes.drawerOpen]: isSidebarOpened,\r\n        [classes.drawerClose]: !isSidebarOpened,\r\n      })}\r\n      classes={{\r\n        paper: classNames({\r\n          [classes.drawerOpen]: isSidebarOpened,\r\n          [classes.drawerClose]: !isSidebarOpened,\r\n        }),\r\n      }}\r\n      open={isSidebarOpened}\r\n    >\r\n      <div className={classes.toolbar} />\r\n      <div className={classes.mobileBackButton}>\r\n        <IconButton onClick={() => toggleSidebar(layoutDispatch)}>\r\n          <ArrowBackIcon\r\n            classes={{\r\n              root: classNames(classes.headerIcon, classes.headerIconCollapse),\r\n            }}\r\n          />\r\n        </IconButton>\r\n      </div>\r\n      <List className={classes.sidebarList}>\r\n        {role === \"superuser\" ? structure.map(link => (\r\n          <SidebarLink\r\n            key={link.id}\r\n            location={location}\r\n            isSidebarOpened={isSidebarOpened}\r\n            {...link}\r\n          />\r\n        )) :\r\n        structure.filter(item => item.id != 10 && item.id != 5 && item.id != 11).map(link => (\r\n            <SidebarLink\r\n              key={link.id}\r\n              location={location}\r\n              isSidebarOpened={isSidebarOpened}\r\n              {...link}\r\n            />\r\n          )\r\n        )}\r\n      </List>\r\n    </Drawer>\r\n  );\r\n\r\n  // ##################################################################\r\n  function handleWindowWidthChange() {\r\n    var windowWidth = window.innerWidth;\r\n    var breakpointWidth = theme.breakpoints.values.md;\r\n    var isSmallScreen = windowWidth < breakpointWidth;\r\n\r\n    if (isSmallScreen && isPermanent) {\r\n      setPermanent(false);\r\n    } else if (!isSmallScreen && !isPermanent) {\r\n      setPermanent(true);\r\n    }\r\n  }\r\n}\r\n\r\nexport default withRouter(Sidebar);\r\n","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\pages\\textLabels.js",[],"C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Header\\Header.js",[],"C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\NotFound\\NotFound.js",[],"C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Toolbar\\CustomToolbarSelectTrash.js",[],"C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Dialogs\\EditWellboreDialog.js",[],"C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Dialogs\\EditWellDialog.js",[],"C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Dialogs\\EditClusterDialog.js",[],"C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Toolbar\\CustomToolbarSelect.js",[],"C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Dialogs\\EditServiceDialog.js",["614","615"],"import React, {useState, useEffect} from 'react';\r\n\r\nimport {\r\n    Button,\r\n    Dialog, DialogContent, DialogTitle, DialogActions\r\n} from \"@material-ui/core\";\r\n\r\nimport {Form} from 'react-bootstrap';\r\nimport ErrorToast from \"../../components/Toasts/ErrorToast\";\r\n\r\nfunction EditServiceDialog({active, setActive, service_id, service_name, service_short, servicesData, setServicesData}) {\r\n    const [service, setService] = useState(\"\");\r\n    const [serviceShort, setServiceShort] = useState(\"\");\r\n    const [error, setError] = useState(false)\r\n    const [isErrorToast, setIsErrorToast] = useState(false)\r\n    const [statusError, setStatusError] = useState(0)\r\n\r\n    function onSubmitService(e){\r\n        e.preventDefault()\r\n        if (!!service && !!serviceShort) {\r\n            setError(false)\r\n            fetch(process.env.REACT_APP_API+'services/'+ service_id +'?format=json',{\r\n                method: 'PUT',\r\n                headers:{\r\n                    'Accept':'application/json',\r\n                    'Content-Type':'application/json',\r\n                    'Authorization': \"Token \" + localStorage.getItem('id_token')\r\n                },\r\n                body: JSON.stringify({\r\n                    \"name\": service,\r\n                    \"short\": serviceShort\r\n                }) \r\n            }).then((res)=>{\r\n                if (!res.ok){\r\n                    setIsErrorToast(true)\r\n                }\r\n                else {\r\n                    const newFullData=servicesData.map((item)=>{\r\n                        if (item.id==service_id){\r\n                            item.name=service\r\n                            item.short=serviceShort\r\n                        }\r\n                        return item\r\n                    })\r\n                    setServicesData(newFullData)\r\n                    setActive(false)\r\n                }\r\n            })\r\n        }   \r\n        else {\r\n            setError(true)\r\n        }\r\n    };\r\n    const handleErrorToast = () => {\r\n        setIsErrorToast(!isErrorToast);\r\n      }\r\n    useEffect(() => {\r\n        setService(service_name);\r\n        setServiceShort(service_short)\r\n    }, [service_name, service_short])\r\n\r\n    return (\r\n        <>\r\n            <ErrorToast active={isErrorToast} setActive={handleErrorToast} statusError={statusError}/>\r\n            <Dialog open={active} onClose={setActive} maxWidth=\"xs\" fullWidth>\r\n                <DialogTitle>Изменить название сервисной компании</DialogTitle>\r\n                <Form name=\"editservice\" onSubmit={onSubmitService}>\r\n                    <DialogContent>\r\n                        <Form.Group>\r\n                            <Form.Label htmlFor=\"edit_service\">Полное название</Form.Label>\r\n                            <Form.Control\r\n                            type=\"text\"\r\n                            id=\"edit_service\"\r\n                            onChange={e => setService(e.target.value)}\r\n                            value={service}\r\n                            />\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <Form.Label htmlFor=\"edit_service_short\">Сокращенное название</Form.Label>\r\n                            <Form.Control\r\n                            type=\"text\"\r\n                            id=\"edit_service_short\"\r\n                            onChange={e => setServiceShort(e.target.value)}\r\n                            value={serviceShort}\r\n                            />\r\n                            <Form.Text style={{fontSize: \"14px\", color: \"red\", visibility: (error ? 'visible' : 'hidden')}}>\r\n                                Поля не могут оставаться пустыми!\r\n                            </Form.Text>\r\n                        </Form.Group>\r\n                    </DialogContent>\r\n                <DialogActions>\r\n                    <Button type=\"submit\" style={{outline: \"none\"}}>Сохранить</Button>\r\n                </DialogActions>\r\n                </Form>\r\n            </Dialog>   \r\n        </>\r\n    )\r\n}\r\n\r\nexport default EditServiceDialog;","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Dialogs\\AddServiceDialog.js",["616"],"import React, {useState} from 'react';\r\n\r\nimport {\r\n    Button,\r\n    TextField,\r\n    Dialog, DialogContent, DialogTitle, DialogActions\r\n} from \"@material-ui/core\";\r\n\r\nimport {Form} from 'react-bootstrap';\r\n\r\nfunction AddServiceDialog({active, setActive}) {\r\n    const [service, setService] = useState(\"\");\r\n    const [serviceShort, setServiceShort] = useState(\"\");\r\n\r\n    function onSubmitService(){\r\n        fetch(process.env.REACT_APP_API+'services/?format=json',{\r\n            method: 'POST',\r\n            headers:{\r\n                'Accept':'application/json',\r\n                'Content-Type':'application/json',\r\n                'Authorization': \"Token \" + localStorage.getItem('id_token')\r\n            },\r\n            body: JSON.stringify({\r\n                \"name\": service,\r\n                \"short\": serviceShort\r\n            }) \r\n        })\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Dialog open={active} onClose={setActive} maxWidth=\"xs\" fullWidth>\r\n                <DialogTitle>Добавить сервисную компанию</DialogTitle>\r\n                <Form name=\"addservice\" onSubmit={onSubmitService}>\r\n                    <DialogContent>\r\n                        <Form.Group>\r\n                            <Form.Label htmlFor=\"add_service\">Полное название</Form.Label>\r\n                            <Form.Control\r\n                            required\r\n                            type=\"text\"\r\n                            id=\"add_service\"\r\n                            value={service}\r\n                            onChange={e => setService(e.target.value)} \r\n                            placeholder=\"Введите полное название\"\r\n                            />\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <Form.Label htmlFor=\"add_service_short\">Сокращенное название</Form.Label>\r\n                            <Form.Control\r\n                            required\r\n                            type=\"text\"\r\n                            id=\"add_service_short\"\r\n                            value={serviceShort}\r\n                            onChange={e => setServiceShort(e.target.value)} \r\n                            placeholder=\"Введите сокращенное название\"\r\n                            />\r\n                        </Form.Group>\r\n                    </DialogContent>\r\n                <DialogActions>\r\n                    <Button type=\"submit\" style={{outline: \"none\"}}>Сохранить</Button>\r\n                </DialogActions>\r\n                </Form>\r\n            </Dialog>   \r\n        </>\r\n    )\r\n}\r\n\r\nexport default AddServiceDialog;","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Dialogs\\FillDataDialog.js",["617","618","619","620","621","622","623","624","625","626"],"import React, { useState, useEffect } from \"react\";\r\n\r\nimport {\r\n  Button, TextField, \r\n  Dialog,\r\n  DialogContent,\r\n  DialogTitle,\r\n  DialogActions,\r\n  FormControl,\r\n  MenuItem,\r\n  Select,\r\n  Checkbox,\r\n  ListItemText,\r\n  Tooltip,\r\n  OutlinedInput,\r\n  Grid,\r\n  Card,\r\n  CardContent\r\n} from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nimport {\r\n  NotInterested as NotInterestedIcon\r\n} from \"@material-ui/icons\";\r\n\r\nimport { Form, Row, Col } from \"react-bootstrap\";\r\n\r\nimport { calc_value_rt, calc_value_memory, calc_value_memory_azimut, calc_value_rt_azimut,  } from \"../../pages/calcScripts\";\r\n\r\nimport { MenuProps, petrophysic_names } from \"../../pages/checklist/data\";\r\nimport { styleBlueInput, styleGrayInput } from \"../../pages/checklist/styles\";\r\nimport { drawRow, styleControlRow } from \"./scripts\";\r\n\r\nconst useStyles = makeStyles({\r\n  input: {\r\n    color: \"white\", \r\n    fontSize: \"20px\"\r\n  }\r\n});\r\n\r\nfunction FillDataDialog({\r\n  props,\r\n  active,\r\n  setActive,\r\n  methodsData,\r\n  devicesData,\r\n  mainData,\r\n  row,\r\n  secondrow,\r\n  fullnessAct,\r\n  service_id,\r\n  lqc,\r\n  onUpdate,\r\n  onDelete,\r\n  digitalData_type,\r\n  full_inf_count,\r\n  digital_count,\r\n  data_type,\r\n  interval_fact\r\n}) {\r\n  const classes = useStyles();\r\n  const role = localStorage.getItem('role');\r\n  const [id, setId] = useState(null);\r\n  const [inform_for_method_id, setInform_for_method_id] = useState(null);\r\n  const [index, setIndex] = useState(null);\r\n  const [method, setMethod] = useState(\"\");\r\n  const [tool_type, setTool_type] = useState(\"\");\r\n  const [tool_num, setTool_num] = useState(\"\");\r\n  const [calibr_date, setCalibr_date] = useState(null);\r\n  //const [start_date, setStart_date] = useState(null);\r\n  //const [end_date, setEnd_date] = useState(null);\r\n  const [interval_shod_start, setInterval_shod_start] = useState(null);\r\n  const [interval_shod_end, setInterval_shod_end] = useState(null);\r\n  const [koef_shod, setKoef_shod] = useState(null);\r\n  const [method_value, setMethod_value] = useState(null);\r\n  const [reason_rashod, setReason_rashod] = useState(\"\");\r\n  const [koef_fail, setKoef_fail] = useState(null);\r\n  const [petrophysic_task, setPetrophysic_task] = useState(null);\r\n  const [petrophysic_selected, setPetrophysic_selected] = useState([]);\r\n  const [petroInformation, setPetroInformation]=useState({})\r\n  //const [act, setAct] = useState(\"\");\r\n  const [linkage, setLinkage] = useState(\"\");\r\n  const [emissions, setEmissions] = useState(\"\");\r\n  const [noise, setNoise] = useState(\"\");\r\n  const [control, setControl] = useState(\"\");\r\n  const [distribute_support, setDistribute_support] = useState(\"\");\r\n  const [distribute_palet, setDistribute_palet] = useState(\"\");\r\n  const [dash, setDash] = useState(\"\");\r\n  const [corresponse, setCorresponse] = useState(\"\");\r\n  const [correlation, setCorrelation] = useState(\"\");\r\n  const [device_tech_condition, setDevice_tech_condition] = useState(\"\");\r\n  const [notes, setNotes] = useState(\"\");\r\n  useEffect(() => {\r\n    if (row !== undefined && Object.keys(row).length) {\r\n      setId(row.id);\r\n      setIndex(row.index);\r\n      setMethod(row.method);\r\n      setTool_type(row.tool_type);\r\n      setTool_num(row.tool_num);\r\n      setCalibr_date(row.calibr_date);\r\n      //setStart_date(row.start_date);\r\n      //setEnd_date(row.end_date);\r\n      setInterval_shod_start(row.interval_shod_start);\r\n      setInterval_shod_end(row.interval_shod_end);\r\n      setKoef_shod(row.koef_shod);\r\n      setMethod_value(row.method_value);\r\n      setReason_rashod(row.reason_rashod);\r\n      if (mainData.data_type === \"Реального времени\") {\r\n        setReason_rashod(\"\");\r\n        setKoef_shod(null);\r\n      }\r\n      setKoef_fail(row.koef_fail);\r\n      setPetrophysic_task(row.petrophysic_task);\r\n      setPetrophysic_selected(row.petrophysic_selected);\r\n    } else deleteAllLocalData();\r\n  }, [row]);\r\n\r\n  useEffect(() => {\r\n    if (secondrow !== undefined && Object.keys(secondrow).length) {\r\n      setInform_for_method_id(secondrow.inform_for_method_id);\r\n      //setAct(secondrow.act);\r\n      setLinkage(secondrow.linkage);\r\n      setEmissions(secondrow.emissions);\r\n      setNoise(secondrow.noise);\r\n      setControl(secondrow.control);\r\n      setDistribute_palet(secondrow.distribute_palet);\r\n      setDistribute_support(secondrow.distribute_support);\r\n      setDash(secondrow.dash);\r\n      setDevice_tech_condition(secondrow.device_tech_condition);\r\n      if (!lqc || lqc == \"Не имеется\")\r\n        setDevice_tech_condition(\"\");\r\n      setCorresponse(secondrow.corresponse);\r\n      setCorrelation(secondrow.correlation);\r\n      setNotes(secondrow.notes);\r\n    } else deleteAllLocalData();\r\n  }, [secondrow]);\r\n\r\n  const deleteAllLocalData = () => {\r\n    setId(null);\r\n    setInform_for_method_id(null);\r\n    setIndex(null);\r\n    setMethod(\"\");\r\n    setTool_type(\"\");\r\n    setTool_num(\"\");\r\n    setCalibr_date(null);\r\n    //setStart_date(null);\r\n    //setEnd_date(null);\r\n    setInterval_shod_start(null);\r\n    setInterval_shod_end(null);\r\n    setKoef_shod(null);\r\n    setMethod_value(null);\r\n    setReason_rashod(\"\");\r\n    setKoef_fail(null);\r\n    setPetrophysic_task(null);\r\n    setPetrophysic_selected([]);\r\n    //setAct(\"\");\r\n    setLinkage(\"\");\r\n    setEmissions(\"\");\r\n    setNoise(\"\");\r\n    setControl(\"\");\r\n    setDistribute_palet(\"\");\r\n    setDistribute_support(\"\");\r\n    setDash(\"\");\r\n    setDevice_tech_condition(\"\");\r\n    setCorresponse(\"\");\r\n    setCorrelation(\"\");\r\n    setNotes(\"\");\r\n  };\r\n\r\n  const setPetrophysic = (petro_sel) => {\r\n    var petro_koef = 0;\r\n    setPetrophysic_selected(petro_sel);\r\n    var petro_select = petro_sel;\r\n    petro_select.forEach((task) => {\r\n      if (task == \"Выделение коллекторов\"){\r\n        if (petroInformation['Выделение коллекторов'] !== undefined){\r\n          petro_koef += Number(petroInformation['Выделение коллекторов'])\r\n        }\r\n        else{\r\n          petro_koef += 0.35\r\n        }\r\n      }\r\n      else if (task == \"Определение характера насыщения\"){\r\n        if (petroInformation[\"Определение характера насыщения\"] !== undefined){\r\n          petro_koef += Number(petroInformation['Определение характера насыщения'])\r\n        }\r\n        else{\r\n          petro_koef += 0.25\r\n        }\r\n      }\r\n      else if (task == \"Определение Кп\"){\r\n        if (petroInformation[\"Определение Кп\"] !== undefined){\r\n          petro_koef += Number(petroInformation['Определение Кп'])\r\n        }   \r\n        else{\r\n          petro_koef += 0.2\r\n        }\r\n      }\r\n      else if (task == \"Определение Кнг\"){\r\n        if (petroInformation[\"Определение Кнг\"] !== undefined){\r\n          petro_koef += Number(petroInformation['Определение Кнг'])\r\n        }\r\n        else{\r\n          petro_koef += 0.1\r\n        }\r\n      }\r\n      else if (task == \"Литологическое расчленение\"){\r\n        if (petroInformation[\"Литологическое расчленение\"] !== undefined){\r\n          petro_koef += Number(petroInformation['Литологическое расчленение'])\r\n        }\r\n        else{\r\n          petro_koef += 0.1\r\n        }\r\n      }\r\n  })\r\n    setPetrophysic_task(petro_koef.toFixed(2));\r\n  };\r\n\r\n  const getPetroInformation = () => {\r\n    petrophysic_task === null && \r\n    fetch(process.env.REACT_APP_API+'petrophysics/'+ mainData.field_id + '/' + methodsData.find(item => item.name === method).id +'?format=json', { headers : { \r\n        'Content-Type': 'application/json',\r\n        'Accept': 'application/json',\r\n        'Authorization': \"Token \" + localStorage.getItem('id_token')\r\n       }\r\n    }) \r\n    .then(response=>response.json())\r\n    .then(data=>{\r\n        if (data.length !== 0) {\r\n            var petro_select = {}\r\n            if (data.separation_of_reservoirs !== null) petro_select[\"Выделение коллекторов\"] = data.separation_of_reservoirs\r\n            if (data.determination_nature_saturation !== null) petro_select[\"Определение характера насыщения\"] = data.determination_nature_saturation\r\n            if (data.determination_Kp !== null) petro_select[\"Определение Кп\"] = data.determination_Kp\r\n            if (data.determination_Kng !== null) petro_select[\"Определение Кнг\"] = data.determination_Kng\r\n            if (data.determination_lithotype !== null) petro_select[\"Литологическое расчленение\"] = data.determination_lithotype\r\n            setPetroInformation(petro_select)\r\n        }  \r\n    })\r\n}\r\n  \r\n  const firstRow = {\r\n    id: id,\r\n    index: index,\r\n    method: method,\r\n    tool_type: tool_type,\r\n    tool_num: tool_num,\r\n    calibr_date: calibr_date,\r\n    //start_date: start_date,\r\n    //end_date: end_date,\r\n    interval_shod_start: interval_shod_start,\r\n    interval_shod_end: interval_shod_end,\r\n    koef_shod: koef_shod,\r\n    method_value: method_value,\r\n    reason_rashod: reason_rashod,\r\n    koef_fail: koef_fail,\r\n    petrophysic_task: petrophysic_task,\r\n    petrophysic_selected: petrophysic_selected,\r\n  }\r\n\r\n  const secondRow = {\r\n    inform_for_method_id: inform_for_method_id,\r\n    index: index,\r\n    method: method,\r\n    //act: act,\r\n    linkage: linkage,\r\n    emissions: emissions,\r\n    noise: noise,\r\n    control: control,\r\n    distribute_palet: distribute_palet,\r\n    distribute_support: distribute_support,\r\n    dash: dash,\r\n    device_tech_condition: device_tech_condition,\r\n    corresponse: corresponse,\r\n    correlation: correlation,\r\n    notes: notes,\r\n  }\r\n  useEffect(() => {\r\n    method !== \"\" && getPetroInformation()\r\n  }, [method])\r\n\r\n  useEffect(() => {\r\n    setInterval_shod_start(mainData.section_interval_start)\r\n    setInterval_shod_end(mainData.section_interval_end)\r\n  }, [mainData])\r\n  useEffect(() => {\r\n    if (mainData.data_type === \"Реального времени\")\r\n     if (secondRow.method.split(\" \")[0] !== \"Азимутальный\")\r\n        setMethod_value(parseFloat(calc_value_rt(secondRow, lqc, digitalData_type).toFixed(2)))\r\n      else\r\n        setMethod_value(parseFloat(calc_value_rt_azimut(secondRow, lqc, petrophysic_task).toFixed(2)))\r\n    if (mainData.data_type === \"Из памяти прибора\")\r\n      if (secondRow.method.split(\" \")[0] !== \"Азимутальный\")\r\n        setMethod_value(parseFloat(calc_value_memory(secondRow, lqc, koef_shod).toFixed(2)))\r\n      else\r\n        setMethod_value(parseFloat(calc_value_memory_azimut(secondRow, lqc, koef_shod, digitalData_type).toFixed(2)))\r\n      }, [mainData, method, linkage, emissions, noise, control, distribute_palet, distribute_support, dash, corresponse, correlation, device_tech_condition, koef_shod])\r\n  return (\r\n    <>\r\n      <Dialog open={active} onClose={setActive} maxWidth=\"xl\" fullWidth>\r\n        <DialogTitle style={{ backgroundColor: \"#34547A\", color: \"white\"}}>\r\n          Заполнение информации по методу\r\n        </DialogTitle>\r\n        <DialogContent\r\n          style={{\r\n            backgroundImage:\r\n              \"linear-gradient(to bottom, #34547A 0%, #34547A 50%, #fff 50%, #fff 100%)\",\r\n          }}\r\n        >\r\n          <Grid container spacing={4}>\r\n          <Grid item xs={12}>\r\n          <Card\r\n                sx={{ minWidth: 275 }}\r\n                elevation={4}\r\n                style={{\r\n                  borderRadius: \"15px\",\r\n                  backgroundColor: \"#3F6694\",\r\n                  color: \"#fff\",\r\n                }}\r\n              >\r\n            <CardContent style={{ paddingBottom: \"0\", color:\"white\"}}>\r\n                <Form.Group as={Row}>\r\n                    <Col xs=\"2\">\r\n                        <FormControl fullWidth variant=\"standard\">\r\n                            <TextField disabled inputProps={{ className: classes.input }}  id=\"customer\" name=\"customer\" label=\"Общество\" variant=\"standard\" defaultValue={mainData.customer}/>\r\n                        </FormControl>\r\n                    </Col>\r\n                    <Col xs=\"2\">\r\n                        <FormControl fullWidth variant=\"standard\">\r\n                            <TextField disabled inputProps={{ className: classes.input }} id=\"field\" name=\"field\" label=\"Месторождение\" variant=\"standard\" defaultValue={mainData.field}/>\r\n                        </FormControl>\r\n                    </Col>\r\n                    <Col xs=\"1\">\r\n                        <FormControl fullWidth variant=\"standard\">\r\n                            <TextField disabled inputProps={{ className: classes.input }} id=\"num_pad\" name=\"num_pad\" label=\"Куст\" variant=\"standard\" defaultValue={mainData.num_pad}/>\r\n                        </FormControl>\r\n                    </Col>\r\n                    <Col xs=\"2\">\r\n                        <FormControl fullWidth variant=\"standard\">\r\n                            <TextField disabled inputProps={{ className: classes.input }} id=\"num_well\" name=\"num_well\" label=\"Скважина\" variant=\"standard\" defaultValue={mainData.num_well}/>\r\n                        </FormControl>\r\n                    </Col>\r\n                    <Col xs=\"2\">\r\n                        <FormControl fullWidth variant=\"standard\">\r\n                            <TextField disabled inputProps={{ className: classes.input }} id=\"num_wellbore\" name=\"num_wellbore\" label=\"Ствол\" variant=\"standard\" defaultValue={mainData.num_wellbore}/>\r\n                        </FormControl>\r\n                    </Col>\r\n                    <Form.Label column xs=\"3\" style={{textAlign:\"left\", paddingTop: \"1.25rem\", fontSize: \"22px\", fontWeight:\"700\"}}>\r\n                      <NotInterestedIcon style={{fontSize:\"30px\"}}/> долота, {mainData.diametr} мм\r\n                    </Form.Label>\r\n                </Form.Group>\r\n                <Form.Group as={Row}>\r\n                    <Col xs=\"2\">\r\n                        <FormControl fullWidth variant=\"outlined\" size=\"small\">\r\n                            <TextField disabled inputProps={{ className: classes.input }} id=\"service\" name=\"service\" label=\"Сервисная компания\" variant=\"outlined\" size=\"small\" defaultValue={mainData.service}/>\r\n                        </FormControl>\r\n                    </Col>\r\n                    <Col xs=\"2\">\r\n                        <FormControl fullWidth variant=\"outlined\" size=\"small\">\r\n                            <TextField disabled inputProps={{ className: classes.input }} id=\"data_type\" name=\"data_type\" label=\"Вид данных\" variant=\"outlined\" size=\"small\" defaultValue={mainData.data_type}/>\r\n                        </FormControl>\r\n                    </Col>\r\n                    <Form.Label column xs=\"3\" style={{textAlign:\"left\", fontSize: \"22px\", fontWeight:\"700\"}}>\r\n                      Интервал секции: {mainData.section_interval_start} - {mainData.section_interval_end} м\r\n                    </Form.Label>\r\n                    <Form.Label column xs=\"3\" style={{textAlign:\"left\", fontSize: \"22px\", fontWeight:\"700\"}}>\r\n                      Дата ГИС: c {mainData.start_date !== null ? mainData.start_date : \"...\"} по {mainData.end_date !== null ? mainData.end_date : \"...\"}\r\n                    </Form.Label>\r\n                    <Form.Label column xs=\"2\" style={{textAlign:\"right\", verticalAlign:\"top\", fontSize: \"22px\", fontWeight:\"700\"}}>\r\n                      Общая оценка - {method_value !== null ? method_value + \"%\" : \"%\"}\r\n                    </Form.Label>\r\n                </Form.Group>\r\n            </CardContent>\r\n        </Card>\r\n          </Grid>\r\n            <Grid item xs={12}>\r\n              <Card\r\n                sx={{ minWidth: 275 }}\r\n                elevation={4}\r\n                style={{\r\n                  borderRadius: \"15px\",\r\n                  backgroundColor: \"#3F6694\",\r\n                  color: \"#fff\",\r\n                }}\r\n              >\r\n                <CardContent style={{ paddingBottom: \"0\", paddingTop:\"1rem\", fontWeight:\"600\" }}>\r\n                  <Form.Group as={Row} style={{marginBottom:\"1rem\"}}>\r\n                    <Form.Label column sm=\"4\" style={{textAlign:\"center\", fontSize:\"22px\"}}>\r\n                      Метод\r\n                    </Form.Label>\r\n                    <Col sm=\"8\" style={{verticalAlign:\"middle\"}}>\r\n                      <Form.Control\r\n                      disabled={!(role === \"user\" || role === \"superuser\")}\r\n                        id=\"method\"\r\n                        name=\"method\"\r\n                        as=\"select\"\r\n                        placeholder=\"Выберите значение из списка\"\r\n                        style={{backgroundColor: \"#3F6694\", borderColor: \"#fff\", color: \"#fff\", height:\"100%\", fontSize:\"20px\"}}\r\n                        value={method}\r\n                        onChange={(e) => {\r\n                          setPetrophysic_task(null);\r\n                          setPetrophysic_selected([]);\r\n                          setTool_num(\"\");\r\n                          setTool_type(\"\");\r\n                          if (e.target.value.split(\" \")[0] === \"Азимутальный\" || e.target.value.split(\" \")[1] === \"каверномер\") {\r\n                            setDistribute_palet(\"\")\r\n                            setDistribute_support(\"\")\r\n                            setCorresponse(\"\")\r\n                          }\r\n                          setMethod(e.target.value);\r\n                        }}\r\n                      >\r\n                        <option hidden disabled></option>\r\n                        {methodsData.map((item) => (\r\n                          <option key={item.name} value={item.name}>\r\n                            {item.name}\r\n                          </option>\r\n                        ))}\r\n                      </Form.Control>\r\n                    </Col>\r\n                  </Form.Group>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n            <Grid item xs={4}>\r\n              <Card\r\n                sx={{ minWidth: 275 }}\r\n                elevation={4}\r\n                style={{ borderRadius: \"15px\", height: \"100%\" }}\r\n              >\r\n                <CardContent style={{ paddingBottom: \"0\", fontWeight:\"600\" }}>\r\n                  <Form.Group as={Row}>\r\n                    <Form.Label column sm=\"6\">\r\n                      Тип прибора\r\n                    </Form.Label>\r\n                    <Col sm=\"6\">\r\n                      <Form.Control\r\n                      disabled={!(role === \"user\" || role === \"superuser\")}\r\n                        id=\"tool_type\"\r\n                        name=\"tool_type\"\r\n                        as=\"select\"\r\n                        value={tool_type}\r\n                        onChange={(e) => setTool_type(e.target.value)}\r\n                      >\r\n                        <option hidden disabled></option>\r\n                        {devicesData.map(\r\n                          (item) =>\r\n                            item.method === method && (\r\n                              <option\r\n                                key={item.tool_type}\r\n                                value={item.tool_type}\r\n                              >\r\n                                {item.tool_type}\r\n                              </option>\r\n                            ),\r\n                        )}\r\n                      </Form.Control>\r\n                    </Col>\r\n                  </Form.Group>\r\n                  <Form.Group as={Row}>\r\n                    <Form.Label column sm=\"6\">\r\n                      Номер прибора\r\n                    </Form.Label>\r\n                    <Col sm=\"6\">\r\n                      <Form.Control\r\n                      disabled={!(role === \"user\" || role === \"superuser\")}\r\n                        id=\"tool_num\"\r\n                        name=\"tool_num\"\r\n                        style={styleBlueInput}\r\n                        value={tool_num}\r\n                        onChange={(e) => setTool_num(e.target.value)}\r\n                        type=\"number\"\r\n                      />\r\n                    </Col>\r\n                  </Form.Group>\r\n                  <Form.Group as={Row}>\r\n                    <Form.Label column sm=\"6\">\r\n                      Дата калибровки прибора\r\n                    </Form.Label>\r\n                    <Col sm=\"6\">\r\n                      <Form.Control\r\n                      disabled={!(role === \"user\" || role === \"superuser\")}\r\n                        id=\"calibr_date\"\r\n                        name=\"calibr_date\"\r\n                        value={calibr_date}\r\n                        onChange={(e) => setCalibr_date(e.target.value)}\r\n                        style={styleBlueInput}\r\n                        type=\"date\"\r\n                      />\r\n                    </Col>\r\n                  </Form.Group>\r\n                  <Form.Group as={Row}>\r\n                    <Form.Label column sm=\"6\">\r\n                      Интервал записи (факт), м\r\n                    </Form.Label>\r\n                    <Col sm=\"6\">\r\n                    <div style={{whiteSpace:\"nowrap\", minWidth: \"100%\"}}>\r\n                      <Form.Control\r\n                      disabled={!(role === \"user\" || role === \"superuser\")}\r\n                        id=\"interval_shod_start\"\r\n                        name=\"interval_shod_start\"\r\n                        value={interval_shod_start}\r\n                        type=\"number\"\r\n                        step=\"0.01\"\r\n                        style={{\r\n                          display: \"inline-block\",\r\n                          backgroundColor: \"#6985AF\",\r\n                          color: \"#fff\",\r\n                          width:\"46%\",\r\n                          textAlign: \"center\",\r\n                          fontWeight: \"700\",\r\n                          fontSize: \"18px\"\r\n                        }}\r\n                        onChange={(e) => \r\n                            e.target.value === \"\"\r\n                              ? setInterval_shod_start(null)\r\n                              : setInterval_shod_start(e.target.value)\r\n                        }\r\n                      />\r\n                      <div style={{ display: \"inline-block\" }}>\r\n                        &ensp;&ndash;&ensp;\r\n                      </div>\r\n                      <Form.Control\r\n                      disabled={!(role === \"user\" || role === \"superuser\")}\r\n                        id=\"interval_shod_end\"\r\n                        name=\"interval_shod_end\"\r\n                        value={interval_shod_end}\r\n                        type=\"number\"\r\n                        step=\"0.01\"\r\n                        style={{\r\n                          display: \"inline-block\",\r\n                          backgroundColor: \"#6985AF\",\r\n                          color: \"#fff\",\r\n                          width:\"46%\",\r\n                          textAlign: \"center\",\r\n                          fontWeight: \"700\",\r\n                          fontSize: \"18px\"\r\n                        }}\r\n                        onChange={(e) =>\r\n                          e.target.value === \"\"\r\n                            ? setInterval_shod_end(null)\r\n                            : setInterval_shod_end(e.target.value)\r\n                        }\r\n                      />\r\n                      </div>\r\n                    </Col>\r\n                  </Form.Group>\r\n                  <Form.Group as={Row}>\r\n                    <Form.Label column sm=\"6\">\r\n                      Коэффициент сходимости данных, %\r\n                    </Form.Label>\r\n                    <Col sm=\"6\">\r\n                      <Tooltip\r\n                        title={mainData.data_type === \"Из памяти прибора\" ? \"Значение должно быть в диапазоне от 0 до 100\" : \"Недоступно для ввода\"}\r\n                        arrow\r\n                      >\r\n                        <Form.Control\r\n                        disabled={!((role === \"user\" || role === \"superuser\") && mainData.data_type === \"Из памяти прибора\")}\r\n                          id=\"koef_shod\"\r\n                          name=\"koef_shod\"\r\n                          value={koef_shod}\r\n                          type=\"number\"\r\n                          step=\"0.01\"\r\n                          min=\"0\"\r\n                          max=\"100\"\r\n                          style={mainData.data_type === \"Из памяти прибора\" ? styleBlueInput : styleGrayInput}\r\n                          onChange={(e) =>\r\n                            setKoef_shod(\r\n                              Math.max(\r\n                                e.target.min,\r\n                                Math.min(e.target.max, e.target.value),\r\n                              ) || null\r\n                            )\r\n                          }\r\n                        />\r\n                      </Tooltip>\r\n                    </Col>\r\n                  </Form.Group>\r\n                  <Form.Group as={Row}>\r\n                    <Form.Label column sm=\"6\">\r\n                      Причина расхождения данных\r\n                    </Form.Label>\r\n                    <Col sm=\"6\">\r\n                      <Form.Control\r\n                      disabled={!((role === \"user\" || role === \"superuser\") && mainData.data_type === \"Из памяти прибора\")}\r\n                        id=\"reason_rashod\"\r\n                        name=\"reason_rashod\"\r\n                        as=\"select\"\r\n                        value={reason_rashod}\r\n                        onChange={(e) => setReason_rashod(e.target.value)}\r\n                      >\r\n                        <option></option>\r\n                        <option key=\"1\">\r\n                          Низкая плотность данных реального времени\r\n                        </option>\r\n                        <option key=\"2\">\r\n                          Проблема с передачей данных реального времени\r\n                        </option>\r\n                        <option key=\"3\">\r\n                          Перерасчет данных из памяти прибора\r\n                        </option>\r\n                      </Form.Control>\r\n                    </Col>\r\n                  </Form.Group>\r\n                  {/*<Form.Group as={Row}>\r\n                    <Form.Label column sm=\"6\">\r\n                      Коэффициент отсутствия данных, %\r\n                    </Form.Label>\r\n                    <Col sm=\"6\">\r\n                      <Tooltip\r\n                        title=\"Значение должно быть в диапазоне от 0 до 100\"\r\n                        arrow\r\n                      >\r\n                        <Form.Control\r\n                        disabled={!(role === \"user\" || role === \"superuser\")}\r\n                          id=\"koef_fail\"\r\n                          name=\"koef_fail\"\r\n                          type=\"number\"\r\n                          min=\"0\"\r\n                          max=\"100\"\r\n                          value={koef_fail}\r\n                          style={styleBlueInput}\r\n                          onChange={(e) =>\r\n                            setKoef_fail(\r\n                              Math.max(\r\n                                e.target.min,\r\n                                Math.min(e.target.max, e.target.value),\r\n                              ),\r\n                            )\r\n                          }\r\n                        />\r\n                      </Tooltip>\r\n                    </Col>\r\n                        </Form.Group>*/}\r\n                  <Form.Group as={Row}>\r\n                    <Form.Label column sm=\"6\">\r\n                      Петрофизическая задача\r\n                    </Form.Label>\r\n                    <Col sm=\"6\">\r\n                      <FormControl\r\n                        id=\"petrophysic_task\"\r\n                        name=\"petrophysic_task\"\r\n                        style={{minWidth: \"100%\"}}\r\n                      >\r\n                        <Select\r\n                          disabled={!(role === \"user\" || role === \"superuser\")}\r\n                          id=\"petrophysic_task\"\r\n                          name=\"petrophysic_task\"\r\n                          multiple\r\n                          value={petrophysic_selected}\r\n                          onChange={(e) => setPetrophysic(e.target.value)}\r\n                          input={\r\n                            <OutlinedInput\r\n                              style={{ height: \"38px\" }}\r\n                            />\r\n                          }\r\n                          renderValue={(selected) => petrophysic_task}\r\n                          MenuProps={MenuProps}\r\n                        >\r\n                          {petrophysic_names.map((name) => (\r\n                            <MenuItem key={name} value={name}>\r\n                              <Checkbox\r\n                                checked={\r\n                                  petrophysic_selected.indexOf(name) > -1\r\n                                }\r\n                              />\r\n                              <ListItemText primary={name} />\r\n                            </MenuItem>\r\n                          ))}\r\n                        </Select>\r\n                      </FormControl>\r\n                    </Col>\r\n                  </Form.Group>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n            <Grid item xs={8}>\r\n              <Card\r\n                sx={{ minWidth: 275 }}\r\n                elevation={4}\r\n                style={{ borderRadius: \"15px\", height: \"100%\" }}\r\n              >\r\n                <CardContent style={{ paddingBottom: \"10px\", fontWeight:\"600\" }}>\r\n                  <Row style={{backgroundColor:(drawRow(linkage)), padding:\"0.5rem\"}}>\r\n                    <Form.Label column sm=\"8\">\r\n                      Увязка кривых ГИС по глубине\r\n                    </Form.Label>\r\n                    <Col sm=\"4\">\r\n                      <Form.Control\r\n                      disabled={!(role === \"user\" || role === \"superuser\")}\r\n                        id=\"linkage\"\r\n                        name=\"linkage\"\r\n                        value={linkage}\r\n                        as=\"select\"\r\n                        onChange={(e) => setLinkage(e.target.value)}\r\n                        style={styleControlRow}\r\n                      >\r\n                        <option key=\"blankChoice\" hidden value>Выберите значение из списка</option>\r\n                        <option key=\"1\">Увязан</option>\r\n                        <option key=\"2\">Частично неувязан</option>\r\n                        <option key=\"3\">Неувязан</option>\r\n                      </Form.Control>\r\n                    </Col>\r\n                  </Row>\r\n                  <Row style={{backgroundColor:(drawRow(emissions)), padding:\"0.5rem\"}}>\r\n                    <Form.Label column sm=\"8\">\r\n                      Выбросы\r\n                    </Form.Label>\r\n                    <Col sm=\"4\">\r\n                      <Form.Control\r\n                      disabled={!(role === \"user\" || role === \"superuser\")}\r\n                        id=\"emissions\"\r\n                        name=\"emissions\"\r\n                        value={emissions}\r\n                        as=\"select\"\r\n                        onChange={(e) => setEmissions(e.target.value)}\r\n                        style={styleControlRow}\r\n                      >\r\n                        <option key=\"blankChoice\" hidden value>Выберите значение из списка</option>\r\n                        <option key=\"1\">Отсутствуют</option>\r\n                        <option key=\"2\">Единичные</option>\r\n                        <option key=\"3\">Регулярные</option>\r\n                      </Form.Control>\r\n                    </Col>\r\n                  </Row>\r\n                  <Row style={{backgroundColor:(drawRow(noise)), padding:\"0.5rem\"}}>\r\n                    <Form.Label column sm=\"8\">\r\n                      Зашумленность\r\n                    </Form.Label>\r\n                    <Col sm=\"4\">\r\n                      <Form.Control\r\n                      disabled={!(role === \"user\" || role === \"superuser\")}\r\n                        id=\"noise\"\r\n                        name=\"noise\"\r\n                        value={noise}\r\n                        as=\"select\"\r\n                        onChange={(e) => setNoise(e.target.value)}\r\n                        style={styleControlRow}\r\n                      >\r\n                        <option key=\"blankChoice\" hidden value>Выберите значение из списка</option>\r\n                        <option key=\"1\">Отсутствует</option>\r\n                        <option key=\"2\">Незначительная</option>\r\n                        <option key=\"3\">Высокая</option>\r\n                      </Form.Control>\r\n                    </Col>\r\n                  </Row>\r\n                  <Row style={{backgroundColor:(drawRow(control)), padding:\"0.5rem\"}}>\r\n                    <Form.Label column sm=\"8\">\r\n                      Контрольная запись\r\n                    </Form.Label>\r\n                    <Col sm=\"4\">\r\n                      <Form.Control\r\n                      disabled={!(role === \"user\" || role === \"superuser\")}\r\n                        id=\"control\"\r\n                        name=\"control\"\r\n                        value={control}\r\n                        as=\"select\"\r\n                        onChange={(e) => setControl(e.target.value)}\r\n                        style={styleControlRow}\r\n                      >\r\n                        <option key=\"blankChoice\" hidden value>Выберите значение из списка</option>\r\n                        <option key=\"1\">Соответствует основному замеру</option>\r\n                        <option key=\"2\">Отменена по согласованию сторон</option>\r\n                        <option key=\"3\">\r\n                          Не соответствует основной записи\r\n                        </option>\r\n                        <option key=\"4\">Не произведена</option>\r\n                      </Form.Control>\r\n                    </Col>\r\n                  </Row>\r\n                  <Row style={{backgroundColor:(drawRow(distribute_support)), padding:\"0.5rem\"}}>\r\n                    <Form.Label column sm=\"8\">\r\n                      Распределение данных ГИС при бурении на гистограммах\r\n                      относительно опорных скважин\r\n                    </Form.Label>\r\n                    <Col sm=\"4\">\r\n                      <Form.Control\r\n                      disabled={!((role === \"user\" || role === \"superuser\") && (method.split(\" \")[0] !== \"Азимутальный\" && method.split(\" \")[1] !== \"каверномер\"))}\r\n                        id=\"distribute_support\"\r\n                        name=\"distribute_support\"\r\n                        value={distribute_support}\r\n                        as=\"select\"\r\n                        onChange={(e) => setDistribute_support(e.target.value)}\r\n                        style={styleControlRow}\r\n                      >\r\n                        <option key=\"blankChoiceAzimut\" hidden value>{ method.split(\" \")[0] !== \"Азимутальный\" && method.split(\" \")[1] !== \"каверномер\" ? \"Выберите значение из списка\" : \"Недоступно для ввода\"}</option>\r\n                        <option key=\"1\">\r\n                          Соответствует данным опорных скважин\r\n                        </option>\r\n                        <option key=\"2\">\r\n                          Занижено. Данные могут быть использованы в оценке ФЕС\r\n                        </option>\r\n                        <option key=\"3\">\r\n                          Занижено. Данные некондиционные\r\n                        </option>\r\n                        <option key=\"4\">\r\n                          Завышено. Данные могут быть использованы в оценке ФЕС\r\n                        </option>\r\n                        <option key=\"5\">\r\n                          Завышено. Данные некондиционные\r\n                        </option>\r\n                      </Form.Control>\r\n                    </Col>\r\n                  </Row>\r\n                  <Row style={{backgroundColor:(drawRow(distribute_palet)), padding:\"0.5rem\"}}>\r\n                    <Form.Label column sm=\"8\">\r\n                      Распределение данных ГИС при бурении на кросс-плотах\r\n                      относительно палеток\r\n                    </Form.Label>\r\n                    <Col sm=\"4\">\r\n                      <Form.Control\r\n                      disabled={!((role === \"user\" || role === \"superuser\") && (method.split(\" \")[0] !== \"Азимутальный\" && method.split(\" \")[1] !== \"каверномер\"))}\r\n                        id=\"distribute_palet\"\r\n                        name=\"distribute_palet\"\r\n                        value={distribute_palet}\r\n                        as=\"select\"\r\n                        onChange={(e) => setDistribute_palet(e.target.value)}\r\n                        style={styleControlRow}\r\n                      >\r\n                        <option key=\"blankChoiceAzimut\" hidden value>{ method.split(\" \")[0] !== \"Азимутальный\" && method.split(\" \")[1] !== \"каверномер\" ? \"Выберите значение из списка\" : \"Недоступно для ввода\"}</option>\r\n                        <option key=\"1\">\r\n                          Лежат в области ожидаемых значений\r\n                        </option>\r\n                        <option key=\"2\">\r\n                          Не лежат в области ожидаемых значений\r\n                        </option>\r\n                      </Form.Control>\r\n                    </Col>\r\n                  </Row>\r\n                  <Row style={{backgroundColor:(drawRow(dash)), padding:\"0.5rem\"}}>\r\n                    <Form.Label column sm=\"8\">\r\n                      Показания прибора в исследуемом разрезе\r\n                    </Form.Label>\r\n                    <Col sm=\"4\">\r\n                      <Form.Control\r\n                      disabled={!(role === \"user\" || role === \"superuser\")}\r\n                        id=\"dash\"\r\n                        name=\"dash\"\r\n                        as=\"select\"\r\n                        value={dash}\r\n                        onChange={(e) => setDash(e.target.value)}\r\n                        style={styleControlRow}\r\n                      >\r\n                        <option key=\"blankChoice\" hidden value>Выберите значение из списка</option>\r\n                        <option key=\"1\">Соответствуют</option>\r\n                        <option key=\"2\">Не соответствуют</option>\r\n                      </Form.Control>\r\n                    </Col>\r\n                  </Row>\r\n                  <Row style={{backgroundColor:(drawRow(corresponse)), padding:\"0.5rem\"}}>\r\n                    <Form.Label column sm=\"8\">\r\n                      Соответствие абсолютных петрофизических значений в\r\n                      реперных горизонтах\r\n                    </Form.Label>\r\n                    <Col sm=\"4\">\r\n                      <Form.Control\r\n                      disabled={!((role === \"user\" || role === \"superuser\") && (method.split(\" \")[0] !== \"Азимутальный\" && method.split(\" \")[1] !== \"каверномер\"))}\r\n                        id=\"corresponse\"\r\n                        name=\"corresponse\"\r\n                        as=\"select\"\r\n                        value={corresponse}\r\n                        onChange={(e) => setCorresponse(e.target.value)}\r\n                        style={styleControlRow}\r\n                      >\r\n                        <option key=\"blankChoiceAzimut\" hidden value>{ method.split(\" \")[0] !== \"Азимутальный\" && method.split(\" \")[1] !== \"каверномер\" ? \"Выберите значение из списка\" : \"Недоступно для ввода\"}</option>\r\n                        <option key=\"1\">Соответствуют</option>\r\n                        <option key=\"2\">Занижены</option>\r\n                        <option key=\"3\">Завышены</option>\r\n                        <option key=\"4\">Реперные горизонты не вскрыты</option>\r\n                        <option key=\"5\">Свойства реперного горизонта отсутствуют</option>\r\n                        <option key=\"6\">Свойства реперного горизонта расходятся</option>\r\n                      </Form.Control>\r\n                    </Col>\r\n                  </Row>\r\n                  <Row style={{backgroundColor:(drawRow(correlation)), padding:\"0.5rem\"}}>\r\n                    <Form.Label column sm=\"8\">\r\n                      Корреляция с другими методами ГИС при бурении\r\n                    </Form.Label>\r\n                    <Col sm=\"4\">\r\n                        <Form.Control\r\n                        disabled={!(role === \"user\" || role === \"superuser\")}\r\n                          id=\"correlation\"\r\n                          name=\"correlation\"\r\n                          as=\"select\"\r\n                          placeholder=\"Введите значение\"\r\n                          value={correlation}\r\n                          style={styleControlRow}\r\n                          onChange={(e) => setCorrelation(e.target.value)}\r\n                        >\r\n                          <option key=\"blankChoice\" hidden value>Выберите значение из списка</option>\r\n                          <option key=\"1\">Коррелируют</option>\r\n                          <option key=\"2\">Частично коррелируют</option>\r\n                          <option key=\"3\">Не коррелируют</option>\r\n                        </Form.Control>\r\n                    </Col>\r\n                  </Row>\r\n                  <Row style={{backgroundColor:(drawRow(device_tech_condition)), padding:\"0.5rem\"}}>\r\n                    <Form.Label column sm=\"8\">\r\n                      Техническое состояние прибора по кривым и флагам LQC\r\n                    </Form.Label>\r\n                    <Col sm=\"4\">\r\n                      <Form.Control\r\n                        disabled={!((role === \"user\" || role === \"superuser\") && (lqc === \"Имеется\"))}\r\n                        id=\"device_tech_condition\"\r\n                        name=\"device_tech_condition\"\r\n                        as=\"select\"\r\n                        value={device_tech_condition}\r\n                        onChange={(e) =>\r\n                          setDevice_tech_condition(e.target.value)\r\n                        }\r\n                        style={styleControlRow}\r\n                      >\r\n                        <option key=\"blankChoice\" hidden value>{ lqc === \"Имеется\" ? \"Выберите значение из списка\" : \"Недоступно для ввода\"}</option>\r\n                        <option key=\"1\">Хорошее</option>\r\n                        <option key=\"2\">Удовлетворительное</option>\r\n                        <option key=\"3\">Неудовлетворительное</option>\r\n                      </Form.Control>\r\n                    </Col>\r\n                  </Row>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <Card\r\n                sx={{ minWidth: 275 }}\r\n                elevation={4}\r\n                style={{ borderRadius: \"15px\" }}\r\n              >\r\n                <CardContent style={{ paddingBottom: \"0\" }}>\r\n                  <Form.Group>\r\n                    <Form.Control\r\n                    disabled={!(role === \"user\" || role === \"superuser\")}\r\n                      id=\"notes\"\r\n                      name=\"notes\"\r\n                      type=\"text\"\r\n                      value={notes}\r\n                      onChange={(e) => setNotes(e.target.value)}\r\n                      placeholder=\"Введите примечания...\"\r\n                      style={{ border: \"0\" }}\r\n                    />\r\n                  </Form.Group>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n          </Grid>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button\r\n            onClick={() => {\r\n              onDelete(index);\r\n              deleteAllLocalData();\r\n              setActive();\r\n            }}\r\n            style={{ outline: \"none\", visibility: (role === \"user\" || role === \"superuser\" ? 'visible' : 'hidden')}}\r\n          >\r\n            Удалить\r\n          </Button>\r\n          <Button\r\n            onClick={() => {\r\n              onUpdate(firstRow, secondRow);\r\n              deleteAllLocalData();\r\n              setActive();\r\n            }}\r\n            style={{ outline: \"none\", visibility: (role === \"user\" || role === \"superuser\" ? 'visible' : 'hidden')}}\r\n            disabled={method && tool_type ? false : true}\r\n          >\r\n            Сохранить\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default FillDataDialog;\r\n","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Dialogs\\DensityDialog.js",["627"],"import React, {useState, useEffect} from 'react';\r\n\r\nimport {\r\n    Button,\r\n    TextField,\r\n    Dialog, DialogContent, DialogTitle, DialogActions\r\n} from \"@material-ui/core\";\r\n\r\nimport {Form} from 'react-bootstrap';\r\n\r\nfunction DensityDialog({active, setActive, density_data, onUpdate}) {\r\n    const role = localStorage.getItem('role');\r\n    const [density, setDensity] = useState(null)\r\n    const [densityData, setDensityData] = useState({});\r\n\r\n    function updateValues(e){\r\n        var inputName = e.target.name;\r\n        var inputValue = e.target.value;\r\n        if(inputName === 'density'){\r\n            setDensity(inputValue);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        setDensityData({\r\n            density: density\r\n        })\r\n    }, [density])\r\n\r\n    useEffect(() => {\r\n        setDensity(density_data.density);\r\n    }, [density_data])\r\n\r\n    return (\r\n        <>\r\n            <Dialog open={active} onClose={setActive} maxWidth=\"sm\" fullWidth>\r\n                <DialogTitle>Плотность данных: точ. на метр</DialogTitle>\r\n                <DialogContent>\r\n                    <Form onSubmit={(e) => {e.preventDefault(); onUpdate(densityData); setActive()}}>\r\n                        <Form.Group>\r\n                            <Form.Label htmlFor=\"density\">Плотность данных: точ. на метр</Form.Label>\r\n                            {density_data.density}\r\n                            <Form.Control\r\n                            disabled={!(role === \"user\" || role === \"superuser\")}\r\n                            type=\"number\"\r\n                            id=\"density\"\r\n                            name=\"density\"\r\n                            value={density}\r\n                            onChange={e => updateValues(e)}\r\n                            />\r\n                        </Form.Group>\r\n                    </Form>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                <Button onClick={() => {onUpdate(densityData) ;setActive()}} style={{outline: \"none\", visibility: (role === \"user\" || role === \"superuser\" ? 'visible' : 'hidden')}}>Сохранить</Button>\r\n                </DialogActions>\r\n            </Dialog>   \r\n        </>\r\n    )\r\n}\r\n\r\nexport default DensityDialog;","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Dialogs\\DigitalDialog.js",["628","629","630","631","632","633","634","635","636"],"import React, {useEffect, useState} from 'react';\r\n\r\nimport {\r\n    Button,\r\n    Dialog, DialogContent, DialogTitle, DialogActions\r\n} from \"@material-ui/core\";\r\nimport BootstrapSwitchButton from 'bootstrap-switch-button-react';\r\nimport ToggleButtonSizes from '../Buttons/ToggleButtonSizes/ToggleButtonSizes'\r\nimport {Form} from 'react-bootstrap';\r\nimport {calc_koef} from \"../../pages/checklist/Scripts\";\r\n\r\nfunction DigitalDialog({active, setActive, digital, digitalData, setDigitalData}) {\r\n    const role = localStorage.getItem('role');\r\n    const [wellLas, setWellLas] = useState(\"\")\r\n    const [parameteresLas, setParameteresLas] = useState(\"\")\r\n    const [curveLas, setCurveLas] = useState(\"\")\r\n    const [log_dataLas, setLog_dataLas] = useState(\"\")\r\n    const [type, setType]=useState(\"\")\r\n    const [wellWitsml, setWellWitsml] = useState(\"\")\r\n    const [parameteresWitsml, setParameteresWitsml] = useState(\"\")\r\n    const [curveWitsml, setCurveWitsml] = useState(\"\")\r\n    const [log_dataWitsml, setLog_dataWitsml] = useState(\"\")\r\n    const [digital_count, setKoef] = useState(null)\r\n    const [data_status, setData_status] = useState(\"\");\r\n    const [alignment, setAlignment] = React.useState('left');\r\n    const [correctness_dataWitsml, setCorrectness_dataWitsml]=useState(\"\");\r\n    const delete_all_props = (obj) => {\r\n        setWellLas(\"\");\r\n        setParameteresLas(\"\");\r\n        setCurveLas(\"\");\r\n        setLog_dataLas(\"\")\r\n        setWellWitsml(\"\");\r\n        setParameteresWitsml(\"\");\r\n        setCurveWitsml(\"\");\r\n        setLog_dataWitsml(\"\")\r\n        setCorrectness_dataWitsml(\"\")\r\n        setKoef(null);\r\n        for (var key in obj){\r\n            if (key !== \"type\")\r\n                obj[key] = \"\"\r\n        }\r\n        const newDig={\r\n            type: type,\r\n            wellLas: \"\",\r\n            parameteresLas: \"\",\r\n            curveLas: \"\",\r\n            log_dataLas: \"\",\r\n            wellWitsml: \"\",\r\n            parameteresWitsml: \"\",\r\n            curveWitsml: \"\",\r\n            log_dataWitsml: \"\",\r\n            correctness_dataWitsml:\"\", \r\n            digital_count: 0\r\n        }\r\n        setDigitalData(newDig)\r\n    }\r\n\r\n    const push_all_full = (obj) => {\r\n        let newDig={}\r\n        if (alignment === \"left\"){\r\n            setWellLas(\"Полная\");\r\n            setParameteresLas(\"Полная\");\r\n            setCurveLas(\"Полная\");\r\n            setLog_dataLas(\"Полная\")\r\n            newDig={\r\n                type:\"LAS\",\r\n                wellLas: \"Полная\",\r\n                parameteresLas: \"Полная\",\r\n                curveLas: \"Полная\",\r\n                log_dataLas: \"Полная\",\r\n                wellWitsml: \"\",\r\n                parameteresWitsml: \"\",\r\n                curveWitsml: \"\",\r\n                log_dataWitsml: \"\",\r\n                correctness_dataWitsml:\"\"\r\n            }\r\n        }\r\n        else if (alignment === \"center\"){\r\n            setWellWitsml(\"Полная\");\r\n            setParameteresWitsml(\"Полная\");\r\n            setCurveWitsml(\"Полная\");\r\n            setLog_dataWitsml(\"Полная\")\r\n            setCorrectness_dataWitsml(\"Полная\")\r\n            newDig={\r\n                type:\"WITSML\",\r\n                wellLas: \"\",\r\n                parameteresLas: \"\",\r\n                curveLas: \"\",\r\n                log_dataLas: \"\",\r\n                wellWitsml: \"Полная\",\r\n                parameteresWitsml: \"Полная\",\r\n                curveWitsml: \"Полная\",\r\n                log_dataWitsml: \"Полная\", \r\n                correctness_dataWitsml: \"Полная\"\r\n            }\r\n        }\r\n        else{\r\n            setWellLas(\"Полная\");\r\n            setParameteresLas(\"Полная\");\r\n            setCurveLas(\"Полная\");\r\n            setLog_dataLas(\"Полная\")\r\n            setWellWitsml(\"Полная\");\r\n            setParameteresWitsml(\"Полная\");\r\n            setCurveWitsml(\"Полная\");\r\n            setLog_dataWitsml(\"Полная\")\r\n            setCorrectness_dataWitsml(\"Полная\")\r\n            newDig={\r\n                type:\"LAS+WITSML\",\r\n                wellLas: \"Полная\",\r\n                parameteresLas: \"Полная\",\r\n                curveLas: \"Полная\",\r\n                log_dataLas: \"Полная\",\r\n                wellWitsml: \"Полная\",\r\n                parameteresWitsml: \"Полная\",\r\n                curveWitsml: \"Полная\",\r\n                log_dataWitsml: \"Полная\",\r\n                correctness_dataWitsml:\"Полная\"\r\n            }\r\n        }\r\n        newDig.digital_count=calc_koef(newDig)\r\n        setDigitalData(newDig)\r\n    }\r\n    function onUpdate(){\r\n        \r\n        const newDig={\r\n            type:type,\r\n            wellLas: wellLas,\r\n            parameteresLas: parameteresLas,\r\n            curveLas: curveLas,\r\n            log_dataLas: log_dataLas,\r\n            wellWitsml: wellWitsml,\r\n            parameteresWitsml: parameteresWitsml,\r\n            curveWitsml: curveWitsml,\r\n            log_dataWitsml: log_dataWitsml,\r\n            correctness_dataWitsml:correctness_dataWitsml\r\n        }\r\n        newDig.digital_count=calc_koef(newDig)\r\n        setDigitalData(newDig)\r\n    }\r\n    function updateValues(e){\r\n        var inputName = e.target.name;\r\n        var inputValue = e.target.value;\r\n        if(inputName === 'wellLas'){\r\n            setWellLas(inputValue);\r\n        }\r\n        else if(inputName === 'parameteresLas'){\r\n            setParameteresLas(inputValue);\r\n        }\r\n        else if(inputName === 'curveLas'){\r\n            setCurveLas(inputValue);\r\n        }\r\n        else if(inputName === 'log_dataLas'){\r\n            setLog_dataLas(inputValue);\r\n        }\r\n        else if(inputName === 'wellWitsml'){\r\n            setWellWitsml(inputValue)\r\n        }\r\n        else if (inputName === 'parameteresWitsml'){\r\n            setParameteresWitsml(inputValue);\r\n        }\r\n        else if (inputName === 'curveWitsml'){\r\n            setCurveWitsml(inputValue);\r\n        }\r\n        else if (inputName === 'log_dataWitsml'){\r\n            setLog_dataWitsml(inputValue);\r\n        }\r\n        else if (inputName === 'correctness_dataWitsml'){\r\n            setCorrectness_dataWitsml(inputValue);\r\n        }\r\n     }\r\n     useEffect(() => {\r\n         \r\n            setWellLas(\"\");\r\n            setParameteresLas(\"\");\r\n            setCurveLas(\"\");\r\n            setLog_dataLas(\"\")\r\n            setWellWitsml(\"\");\r\n            setParameteresWitsml(\"\");\r\n            setCurveWitsml(\"\");\r\n            setLog_dataWitsml(\"\")\r\n        setCorrectness_dataWitsml(\"\")\r\n\r\n        if(alignment=='left'){\r\n            setType(\r\n                \"LAS\",\r\n            )\r\n        }\r\n        else if (alignment=='center'){\r\n            setType(\r\n                \"WITSML\",\r\n            )\r\n        }\r\n        else{\r\n            setType(\r\n                \"LAS+WITSML\",\r\n            )\r\n        }\r\n     }, [alignment])\r\n     \r\n     useEffect(()=>{\r\n        if(digitalData.type=='LAS'){\r\n            setAlignment(\r\n                \"left\",\r\n            )\r\n        }\r\n        else if (digitalData.type=='WITSML'){\r\n            setAlignment(\r\n                \"center\",\r\n            )\r\n        }\r\n        else{\r\n            setAlignment(\r\n                \"right\",\r\n            )\r\n        }\r\n        setWellLas(digitalData.wellLas)\r\n        setParameteresLas(digitalData.parameteresLas)\r\n        setCurveLas(digitalData.curveLas)\r\n        setLog_dataLas(digitalData.log_dataLas)\r\n        setType(digitalData.type)\r\n        setWellWitsml(digitalData.wellWitsml)\r\n        setParameteresWitsml(digitalData.parameteresWitsml)\r\n        setCurveWitsml(digitalData.curveWitsml)\r\n        setLog_dataWitsml(digitalData.log_dataWitsml)\r\n        setCorrectness_dataWitsml(digitalData.correctness_dataWitsml)\r\n     }, [setActive])\r\n\r\n    return (\r\n        <>\r\n            <Dialog open={active} onClose={setActive} maxWidth=\"sm\" fullWidth>\r\n                <DialogTitle>\r\n                    Полнота предоставления\r\n                    <div style={{float:\"right\"}}>\r\n                    <ToggleButtonSizes \r\n                        alignment={alignment}\r\n                        setAlignment={setAlignment}\r\n                        />\r\n                    </div>\r\n                    <br/> цифровых данных\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                <Form>\r\n                    <p style={{fontWeight:\"700\"}}>Параметры LAS</p>\r\n                    <Form.Group>\r\n                        <Form.Label htmlFor=\"wellLas\">Секция «Well»</Form.Label>\r\n                        <Form.Control disabled={!(alignment === \"left\" || alignment === \"right\")} as=\"select\" id=\"wellLas\" name=\"wellLas\" value={wellLas} onChange={e => updateValues(e)}>\r\n                            <option></option>\r\n                            <option>Полная</option>\r\n                            <option>Частичная</option>\r\n                            <option>Отсутствует</option>\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n                    <Form.Group>\r\n                        <Form.Label htmlFor=\"parameteresLas\">Секция «Parameters»</Form.Label>\r\n                        <Form.Control disabled={!(alignment === \"left\" || alignment === \"right\")} as=\"select\" id=\"parameteresLas\" name=\"parameteresLas\" value={parameteresLas} onChange={e => updateValues(e)}>\r\n                            <option></option>\r\n                            <option>Полная</option>\r\n                            <option>Частичная</option>\r\n                            <option>Отсутствует</option>\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n                    <Form.Group>\r\n                        <Form.Label htmlFor=\"curveLas\">Секция «Curve»</Form.Label>\r\n                        <Form.Control disabled={!(alignment === \"left\" || alignment === \"right\")} as=\"select\" id=\"curveLas\" name=\"curveLas\" value={curveLas} onChange={e => updateValues(e)}>\r\n                            <option></option>\r\n                            <option>Полная</option>\r\n                            <option>Частичная</option>\r\n                            <option>Отсутствует</option>\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n                    <Form.Group>\r\n                        <Form.Label htmlFor=\"log_dataLas\">Секция «Log data»</Form.Label>\r\n                        <Form.Control disabled={!(alignment === \"left\" || alignment === \"right\")} as=\"select\" id=\"log_dataLas\" name=\"log_dataLas\" value={log_dataLas} onChange={e => updateValues(e)}>\r\n                            <option></option>\r\n                            <option>Полная</option>\r\n                            <option>Частичная</option>\r\n                            <option>Отсутствует</option>\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n                    <p style={{marginTop:\"30px\", fontWeight:\"700\"}}>Параметры WITSML</p>\r\n                    <Form.Group>\r\n                        <Form.Label htmlFor=\"well\">Секция «Well»</Form.Label>\r\n                        <Form.Control disabled={!(alignment === \"center\" || alignment === \"right\")} as=\"select\" id=\"well\" name=\"wellWitsml\" value={wellWitsml} onChange={e => updateValues(e)}>\r\n                            <option></option>\r\n                            <option>Полная</option>\r\n                            <option>Частичная</option>\r\n                            <option>Отсутствует</option>\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n                    <Form.Group>\r\n                        <Form.Label htmlFor=\"parameteres\">Секция «Parameters»</Form.Label>\r\n                        <Form.Control disabled={!(alignment === \"center\" || alignment === \"right\")} as=\"select\" id=\"parameteres\" name=\"parameteresWitsml\" value={parameteresWitsml} onChange={e => updateValues(e)}>\r\n                            <option></option>\r\n                            <option>Полная</option>\r\n                            <option>Частичная</option>\r\n                            <option>Отсутствует</option>\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n                    <Form.Group>\r\n                        <Form.Label htmlFor=\"curve\">Секция «Curve»</Form.Label>\r\n                        <Form.Control disabled={!(alignment === \"center\" || alignment === \"right\")} as=\"select\" id=\"curve\" name=\"curveWitsml\" value={curveWitsml} onChange={e => updateValues(e)}>\r\n                            <option></option>\r\n                            <option>Полная</option>\r\n                            <option>Частичная</option>\r\n                            <option>Отсутствует</option>\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n                    <Form.Group>\r\n                        <Form.Label htmlFor=\"log_data\">Секция «Log data»</Form.Label>\r\n                        <Form.Control disabled={!(alignment === \"center\" || alignment === \"right\")} as=\"select\" id=\"log_data\" name=\"log_dataWitsml\" value={log_dataWitsml} onChange={e => updateValues(e)}>\r\n                            <option></option>\r\n                            <option>Полная</option>\r\n                            <option>Частичная</option>\r\n                            <option>Отсутствует</option>\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n                    <Form.Group>\r\n                        <Form.Label htmlFor=\"correctness_dataWitsml\">Корректность загрузки данных на сервер WITSML</Form.Label>\r\n                        <Form.Control disabled={!(alignment === \"center\" || alignment === \"right\")} as=\"select\" id=\"correctness_dataWitsml\" name=\"correctness_dataWitsml\" value={correctness_dataWitsml} onChange={e => updateValues(e)}>\r\n                            <option></option>\r\n                            <option>Полная</option>\r\n                            <option>Частичная</option>\r\n                            <option>Отсутствует</option>\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n                </Form>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                <Button onClick={() => {delete_all_props(digitalData);setActive()}} style={{outline: \"none\", visibility: (role === \"user\" || role === \"superuser\" ? 'visible' : 'hidden')}}>Удалить</Button>\r\n                <Button onClick={() => {push_all_full(digitalData); setActive()}} style={{outline: \"none\", visibility: (role === \"user\" || role === \"superuser\" ? 'visible' : 'hidden')}}>Все полные</Button>\r\n                <Button onClick={() => {onUpdate(); setActive()}} style={{outline: \"none\", visibility: (role === \"user\" || role === \"superuser\" ? 'visible' : 'hidden')}}>Сохранить</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default DigitalDialog;","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Dialogs\\FullnessDialog.js",["637","638"],"import React, {useState , useEffect} from 'react';\r\n\r\nimport {\r\n    Button,\r\n    Dialog, DialogContent, DialogTitle, DialogActions\r\n} from \"@material-ui/core\";\r\n\r\nimport {Form} from 'react-bootstrap';\r\nimport {calc_koef} from \"../../pages/checklist/Scripts\"\r\n\r\nfunction FullnessDialog({active, setActive, fullness, fullnessData, setFullnessData}) {\r\n    const role = localStorage.getItem('role');\r\n    const [act, setAct] = useState(\"\")\r\n    const [titul_list, setTitul_list] = useState(\"\")\r\n    const [well_construction, setWell_construction] = useState(\"\")\r\n    const [wellbore_sizes, setWellbore_sizes] = useState(\"\")\r\n    const [chrono_data, setChrono_data] = useState(\"\")\r\n    const [sol_data, setSol_data] = useState(\"\")\r\n    const [dash_comp, setDash_comp] = useState(\"\")\r\n    const [summary_data, setSummary_data] = useState(\"\")\r\n    const [inklino_data, setInklino_data] = useState(\"\")\r\n    const [main_record, setMain_record] = useState(\"\")\r\n    const [parametr, setParametr] = useState(\"\")\r\n    const [control_record, setControl_record] = useState(\"\")\r\n    const [lqc, setLqc] = useState(\"\")\r\n    const [calibration, setCalibration] = useState(\"\")\r\n    const [full_inf_count, setKoef] = useState(null)\r\n\r\n    const push_data = ()=>{\r\n        const obj={act: act,\r\n        titul_list: titul_list,\r\n        well_construction: well_construction,\r\n        wellbore_sizes: wellbore_sizes,\r\n        chrono_data: chrono_data,\r\n        sol_data: sol_data,\r\n        dash_comp: dash_comp,\r\n        summary_data: summary_data,\r\n        inklino_data: inklino_data,\r\n        main_record: main_record,\r\n        parametr: parametr,\r\n        control_record: control_record,\r\n        lqc: lqc,\r\n        calibration: calibration,\r\n        full_inf_count: full_inf_count}\r\n        const full_inf_count_new=calc_koef(obj)\r\n        setKoef(full_inf_count_new)\r\n    }\r\n\r\n    const push_all_full = (obj) => {\r\n        setAct(\"Имеется\")\r\n        setTitul_list(\"Полная\")\r\n        setWell_construction(\"Полная\")\r\n        setWellbore_sizes(\"Полная\")\r\n        setChrono_data(\"Полная\")\r\n        setSol_data(\"Полная\")\r\n        setDash_comp(\"Полная\")\r\n        setSummary_data(\"Полная\")\r\n        setInklino_data(\"Полная\")\r\n        setMain_record(\"Полная\")\r\n        setParametr(\"Полная\")\r\n        setControl_record(\"Полная\")\r\n        setLqc(\"Имеется\")\r\n        setCalibration(\"Полная\")\r\n        for (var key in obj){\r\n            if (key !== \"full_inf_count\"){\r\n                if (key !== \"act\"\r\n                && key !== \"lqc\")\r\n                    obj[key] = \"Полная\"\r\n                else\r\n                    obj[key] = \"Имеется\"\r\n            }\r\n        }\r\n        const full_inf_count_new=calc_koef(obj)\r\n        setKoef(full_inf_count_new)\r\n    }\r\n\r\n\r\n    const push_all_none = (obj) => {\r\n        setAct(\"Не имеется\")\r\n        setTitul_list(\"Отсутствует\")\r\n        setWell_construction(\"Отсутствует\")\r\n        setWellbore_sizes(\"Отсутствует\")\r\n        setChrono_data(\"Отсутствует\")\r\n        setSol_data(\"Отсутствует\")\r\n        setDash_comp(\"Отсутствует\")\r\n        setSummary_data(\"Отсутствует\")\r\n        setInklino_data(\"Отсутствует\")\r\n        setMain_record(\"Отсутствует\")\r\n        setParametr(\"Отсутствует\")\r\n        setControl_record(\"Отсутствует\")\r\n        setLqc(\"Не имеется\")\r\n        setCalibration(\"Отсутствует\")\r\n        for (var key in obj){\r\n            if (key !== \"full_inf_count\"){\r\n                if (key !== \"act\"\r\n                && key !== \"lqc\")\r\n                    obj[key] = \"Отсутствует\"\r\n                else\r\n                    obj[key] = \"Не имеется\"\r\n            }\r\n        }\r\n        const full_inf_count_new=calc_koef(obj)\r\n        setKoef(full_inf_count_new)\r\n    }\r\n\r\n    function updateValues(e){\r\n        var inputName = e.target.name;\r\n        var inputValue = e.target.value;\r\n        if(inputName === 'titul_list'){\r\n            setTitul_list(inputValue);\r\n        }else if(inputName === 'well_construction'){\r\n            setWell_construction(inputValue);\r\n        }\r\n        else if(inputName === 'welbore_sizes'){\r\n            setWellbore_sizes(inputValue);\r\n        }\r\n        else if(inputName === 'chrono_data'){\r\n            setChrono_data(inputValue);\r\n        }\r\n        else if(inputName === 'sol_data'){\r\n            setSol_data(inputValue);\r\n        }\r\n        else if(inputName === 'dash_comp'){\r\n            setDash_comp(inputValue);\r\n        }\r\n        else if(inputName === 'summary_data'){\r\n            setSummary_data(inputValue);\r\n        }\r\n        else if(inputName === 'inklino_data'){\r\n            setInklino_data(inputValue);\r\n        }\r\n        else if(inputName === 'main_record'){\r\n            setMain_record(inputValue);\r\n        }\r\n        else if(inputName === 'parametr'){\r\n            setParametr(inputValue);\r\n        }\r\n        else if(inputName === 'control_record'){\r\n            setControl_record(inputValue);\r\n        }\r\n        else if(inputName === 'lqc'){\r\n            setLqc(inputValue);\r\n        }\r\n        else if(inputName === 'calibration'){\r\n            setCalibration(inputValue);\r\n        }\r\n        else if(inputName === 'act'){\r\n            setAct(inputValue);\r\n        }\r\n     }\r\n\r\n     useEffect(() => {\r\n\r\n        setFullnessData({\r\n            act: act,\r\n            titul_list: titul_list,\r\n            well_construction: well_construction,\r\n            wellbore_sizes: wellbore_sizes,\r\n            chrono_data: chrono_data,\r\n            sol_data: sol_data,\r\n            dash_comp: dash_comp,\r\n            summary_data: summary_data,\r\n            inklino_data: inklino_data,\r\n            main_record: main_record,\r\n            parametr: parametr,\r\n            control_record: control_record,\r\n            lqc: lqc,\r\n            calibration: calibration,\r\n            full_inf_count: full_inf_count\r\n        });\r\n     }, [full_inf_count])\r\n     useEffect(()=>{\r\n        setAct(fullnessData.act)\r\n        setTitul_list(fullnessData.titul_list)\r\n        setWell_construction(fullnessData.well_construction)\r\n        setWellbore_sizes(fullnessData.wellbore_sizes)\r\n        setChrono_data(fullnessData.chrono_data)\r\n        setSol_data(fullnessData.sol_data)\r\n        setDash_comp(fullnessData.dash_comp)\r\n        setSummary_data(fullnessData.summary_data)\r\n        setInklino_data(fullnessData.inklino_data)\r\n        setMain_record(fullnessData.main_record)\r\n        setParametr(fullnessData.parametr)\r\n        setControl_record(fullnessData.control_record)\r\n        setLqc(fullnessData.lqc)\r\n        setCalibration(fullnessData.calibration)\r\n     }, [setActive])\r\n    return (\r\n        <>\r\n            <Dialog open={active} onClose={setActive} maxWidth=\"sm\" fullWidth>\r\n                <DialogTitle>Полнота предоставления данных на планшете</DialogTitle>\r\n                <DialogContent>\r\n                    <Form>\r\n                        <Form.Group>\r\n                        <Form.Label htmlFor=\"act\">Акт промера бурового инструмента с указанием длины свечей и порядка их спуска</Form.Label>\r\n                        <Form.Control disabled={!(role === \"user\" || role === \"superuser\")} as=\"select\" id=\"act\" name=\"act\" value={act} onChange={e => updateValues(e)}>\r\n                            <option></option>\r\n                            <option>Имеется</option>\r\n                            <option>Не имеется</option>\r\n                        </Form.Control>\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                        <Form.Label htmlFor=\"titul_list\">Титульный лист</Form.Label>\r\n                        <Form.Control disabled={!(role === \"user\" || role === \"superuser\")} as=\"select\" id=\"titul_list\" name=\"titul_list\" value={titul_list} onChange={e => updateValues(e)}>\r\n                            <option></option>\r\n                            <option>Полная</option>\r\n                            <option>Частичная</option>\r\n                            <option>Отсутствует</option>\r\n                        </Form.Control>\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                        <Form.Label htmlFor=\"well_construction\">Конструкция скважины</Form.Label>\r\n                        <Form.Control disabled={!(role === \"user\" || role === \"superuser\")} as=\"select\" id=\"well_construction\" name=\"well_construction\" value={well_construction} onChange={e => updateValues(e)}>\r\n                            <option></option>\r\n                            <option>Полная</option>\r\n                            <option>Частичная</option>\r\n                            <option>Отсутствует</option>\r\n                        </Form.Control>\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                        <Form.Label htmlFor=\"welbore_sizes\">Размеры ствола/колонны/НКТ</Form.Label>\r\n                        <Form.Control disabled={!(role === \"user\" || role === \"superuser\")} as=\"select\" id=\"welbore_sizes\" name=\"welbore_sizes\" value={wellbore_sizes} onChange={e => updateValues(e)}>\r\n                            <option></option>\r\n                            <option>Полная</option>\r\n                            <option>Частичная</option>\r\n                            <option>Отсутствует</option>\r\n                        </Form.Control>\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                        <Form.Label htmlFor=\"chrono_data\">Хронология, сводные данные по скважине</Form.Label>\r\n                        <Form.Control disabled={!(role === \"user\" || role === \"superuser\")} as=\"select\" id=\"chrono_data\" name=\"chrono_data\" value={chrono_data} onChange={e => updateValues(e)}>\r\n                            <option></option>\r\n                            <option>Полная</option>\r\n                            <option>Частичная</option>\r\n                            <option>Отсутствует</option>\r\n                        </Form.Control>\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                        <Form.Label htmlFor=\"sol_data\">Данные по буровому раствору</Form.Label>\r\n                        <Form.Control disabled={!(role === \"user\" || role === \"superuser\")} as=\"select\" id=\"sol_data\" name=\"sol_data\" value={sol_data} onChange={e => updateValues(e)}>\r\n                            <option></option>\r\n                            <option>Полная</option>\r\n                            <option>Частичная</option>\r\n                            <option>Отсутствует</option>\r\n                        </Form.Control>\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                        <Form.Label htmlFor=\"dash_comp\">Компоновка приборов и примечания</Form.Label>\r\n                        <Form.Control disabled={!(role === \"user\" || role === \"superuser\")} as=\"select\" id=\"dash_comp\" name=\"dash_comp\" value={dash_comp} onChange={e => updateValues(e)}>\r\n                            <option></option>\r\n                            <option>Полная</option>\r\n                            <option>Частичная</option>\r\n                            <option>Отсутствует</option>\r\n                        </Form.Control>\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                        <Form.Label htmlFor=\"summary_data\">Сводные данные контроля глубины</Form.Label>\r\n                        <Form.Control disabled={!(role === \"user\" || role === \"superuser\")} as=\"select\" id=\"summary_data\" name=\"summary_data\" value={summary_data} onChange={e => updateValues(e)}>\r\n                            <option></option>\r\n                            <option>Полная</option>\r\n                            <option>Частичная</option>\r\n                            <option>Отсутствует</option>\r\n                        </Form.Control>\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                        <Form.Label htmlFor=\"inklino_data\">Данные инклинометрии</Form.Label>\r\n                        <Form.Control disabled={!(role === \"user\" || role === \"superuser\")} as=\"select\" id=\"inklino_data\" name=\"inklino_data\" value={inklino_data} onChange={e => updateValues(e)}>\r\n                            <option></option>\r\n                            <option>Полная</option>\r\n                            <option>Частичная</option>\r\n                            <option>Отсутствует</option>\r\n                        </Form.Control>\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                        <Form.Label htmlFor=\"main_record\">Основная запись</Form.Label>\r\n                        <Form.Control disabled={!(role === \"user\" || role === \"superuser\")} as=\"select\" id=\"main_record\" name=\"main_record\" value={main_record} onChange={e => updateValues(e)}>\r\n                            <option></option>\r\n                            <option>Полная</option>\r\n                            <option>Частичная</option>\r\n                            <option>Отсутствует</option>\r\n                        </Form.Control>\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                        <Form.Label htmlFor=\"parametr\">Параметры обработки данных и параметры приборов</Form.Label>\r\n                        <Form.Control disabled={!(role === \"user\" || role === \"superuser\")} as=\"select\" id=\"parametr\" name=\"parametr\" value={parametr} onChange={e => updateValues(e)}>\r\n                            <option></option>\r\n                            <option>Полная</option>\r\n                            <option>Частичная</option>\r\n                            <option>Отсутствует</option>\r\n                        </Form.Control>\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                        <Form.Label htmlFor=\"control_record\">Контрольная запись</Form.Label>\r\n                        <Form.Control disabled={!(role === \"user\" || role === \"superuser\")} as=\"select\" id=\"control_record\" name=\"control_record\" value={control_record} onChange={e => updateValues(e)}>\r\n                            <option></option>\r\n                            <option>Полная</option>\r\n                            <option>Частичная</option>\r\n                            <option>Отсутствует</option>\r\n                        </Form.Control>\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                        <Form.Label htmlFor=\"lqc\">LQC планшеты</Form.Label>\r\n                        <Form.Control disabled={!(role === \"user\" || role === \"superuser\")} as=\"select\" id=\"lqc\" name=\"lqc\" value={lqc} onChange={e => updateValues(e)}>\r\n                            <option></option>\r\n                            <option>Имеется</option>\r\n                            <option>Не имеется</option>\r\n                        </Form.Control>\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                        <Form.Label htmlFor=\"calibration\">Калибровка приборов</Form.Label>\r\n                        <Form.Control disabled={!(role === \"user\" || role === \"superuser\")} as=\"select\" id=\"calibration\" name=\"calibration\" value={calibration} onChange={e => updateValues(e)}>\r\n                            <option></option>\r\n                            <option>Полная</option>\r\n                            <option>Частичная</option>\r\n                            <option>Отсутствует</option>\r\n                        </Form.Control>\r\n                        </Form.Group>\r\n                    </Form>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                <Button onClick={() => {push_all_none(fullnessData);setActive() }} style={{outline: \"none\", visibility: (role === \"user\" || role === \"superuser\" ? 'visible' : 'hidden')}}>Все отсутствует</Button>\r\n                <Button onClick={() => {push_all_full(fullnessData); setActive()}} style={{outline: \"none\", visibility: (role === \"user\" || role === \"superuser\" ? 'visible' : 'hidden')}}>Все полные</Button>\r\n                <Button onClick={() => { push_data(); setActive()}} style={{outline: \"none\", visibility: (role === \"user\" || role === \"superuser\" ? 'visible' : 'hidden')}}>Сохранить</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default FullnessDialog;","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\pages\\reports\\Scripts.js",[],"C:\\Users\\s_martyanova\\CheckList\\Front\\src\\pages\\checklist\\styles.js",[],"C:\\Users\\s_martyanova\\CheckList\\Front\\src\\pages\\checklist\\Scripts.js",["639","640","641","642","643","644","645","646","647"],"\r\nexport function calc_koef(obj) {\r\n    var koef = 0;\r\n    for (var key in obj){\r\n        if (obj[key] === \"Полная\" || obj[key] === \"Имеется\")\r\n            koef += 1;\r\n        if (obj[key] === \"Частичная\")\r\n            koef += 0.5;\r\n        if (obj[key] === \"Отсутствует\" || obj[key] === \"Не имеется\")\r\n            koef += 0;\r\n    }\r\n    let count=0;\r\n    if(obj.type=='LAS'){\r\n        count=4;\r\n    }\r\n    else if (obj.type=='WITSML'){\r\n        count=5\r\n    }\r\n    else if (obj.type ==\"LAS+WITSML\"){\r\n        count=9\r\n    }\r\n    else{\r\n        count = 14\r\n    }\r\n    const digitalCount=parseFloat((koef / (count) *100).toFixed(2))\r\n    return digitalCount\r\n    /*if (obj.hasOwnProperty('las_file_count')){\r\n        obj.las_file_count = Math.round(koef / (Object.keys(obj).length - 2) *100);\r\n        return;\r\n    }\r\n    if (obj.hasOwnProperty('witsml_count')){\r\n        obj.witsml_count = Math.round(koef / (Object.keys(obj).length - 2) *100);\r\n        return;\r\n    }*/\r\n}\r\n\r\nexport function push_all_full(obj) {\r\n    for (var key in obj){\r\n        if (key !== \"koef\"){\r\n            obj[key] = \"Полная\"\r\n        }\r\n    }\r\n}\r\n\r\nexport function delete_all_props(obj) {\r\n    for (var key in obj){\r\n        obj[key] = \"\"\r\n    }\r\n}\r\n\r\nexport function prepare_for_put_inform_method(arr, methods, service_devices) {\r\n    var post_inform_method = [];\r\n    var id_post = null;\r\n    for (var i = 0; i < arr.length; i++) {\r\n        if (arr[i].id === null)\r\n            id_post = -arr[i].index;\r\n        else\r\n            id_post = arr[i].id;\r\n        post_inform_method[i] = {\r\n            ...arr[i],\r\n            id: id_post,\r\n            method_id: methods.find(m => m.name === arr[i].method).id,\r\n            service_device_id: service_devices.find(s => s.tool_type === arr[i].tool_type).service_device_id\r\n        }\r\n        delete post_inform_method[i].method;\r\n        delete post_inform_method[i].tool_type;\r\n        delete post_inform_method[i].index;\r\n    }\r\n    return post_inform_method;\r\n}\r\n\r\nexport function prepare_for_post_inform_method(arr, methods, service_devices) {\r\n    var post_inform_method = [];\r\n    for (var i = 0; i < arr.length; i++) {\r\n        post_inform_method[i] = {\r\n            ...arr[i],\r\n            id: arr[i].index,\r\n            method_id: methods.find(m => m.name === arr[i].method).id,\r\n            service_device_id: service_devices.find(s => s.tool_type === arr[i].tool_type).service_device_id\r\n        }\r\n        delete post_inform_method[i].method;\r\n        delete post_inform_method[i].tool_type;\r\n        delete post_inform_method[i].index;\r\n    }\r\n    return post_inform_method;\r\n}\r\n\r\nexport function prepare_for_put_secondtable(arr, methods) {\r\n    console.log(arr)\r\n    var post_second_table = [];\r\n    var id_post = null;\r\n    for (var i = 0; i < arr.length; i++) {\r\n        if (arr[i].inform_for_method_id !== null)\r\n            id_post = arr[i].inform_for_method_id;\r\n        else\r\n            id_post = -arr[i].index;\r\n        post_second_table[i] = {\r\n            ...arr[i],\r\n            inform_for_method_id: id_post,\r\n            method_id: methods.find(m => m.name === arr[i].method).id\r\n        }\r\n        delete post_second_table[i].method;\r\n        delete post_second_table[i].index;\r\n    }\r\n    return post_second_table;\r\n}\r\n\r\nexport function prepare_for_post_secondtable(arr, methods) {\r\n    var post_second_table = [];\r\n    for (var i = 0; i < arr.length; i++) {\r\n        post_second_table[i] = {\r\n            ...arr[i],\r\n            inform_for_method_id: arr[i].index,\r\n            method_id: methods.find(m => m.name === arr[i].method).id\r\n        }\r\n        delete post_second_table[i].method;\r\n        delete post_second_table[i].index;\r\n    }\r\n    return post_second_table;\r\n}\r\n\r\nexport function check_validity(customer, field, num_pad, num_well, num_wellbore, data_type, section_interval_start, section_interval_end) {\r\n    var checkvalues = false;\r\n    customer === \"\" || field === \"\" || num_pad === \"\" || num_well === \"\" || num_wellbore === \"\" || data_type === \"\" || section_interval_start === null || section_interval_end === null ? checkvalues = false : checkvalues = true;\r\n    return checkvalues\r\n}","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Toasts\\SuccessToast.js",[],"C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Toasts\\NoChangesToast.js",[],"C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Toasts\\ValidityToast.js",[],"C:\\Users\\s_martyanova\\CheckList\\Front\\src\\pages\\calcScripts.js",["648"],"function parametres_to_number(param) {\r\n    if (param === \"Свойства реперного горизонта отсутствуют\" || param === \"Реперные горизонты не вскрыты\" || param === \"Отменена по согласованию сторон\" || param === \"Низкая плотность данных реального времени\" || param === \"Коррелируют\" || param === \"Имеется\" || param === \"Увязан\" || param === \"Отсутствуют\" || param === \"Отсутствует\" || param === \"Соответствует основному замеру\" || param === \"Соответствует данным опорных скважин\" || param === \"Лежат в области ожидаемых значений\" || param === \"Соответствуют\" || param === \"Хорошее\" || param === \"Полная\") {\r\n        return Number(1);\r\n    }\r\n    else if (param === \"Частичная\" || param === \"Занижены\" || param === \"Завышены\" || param === \"Проблема с передачей данных реального времени\" || param === \"Частично коррелируют\" || param === \"Частично неувязан\" || param === \"Единичные\" || param === \"Незначительная\" || param === \"Занижено. Данные могут быть использованы в оценке ФЕС\" || param === \"Завышено. Данные могут быть использованы в оценке ФЕС\" || param === \"Удовлетворительное\") {\r\n        return Number(0.5);\r\n    }\r\n    else if (param === undefined || param === \"Свойства реперного горизонта расходятся\" || param === \"Перерасчет данных из памяти прибора\" || param === \"Не соответствует основной записи\" || param === \"Не коррелируют\" || param === \"Не имеется\" || param === \"Неувязан\" || param === \"Регулярные\" || param === \"Высокая\" || param === \"Не произведена\" || param === \"Не лежат в области ожидаемых значений\" || param === \"Занижено. Данные некондиционные\" || param === \"Завышено. Данные некондиционные\" || param === \"Не соответствуют\" || param === \"Неудовлетворительное\") {\r\n        return Number(0);\r\n    } else { return param; }\r\n}\r\n\r\nexport function calc_value_rt_azimut(secondrow, lqc, petrophysic_task) {\r\n    console.log('petrophysic_task', petrophysic_task)\r\n    var res = 0\r\n    for (var key in secondrow){\r\n        if (key !== \"method\" && key !== \"method_value\" && key !== \"notes\" && key !== \"inform_for_method_id\" && key !== \"method_id\" && key !== \"index\" && key !== \"device_tech_condition\" && key !== \"distribute_palet\" && key !== \"distribute_support\" && key !== \"corresponse\")\r\n            if (lqc === \"Не имеется\" || lqc === \"\")\r\n                res += parametres_to_number(secondrow[key]) * 12\r\n            else\r\n                res += parametres_to_number(secondrow[key]) * 9\r\n    }\r\n    if (lqc !== \"Не имеется\" && lqc !== \"\")\r\n        res += parametres_to_number(secondrow[\"device_tech_condition\"]) * 18\r\n    if (petrophysic_task!==null && petrophysic_task!==undefined){\r\n        console.log('calc_value_rt_azimut', petrophysic_task)\r\n        res=res*Number(petrophysic_task)\r\n    }\r\n    return res;\r\n}\r\n\r\n// расчёт по реальному времени\r\nexport function calc_value_rt(secondrow, lqc, digitalData_type) {\r\n    var res = 0\r\n    for (var key in secondrow){\r\n        if (key !== \"method\" && key !== \"method_value\" && key !== \"notes\" && key !== \"inform_for_method_id\" && key !== \"method_id\" && key !== \"index\" && key !== \"device_tech_condition\")\r\n            if (lqc === \"Не имеется\" || lqc === \"\")\r\n                res += parametres_to_number(secondrow[key]) * 8\r\n            else\r\n                res += parametres_to_number(secondrow[key]) * 6\r\n    }\r\n    if (lqc !== \"Не имеется\" && lqc !== \"\") \r\n        res += parametres_to_number(secondrow[\"device_tech_condition\"]) * 18\r\n    return res;\r\n}\r\n\r\nexport function calc_value_memory(secondrow, lqc, koef_shod) {\r\n    var res = 0\r\n        for (var key in secondrow){\r\n            if (key !== \"method\" && key !== \"method_value\" && key !== \"notes\" && key !== \"inform_for_method_id\" && key !== \"method_id\" && key !== \"index\" && key !== \"device_tech_condition\")\r\n                if (lqc === \"Не имеется\" || lqc === \"\")\r\n                    res += parametres_to_number(secondrow[key]) * 7\r\n                else\r\n                    res += parametres_to_number(secondrow[key]) * 5 \r\n        }\r\n        if (lqc !== \"Не имеется\" && lqc !== \"\") \r\n            res += parametres_to_number(secondrow[\"device_tech_condition\"]) * 18\r\n        res += koef_shod * 0.09\r\n    return res;\r\n}\r\n\r\nexport function calc_value_memory_azimut(secondrow, lqc, koef_shod, digitalData_type) {\r\n    var res = 0\r\n        for (var key in secondrow){\r\n            if (key !== \"method\" && key !== \"method_value\" && key !== \"notes\" && key !== \"inform_for_method_id\" && key !== \"method_id\" && key !== \"index\" && key !== \"device_tech_condition\" && key !== \"distribute_palet\" && key !== \"distribute_support\" && key !== \"corresponse\")\r\n                if (digitalData_type !== \"LAS\")\r\n                    if (lqc === \"Не имеется\" || lqc === \"\")\r\n                        res += parametres_to_number(secondrow[key]) * 10\r\n                    else{\r\n                        res += parametres_to_number(secondrow[key]) * 7 \r\n                    }\r\n                else\r\n                    if (lqc === \"Не имеется\" || lqc === \"\")\r\n                        res += parametres_to_number(secondrow[key]) * 10.5\r\n                    else\r\n                        res += parametres_to_number(secondrow[key]) * 7.5\r\n        }\r\n        if (lqc !== \"Не имеется\" && lqc !== \"\")\r\n            res += parametres_to_number(secondrow[\"device_tech_condition\"]) * 18\r\n        if (digitalData_type !== \"LAS\") \r\n            res += koef_shod * 0.12\r\n        else\r\n            res += koef_shod * 0.09 \r\n    return res;\r\n}\r\nexport function calc_tablet_digitalData(digital_count,typeDigital, full_inf_count){\r\n    var res=0\r\n    if (typeDigital==='LAS+WITSML'){\r\n        res+=digital_count*0.14\r\n        res+=full_inf_count*0.14\r\n    }\r\n    else if (typeDigital==='LAS' || typeDigital==='WITSML'){\r\n        res+=digital_count*0.1\r\n        res+=full_inf_count*0.18\r\n    }\r\n    return parseFloat(res.toFixed(2))\r\n}\r\n\r\nexport function calc_finish_value(rows, digital_count,typeDigital, full_inf_count) {\r\n    var res = 0\r\n    var petro_sum = 0\r\n    var method_sum=0\r\n    for (var i = 0; i < rows.length; i++) {\r\n        method_sum += (rows[i].method_value+calc_tablet_digitalData(digital_count, typeDigital, full_inf_count))*Number(rows[i].petrophysic_task)\r\n        petro_sum += Number(rows[i].petrophysic_task)\r\n    }\r\n    if(rows.length)\r\n        res+=method_sum/rows.length\r\n    return res;\r\n}","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Dialogs\\EditFieldDialog.js",["649","650"],"import React, {useState, useEffect} from 'react';\r\n\r\nimport {\r\n    Button,\r\n    Dialog, DialogContent, DialogTitle, DialogActions\r\n} from \"@material-ui/core\";\r\n\r\nimport {Form} from 'react-bootstrap';\r\n\r\nfunction EditFieldDialog({active, setActive, field_id, field_name, fullData, setFullData, isDisabledEditDeposits, error, setError, textError, setTextError}) {\r\n    const [field, setField] = useState(\"\");\r\n    \r\n    function onSubmitField(e){\r\n        e.preventDefault()\r\n        if(field){\r\n            setError(false)\r\n        fetch(process.env.REACT_APP_API+'fields/id/'+ field_id +'?format=json',{\r\n            method: 'PUT',\r\n            headers:{\r\n                'Accept':'application/json',\r\n                'Content-Type':'application/json',\r\n                'Authorization': \"Token \" + localStorage.getItem('id_token')\r\n            },\r\n            body: JSON.stringify({\r\n                \"name\": field\r\n            }) \r\n        }).then((res)=>{if (!res.ok)\r\n            {\r\n               \r\n                if (res.status==400){\r\n                    setTextError('Ошибка: месторождение с таким названием уже существует')\r\n                }\r\n                else{\r\n                    setTextError(`Ошибка ${res.status}`)\r\n                }\r\n        }\r\n        else {\r\n            isDisabledEditDeposits.current=true\r\n            let isName=false;\r\n            const newFullData=fullData.map((item)=>{\r\n                if(!isName){\r\n                for (let i=0; i<item.field.length; i+=1){\r\n                    if (item.field[i].id==field_id){\r\n                        item.field[i].name=field\r\n                        isName=true\r\n                        break\r\n                    }\r\n                }\r\n                }\r\n                return item\r\n            })\r\n            setFullData(newFullData)\r\n            setTextError('')\r\n            \r\n    }\r\n    })\r\n}\r\nelse{\r\n    setTextError('')\r\n    setError(true)\r\n}\r\n    };\r\n\r\n    useEffect(() => {\r\n        setField(field_name);\r\n    }, [field_name])\r\n\r\n    return (\r\n        <>\r\n            <Dialog open={active} onClose={setActive} maxWidth=\"xs\" fullWidth>\r\n                <DialogTitle>Изменить название месторождения</DialogTitle>\r\n                <Form name=\"addfield\">\r\n                    <DialogContent>\r\n                        <Form.Group>\r\n                            <Form.Control\r\n                            type=\"text\"\r\n                            id=\"edit_field\"\r\n                            value={field}\r\n                            onChange={e => setField(e.target.value)}\r\n                            />\r\n                        </Form.Group>\r\n                    </DialogContent>\r\n                <DialogActions>\r\n                    <Button type=\"submit\" onClick={onSubmitField} style={{outline: \"none\"}}>Сохранить</Button>\r\n                </DialogActions>\r\n                <Form.Text style={{fontSize: \"14px\", color: \"red\", paddingLeft:\"10px\", visibility: (error ? 'visible' : 'hidden')}}>\r\n                        Поля не могут оставаться пустыми!\r\n                </Form.Text>\r\n                <Form.Text style={{fontSize: \"14px\", color: \"red\", paddingLeft:\"10px\", marginBottom:\"20px\"}}>\r\n                        {textError}\r\n                </Form.Text>\r\n                </Form>\r\n            </Dialog>   \r\n        </>\r\n    )\r\n}\r\n\r\nexport default EditFieldDialog;","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Dialogs\\EditCustomerDialog.js",["651","652","653"],"import React, {useState, useEffect} from 'react';\r\n\r\nimport {\r\n    Button,\r\n    Dialog, DialogContent, DialogTitle, DialogActions\r\n} from \"@material-ui/core\";\r\n\r\nimport {Form} from 'react-bootstrap';\r\n\r\nfunction EditCustomerDialog({active, setActive, customer_id, customer_name, customer_short, fullData, setFullData, isDisabledEditCustomer, error, setError, textError, setTextError}) {\r\n    const [customer, setCustomer] = useState(\"\");\r\n    const [customerShort, setCustomerShort] = useState(\"\");\r\n    const [isDisabled, setIsDisabled]=useState(false)\r\n    function onSubmitCustomer(e){\r\n        e.preventDefault()\r\n        if (!!customer && !!customerShort) {\r\n            setError(false)\r\n            fetch(process.env.REACT_APP_API+'customers/'+ customer_id +'?format=json',{\r\n                method: 'PUT',\r\n                headers:{\r\n                    'Accept':'application/json',\r\n                    'Content-Type':'application/json',\r\n                    'Authorization': \"Token \" + localStorage.getItem('id_token')\r\n                },\r\n                body: JSON.stringify({\r\n                    \"name\": customer,\r\n                    \"short\": customerShort\r\n                }) \r\n            }).then((res)=>{if (!res.ok)\r\n                {\r\n                   \r\n                    if (res.status==400){\r\n                        setTextError('Ошибка: сокращённое или полное название совпадает с названием другого общества')\r\n                    }\r\n                    else{\r\n                        setTextError(`Ошибка ${res.status}`)\r\n                    }\r\n            }\r\n            else {\r\n                isDisabledEditCustomer.current=true\r\n                const newFullData=fullData.map((item)=>{\r\n                    if (item.id==customer_id){\r\n                        item.name=customer\r\n                        item.short=customerShort\r\n                    }\r\n                    return item\r\n                })\r\n                setIsDisabled(true)\r\n                setFullData(newFullData)\r\n                setTextError('')\r\n                \r\n        }\r\n        })\r\n        }   \r\n        else {\r\n            setTextError('')\r\n            setError(true)\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        setCustomer(customer_name);\r\n        setCustomerShort(customer_short);\r\n    }, [customer_name, customer_short])\r\n\r\n    return (\r\n        <>\r\n            <Dialog open={active} onClose={setActive} maxWidth=\"xs\" fullWidth>\r\n                <DialogTitle>Изменить название общества</DialogTitle>\r\n                <Form name=\"editcustomer\">\r\n                    <DialogContent>\r\n                        <Form.Group>\r\n                            <Form.Label htmlFor=\"edit_customer\">Полное название</Form.Label>\r\n                            <Form.Control\r\n                            type=\"text\"\r\n                            id=\"edit_customer\"\r\n                            value={customer}\r\n                            onChange={e => setCustomer(e.target.value)} \r\n                            />\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <Form.Label htmlFor=\"edit_customer_short\">Сокращенное название</Form.Label>\r\n                            <Form.Control\r\n                            type=\"text\"\r\n                            id=\"edit_customer_short\"\r\n                            value={customerShort}\r\n                            onChange={e => setCustomerShort(e.target.value)} \r\n                            />\r\n                            <Form.Text style={{fontSize: \"14px\", color: \"red\", visibility: (error ? 'visible' : 'hidden')}}>\r\n                                Поля не могут оставаться пустыми!\r\n                            </Form.Text>\r\n                            <Form.Text style={{fontSize: \"14px\", color: \"red\", margin: \"0 auto\"}}>\r\n                                {textError}\r\n                            </Form.Text>\r\n                        </Form.Group>\r\n                    </DialogContent>\r\n                <DialogActions>\r\n                    <Button type=\"button\" onClick={onSubmitCustomer} style={{outline: \"none\"}}>Сохранить</Button>\r\n                </DialogActions>\r\n                </Form>\r\n            </Dialog>  \r\n        </>\r\n    )\r\n}\r\n\r\nexport default EditCustomerDialog;","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Dialogs\\AddFieldDialog.js",["654","655"],"import React, {useState} from 'react';\r\n\r\nimport {\r\n    Button,\r\n    TextField,\r\n    Dialog, DialogContent, DialogTitle, DialogActions\r\n} from \"@material-ui/core\";\r\n\r\nimport {Form} from 'react-bootstrap';\r\n\r\nfunction AddFieldDialog({active, setActive, customer_id, fullData, setFullData, isDisabledAddDeposits, error, setError, textError, setTextError}) {\r\n    const [field, setField] = useState(\"\");\r\n    const getCustomers = () => {\r\n        fetch(process.env.REACT_APP_API+'full_data_customers/?format=json', { headers : { \r\n          'Content-Type': 'application/json',\r\n          'Accept': 'application/json',\r\n          'Authorization': \"Token \" + localStorage.getItem('id_token'),\r\n         }\r\n      }) \r\n        .then(response=>response.json())\r\n        .then(data=>{\r\n            setFullData(data);\r\n        })\r\n      }\r\n    function onSubmitField(e){\r\n        e.preventDefault()\r\n        if (field){\r\n            setError(false)\r\n        fetch(process.env.REACT_APP_API+'fields/'+ customer_id +'?format=json',{\r\n            method: 'POST',\r\n            headers:{\r\n                'Accept':'application/json',\r\n                'Content-Type':'application/json',\r\n                'Authorization': \"Token \" + localStorage.getItem('id_token')\r\n            },\r\n            body: JSON.stringify({\r\n                \"name\": field\r\n            }) \r\n        }).then((res)=>{if (!res.ok)\r\n            {\r\n                if (res.status==400){\r\n                    setTextError('Ошибка: месторождение с таким именем уже существует')\r\n                }\r\n                else{\r\n                    setTextError(`Ошибка ${res.status}`)\r\n                }\r\n                }\r\n        else {\r\n            isDisabledAddDeposits.current=true\r\n            getCustomers()\r\n            setTextError('')\r\n            \r\n    }\r\n    })\r\n}\r\nelse{\r\n    setTextError('')\r\n    setError(true)\r\n}\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Dialog open={active} onClose={setActive} maxWidth=\"xs\" fullWidth>\r\n                <DialogTitle>Добавить месторождение</DialogTitle>\r\n                <Form name=\"addfield\">\r\n                    <DialogContent>\r\n                        <Form.Group>\r\n                            <Form.Control\r\n                            required\r\n                            type=\"text\"\r\n                            id=\"add_field\"\r\n                            onChange={e => setField(e.target.value)} \r\n                            placeholder=\"Введите название месторождения\"\r\n                            />\r\n                        </Form.Group>\r\n                    </DialogContent>\r\n                <DialogActions>\r\n                    <Button type=\"button\" onClick={onSubmitField} style={{outline: \"none\"}}>Сохранить</Button>\r\n                    \r\n                </DialogActions>\r\n                <Form.Text style={{fontSize: \"14px\", color: \"red\", paddingLeft:\"10px\", visibility: (error ? 'visible' : 'hidden')}}>\r\n                                Поля не могут оставаться пустыми!\r\n                            </Form.Text>\r\n                            <Form.Text style={{fontSize: \"14px\", color: \"red\", paddingLeft:\"10px\", marginBottom:\"20px\"}}>\r\n                                {textError}\r\n                            </Form.Text>\r\n                </Form>\r\n            </Dialog>   \r\n        </>\r\n    )\r\n}\r\n\r\nexport default AddFieldDialog;","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Dialogs\\AddCustomerDialog.js",["656","657","658"],"import React, {useState, useEffect} from 'react';\r\n\r\nimport {\r\n    Button,\r\n    TextField,\r\n    Dialog, DialogContent, DialogTitle, DialogActions\r\n} from \"@material-ui/core\";\r\nimport {Form} from 'react-bootstrap';\r\n\r\nfunction AddCustomerDialog({active, setActive, setFullData, isDisabledAddCustomer, error, setError, textError, setTextError}) {\r\n    const [customer, setCustomer] = useState(\"\");\r\n    const [customerShort, setCustomerShort] = useState(\"\");\r\n    const getCustomers = () => {\r\n        fetch(process.env.REACT_APP_API+'full_data_customers/?format=json', { headers : { \r\n          'Content-Type': 'application/json',\r\n          'Accept': 'application/json',\r\n          'Authorization': \"Token \" + localStorage.getItem('id_token'),\r\n         }\r\n      }) \r\n        .then(response=>response.json())\r\n        .then(data=>{\r\n            setFullData(data);\r\n        })\r\n      }\r\n    function onSubmitCustomer(e){\r\n        e.preventDefault()\r\n        if(customer && customerShort){\r\n            setError(false) \r\n        fetch(process.env.REACT_APP_API+'customers/?format=json',{\r\n            method: 'POST',\r\n            headers:{\r\n                'Accept':'application/json',\r\n                'Content-Type':'application/json',\r\n                'Authorization': \"Token \" + localStorage.getItem('id_token')\r\n            },\r\n            body: JSON.stringify({\r\n                \"name\": customer,\r\n                \"short\": customerShort\r\n            }) \r\n        }).then((res)=>{if (!res.ok)\r\n            {\r\n                if (res.status==400){\r\n                    setTextError('Ошибка: сокращённое или полное название совпадает с названием другого общества')\r\n                }\r\n                else{\r\n                    setTextError(`Ошибка ${res.status}`)\r\n                }\r\n        }\r\n        else {\r\n            isDisabledAddCustomer.current=true\r\n            getCustomers()\r\n            setTextError('')\r\n            setCustomer('');\r\n            setCustomerShort('')\r\n    }\r\n    })\r\n}\r\nelse{\r\n    setTextError('')\r\n    setError(true) \r\n}\r\n    };\r\n    return (\r\n        <>\r\n       \r\n            <Dialog open={active} onClose={setActive} maxWidth=\"xs\" fullWidth>\r\n                <DialogTitle>Добавить общество группы</DialogTitle>\r\n                <Form name=\"addcustomer\">\r\n                    <DialogContent>\r\n                        <Form.Group>\r\n                            <Form.Label htmlFor=\"add_customer\">Полное название</Form.Label>\r\n                            <Form.Control\r\n                            required\r\n                            type=\"text\"\r\n                            id=\"add_customer\"\r\n                            value={customer}\r\n                            onChange={e => setCustomer(e.target.value)} \r\n                            placeholder=\"Введите полное название общества\"\r\n                            />\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <Form.Label htmlFor=\"add_customer_short\">Сокращенное название</Form.Label>\r\n                            <Form.Control\r\n                            required\r\n                            type=\"text\"\r\n                            id=\"add_customer_short\"\r\n                            value={customerShort}\r\n                            onChange={e => setCustomerShort(e.target.value)} \r\n                            placeholder=\"Введите сокращенное название общества\"\r\n                            />\r\n                            <Form.Text style={{fontSize: \"14px\", color: \"red\", visibility: (error ? 'visible' : 'hidden')}}>\r\n                                Поля не могут оставаться пустыми!\r\n                            </Form.Text>\r\n                            <Form.Text style={{fontSize: \"14px\", color: \"red\", margin: \"0 auto\"}}>\r\n                                {textError}\r\n                            </Form.Text>\r\n                        </Form.Group>\r\n                    </DialogContent>\r\n                <DialogActions>\r\n                    <Button type=\"button\" onClick={onSubmitCustomer} style={{outline: \"none\"}}>Сохранить</Button>\r\n                </DialogActions>\r\n                </Form>\r\n            </Dialog> \r\n       \r\n        </>\r\n    )\r\n}\r\n\r\nexport default AddCustomerDialog;","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Toolbar\\CustomToolbarSelectWithAdd.js",[],"C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Dialogs\\EditSampleExDialog.js",[],"C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\PageTitle\\PageTitle.js",[],"C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Dialogs\\AddToolDialog.js",["659"],"import React, {useState, useEffect} from 'react';\r\n\r\nimport {\r\n    Button,\r\n    TextField,\r\n    Dialog, DialogContent, DialogTitle, DialogActions\r\n} from \"@material-ui/core\";\r\n\r\nimport {Form} from 'react-bootstrap';\r\n\r\nfunction AddToolDialog({active, setActive, service_id}) {\r\n    const constant = false;\r\n    const [tool, setTool] = useState(\"\");\r\n    const [method, setMethod] = useState(\"\");\r\n    const [allMethodsData, setAllMethodsData]= useState([]);\r\n\r\n    function onSubmitTool(e){\r\n        fetch(process.env.REACT_APP_API+'service_methods/' + service_id + '/' + allMethodsData.find(item => item.name === method).id + '?format=json',{\r\n            method: 'POST',\r\n            headers:{\r\n                'Accept':'application/json',\r\n                'Content-Type':'application/json',\r\n                'Authorization': \"Token \" + localStorage.getItem('id_token')\r\n            },\r\n            body: JSON.stringify({\r\n                \"tool_type\": tool\r\n            }) \r\n        })\r\n    };\r\n\r\n    const getAllMethods = () => {\r\n        fetch(process.env.REACT_APP_API+'methods/?format=json', { headers : { \r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n            'Authorization': \"Token \" + localStorage.getItem('id_token')\r\n           }\r\n        }) \r\n        .then(response=>response.json())\r\n        .then(data=>{\r\n            setAllMethodsData(data);\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        getAllMethods();\r\n    }, [constant])\r\n\r\n    return (\r\n        <>\r\n            <Dialog open={active} onClose={setActive} maxWidth=\"xs\" fullWidth>\r\n                <DialogTitle>Добавить инструмент</DialogTitle>\r\n                <Form name=\"addtool\" onSubmit={onSubmitTool}>\r\n                    <DialogContent>\r\n                        <Form.Group controlId=\"chooseMethod\">\r\n                            <Form.Label>Выберите метод</Form.Label>\r\n                            <Form.Control required as=\"select\" controlId=\"choose_method\" name=\"choose_method\" value={method} onChange={event => setMethod(event.target.value)}>\r\n                                <option hidden disabled></option>\r\n                                {allMethodsData.map(item => <option key={item.id} value={item.name}>{item.name}</option>)}\r\n                            </Form.Control>\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <Form.Control\r\n                            required\r\n                            type=\"text\"\r\n                            id=\"add_tool\"\r\n                            onChange={e => setTool(e.target.value)} \r\n                            placeholder=\"Введите название инструмента\"\r\n                            />\r\n                        </Form.Group>\r\n                    </DialogContent>\r\n                <DialogActions>\r\n                    <Button type=\"submit\" style={{outline: \"none\"}}>Сохранить</Button>\r\n                </DialogActions>\r\n                </Form>\r\n            </Dialog>   \r\n        </>\r\n    )\r\n}\r\n\r\nexport default AddToolDialog;","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Header\\styles.js",[],"C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Sidebar\\styles.js",[],"C:\\Users\\s_martyanova\\CheckList\\Front\\src\\pages\\dashboard\\mock.js",[],"C:\\Users\\s_martyanova\\CheckList\\Front\\src\\pages\\dashboard\\Arial.js",["660"],"﻿import { jsPDF } from \"jspdf\"\r\nexport var font = '';\r\nvar callAddFont = function () {\r\nthis.addFileToVFS('Arial-normal.ttf', font);\r\nthis.addFont('Arial-normal.ttf', 'Arial', 'normal');\r\n};\r\njsPDF.API.events.push(['addFonts', callAddFont])\r\n","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Toasts\\ErrorToast.js",[],"C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Sidebar\\components\\Dot.js",["661"],"import React from \"react\";\r\nimport { makeStyles, useTheme } from \"@material-ui/styles\";\r\nimport classnames from \"classnames\";\r\n\r\n// styles\r\nvar useStyles = makeStyles(theme => ({\r\n  dotBase: {\r\n    width: 8,\r\n    height: 8,\r\n    backgroundColor: theme.palette.text.hint,\r\n    borderRadius: \"50%\",\r\n    transition: theme.transitions.create(\"background-color\"),\r\n  },\r\n  dotSmall: {\r\n    width: 5,\r\n    height: 5\r\n  },\r\n  dotLarge: {\r\n    width: 11,\r\n    height: 11,\r\n  },\r\n}));\r\n\r\nexport default function Dot({ size, color }) {\r\n  var classes = useStyles();\r\n  var theme = useTheme();\r\n\r\n  return (\r\n    <div\r\n      className={classnames(classes.dotBase, {\r\n        [classes.dotLarge]: size === \"large\",\r\n        [classes.dotSmall]: size === \"small\",\r\n      })}\r\n      style={{\r\n        backgroundColor:\r\n          color\r\n      }}\r\n    />\r\n  );\r\n}\r\n","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Sidebar\\components\\SidebarLink\\SidebarLink.js",[],"C:\\Users\\s_martyanova\\CheckList\\Front\\src\\pages\\dashboard\\styles.js",[],"C:\\Users\\s_martyanova\\CheckList\\Front\\src\\pages\\dashboard\\components\\Table\\Table.js",[],"C:\\Users\\s_martyanova\\CheckList\\Front\\src\\pages\\dashboard\\components\\CustomChart\\ServicesBarChart.js",["662","663","664","665","666","667","668","669","670","671","672"],"import React, { useState, useEffect } from \"react\"\r\n\r\nimport \"../../../../pages/styles.css\"\r\nimport { Line as LineJS } from 'chart.js/auto'\r\nimport { Chart } from 'react-chartjs-2'\r\nimport ChartDataLabels from 'chartjs-plugin-datalabels';\r\nimport Loading from \"../../../../components/Loading/Loading\";\r\nimport {\r\n    Grid,\r\n    Card,\r\n    CardContent,\r\n    Select,\r\n    MenuItem\r\n} from \"@material-ui/core\";\r\nimport {\r\n    BarChart,\r\n    Tooltip,\r\n    YAxis,\r\n    XAxis,\r\n    LabelList\r\n} from \"recharts\";\r\nfunction ServicesBarChart(props) {\r\n    const datasetsService = []\r\n    const keys = Object.keys(props.data.services)\r\n    for (var i = 0, l = keys.length; i < l; i++) {\r\n        datasetsService.push(\r\n            {\r\n                type: \"bar\",\r\n                data: props.data.services[keys[i]],\r\n                label: keys[i],\r\n                borderColor: \"#3333ff\",\r\n                backgroundColor: '#' + (Math.random().toString(16) + '000000').substring(2,8).toUpperCase(),\r\n                datalabels: {\r\n                    color: 'white',\r\n                    font: {\r\n                        weight: 'bold',\r\n                        size: 14\r\n                    },\r\n                    display: function (context) {\r\n                        return context.dataset.data[context.dataIndex] > 10;\r\n                    },\r\n                    zIndex: 100000,\r\n                    fontWeight: 900\r\n                }\r\n            },\r\n        )\r\n\r\n    }\r\n    var options = {\r\n\r\n\r\n        scales: {\r\n            x: {\r\n                stacked: true\r\n            },\r\n            y: {\r\n                stacked: true\r\n            }\r\n        },\r\n    };\r\n    const lineChartData = {\r\n        labels: props.data.month,\r\n        datasets: datasetsService\r\n    }\r\n    const plugins = [ChartDataLabels]\r\n    return (\r\n        <Grid item xs={12}>\r\n            <Card sx={{ width: \"100%\" }}>\r\n                <CardContent>\r\n                    <Grid container>\r\n                        <Grid item xs={12} style={{ display: \"flex\", justifyContent: \"center\", alignItems: 'center' }}>\r\n                            <p style={{ fontSize: \"25px\", marginTop: \"1rem\" }}>{props.title}</p>\r\n                        </Grid>\r\n                        <Grid item xs={12} style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n                            <Chart ref={props.chartRefServices} data={lineChartData} plugins={plugins} options={options} />\r\n                        </Grid>\r\n                    </Grid>\r\n                </CardContent>\r\n            </Card>\r\n        </Grid>\r\n    )\r\n\r\n}\r\n\r\nexport default ServicesBarChart","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\pages\\dashboard\\components\\CustomChart\\ControlBarChart.js",["673","674","675","676","677","678","679","680","681","682","683"],"import React, { useState, useEffect } from \"react\"\r\n\r\nimport \"../../../../pages/styles.css\"\r\nimport { Line as LineJS } from 'chart.js/auto'\r\nimport { Chart }            from 'react-chartjs-2'\r\nimport ChartDataLabels from 'chartjs-plugin-datalabels';\r\nimport Loading from \"../../../../components/Loading/Loading\";\r\nimport {\r\n    Grid,\r\n    Card,\r\n    CardContent,\r\n    Select,\r\n    MenuItem\r\n  } from \"@material-ui/core\";\r\n  import {\r\n    BarChart,\r\n    Tooltip,\r\n    YAxis,\r\n    XAxis,\r\n    LabelList\r\n  } from \"recharts\";\r\n  function ControlBarChart(props) {\r\n      var options = {\r\n   \r\n   \r\n        scales: {\r\n            x: {\r\n                stacked: true\r\n            },\r\n            y: {\r\n                stacked: true\r\n            }\r\n        },\r\n    };\r\n      const lineChartData = {\r\n        labels: props.data.month,\r\n        datasets: [\r\n          {\r\n            type:\"bar\",\r\n            data: props.data.detaineesWell,\r\n            label: \"Количество задержанных отчётов\",\r\n            borderColor: \"#3333ff\",\r\n            backgroundColor: '#AE0000',\r\n            datalabels: {\r\n                color: 'white',\r\n                font: {\r\n                  weight: 'bold',\r\n                  size: 14\r\n              },\r\n                display: function(context) {\r\n                  return context.dataset.data[context.dataIndex] > 10;\r\n              },\r\n                zIndex: 100000,\r\n                fontWeight:900\r\n            }\r\n          },\r\n          {\r\n            type:\"bar\",\r\n            data: props.data.completedWell,\r\n            label: \"Количество вовремя сделанных отчётов\",\r\n            backgroundColor: '#F6D106',\r\n            datalabels: {\r\n              color: 'white',\r\n              font: {\r\n                weight: 'bold',\r\n                size: 14\r\n            },\r\n              display: function(context) {\r\n                return context.dataset.data[context.dataIndex] > 10;\r\n            },\r\n              zIndex: 100000,\r\n              fontWeight:900\r\n          }\r\n          },\r\n        ]}\r\n        const plugins=[ChartDataLabels]\r\n    return (\r\n        <Grid item xs={12}>\r\n          <Card sx={{width: \"100%\"}}>\r\n            <CardContent>\r\n            <Grid container>\r\n              <Grid item xs={12} style={{display: \"flex\", justifyContent: \"center\", alignItems: 'center'}}>\r\n                <p style={{fontSize: \"25px\", marginTop: \"1rem\"}}>{props.title}</p>\r\n              </Grid>\r\n              <Grid item xs={12} style={{display: \"flex\", justifyContent: \"center\"}}>\r\n              <Chart ref={props.chartRefControl} data={lineChartData} plugins={plugins} options={options}/>\r\n              </Grid>\r\n            </Grid>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n    )\r\n    \r\n  }\r\n\r\n  export default ControlBarChart","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\pages\\dashboard\\components\\CustomChart\\SocietyBarChart.js",["684","685","686","687","688","689","690","691","692","693","694","695"],"import React, { useState, useEffect } from \"react\"\r\n\r\nimport \"../../../../pages/styles.css\"\r\nimport { Line as LineJS } from 'chart.js/auto'\r\nimport { Chart }            from 'react-chartjs-2'\r\nimport ChartDataLabels from 'chartjs-plugin-datalabels';\r\nimport Loading from \"../../../../components/Loading/Loading\";\r\nimport {\r\n    Grid,\r\n    Card,\r\n    CardContent,\r\n    Select,\r\n    MenuItem\r\n  } from \"@material-ui/core\";\r\n  import {\r\n    BarChart,\r\n    Tooltip,\r\n    YAxis,\r\n    XAxis,\r\n    LabelList\r\n  } from \"recharts\";\r\n  function SocietyBarChart(props) {\r\n      var options = {\r\n        layout:function(context){\r\n            return context\r\n        },\r\n   \r\n        scales: {\r\n            x: {\r\n                stacked: true\r\n            },\r\n            y: {\r\n                stacked: true\r\n            }\r\n        },\r\n    };\r\n      const lineChartData = {\r\n        labels: props.month,\r\n        datasets: [\r\n          {\r\n            type:\"bar\",\r\n            data: props.data[\"ООО «РН-Юганскнефтегаз»\"],\r\n            label: \"ООО «РН-Юганскнефтегаз»\",\r\n            backgroundColor: '#FF8C00',\r\n            lineTension: 0.5,\r\n            borderDash: [5, 5],\r\n          },\r\n          {\r\n            type:\"bar\",\r\n            data: props.data[\"ООО «РН-Пурнефтегаз»\"],\r\n            label: \"ООО «РН-Пурнефтегаз»\",\r\n            backgroundColor: '#F89915',\r\n            lineTension: 0.5,\r\n            borderDash: [5, 5],\r\n          },\r\n          {\r\n            type:\"bar\",\r\n            data: props.data[\"АО «Тюменнефтегаз»\"],\r\n            label: \"АО «Тюменнефтегаз»\",\r\n            borderColor: \"#F0E68C\",\r\n            backgroundColor: '#F0E68C',\r\n            lineTension: 0.5,\r\n            borderDash: [5, 5],\r\n          },\r\n          {\r\n            type:\"bar\",\r\n            data: props.data[\"АО «РОСПАН ИНТЕРНЕШНЛ»\"],\r\n            label: \"АО «РОСПАН ИНТЕРНЕШНЛ»\",\r\n            backgroundColor: '#AE0000',\r\n            lineTension: 0.5,\r\n            borderDash: [5, 5],\r\n          },\r\n          {\r\n            type:\"bar\",\r\n            data: props.data[\"АО «Верхнечонскнефтегаз»\"],\r\n            label: \"АО «Верхнечонскнефтегаз»\",\r\n            backgroundColor: '#FE7B2A',\r\n            lineTension: 0.5,\r\n            borderDash: [5, 5],\r\n            \r\n          },\r\n          {\r\n            type:\"bar\",\r\n            data: props.data[\"АО «Сибнефтегаз»\"],\r\n            label: \"АО «Сибнефтегаз»\",\r\n            backgroundColor: '#F6D106',\r\n            lineTension: 0.5,\r\n            borderDash: [5, 5],\r\n          },\r\n          {\r\n            type:\"bar\",\r\n            data: props.data[\"АО «НК «Конданефть»\"],\r\n            label: \"АО «НК «Конданефть»\",\r\n            backgroundColor: '#95A0B2',\r\n            lineTension: 0.5,\r\n            borderDash: [5, 5],\r\n          },\r\n          {\r\n            type:\"bar\",\r\n            data: props.data['ООО \"АнгараНефть\"'],\r\n            label: 'ООО \"АнгараНефть\"',\r\n            borderColor: \"#FF6347\",\r\n            backgroundColor: '#FF6347',\r\n            lineTension: 0.5,\r\n            borderDash: [5, 5],\r\n          },\r\n          {\r\n            type:\"bar\",\r\n            data: props.data[\"АО «Востсибнефтегаз»\"],\r\n            label: \"АО «Восточно-Сибирская нефтегазовая компания»\",\r\n            backgroundColor: '#C93D00',\r\n            lineTension: 0.5,\r\n            borderDash: [5, 5],\r\n          },\r\n        ]}\r\n        const plugins=[]\r\n    return (\r\n        <Grid item xs={12}>\r\n          <Card sx={{width: \"100%\"}}>\r\n            <CardContent>\r\n            <Grid container>\r\n              <Grid item xs={12} style={{display: \"flex\", justifyContent: \"center\", alignItems: 'center'}}>\r\n                <p style={{fontSize: \"25px\", marginTop: \"1rem\"}}>{props.title}</p>\r\n              </Grid>\r\n              <Grid item xs={12} style={{display: \"flex\", justifyContent: \"center\"}}>\r\n              <Chart ref={props.chartRefSociety} data={lineChartData} plugins={plugins} options={options}/>\r\n              </Grid>\r\n            </Grid>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n    )\r\n    \r\n  }\r\n\r\n  export default SocietyBarChart","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\pages\\dashboard\\components\\CustomChart\\EscortBarChart.js",["696","697","698","699","700","701","702","703","704","705","706"],"import React, { useState, useEffect } from \"react\"\r\n\r\nimport \"../../../../pages/styles.css\"\r\nimport { Line as LineJS } from 'chart.js/auto'\r\nimport { Chart }            from 'react-chartjs-2'\r\nimport ChartDataLabels from 'chartjs-plugin-datalabels';\r\nimport Loading from \"../../../../components/Loading/Loading\";\r\nimport {\r\n    Grid,\r\n    Card,\r\n    CardContent,\r\n    Select,\r\n    MenuItem\r\n  } from \"@material-ui/core\";\r\n  import {\r\n    BarChart,\r\n    Tooltip,\r\n    YAxis,\r\n    XAxis,\r\n    LabelList\r\n  } from \"recharts\";\r\n  function EscortBarChart(props) {\r\n      var options = {\r\n   \r\n   \r\n        scales: {\r\n            x: {\r\n                stacked: true\r\n            },\r\n            y: {\r\n                stacked: true\r\n            }\r\n        },\r\n    };\r\n      const lineChartData = {\r\n        labels: props.data.month,\r\n        datasets: [\r\n          {\r\n            type:\"bar\",\r\n            data: props.data.dataAroundClock,\r\n            label: \"Количество скважин Круглосуточно\",\r\n            borderColor: \"#3333ff\",\r\n            backgroundColor: '#FF8C00',\r\n            datalabels: {\r\n                color: 'white',\r\n                font: {\r\n                  weight: 'bold',\r\n                  size: 14\r\n              },\r\n                display: function(context) {\r\n                  return context.dataset.data[context.dataIndex] > 10;\r\n              },\r\n                zIndex: 100000,\r\n                fontWeight:900\r\n            }\r\n          },\r\n          {\r\n            type:\"bar\",\r\n            data: props.data.dataTZ,\r\n            label: \"Количество скважин ТЗ\",\r\n            backgroundColor: '#F6D106',\r\n            datalabels: {\r\n              color: 'white',\r\n              font: {\r\n                weight: 'bold',\r\n                size: 14\r\n            },\r\n              display: function(context) {\r\n                return context.dataset.data[context.dataIndex] > 10;\r\n            },\r\n              zIndex: 100000,\r\n              fontWeight:900\r\n          }\r\n          },\r\n        ]}\r\n        const plugins=[ChartDataLabels]\r\n    return (\r\n        <Grid item xs={12}>\r\n          <Card sx={{width: \"100%\"}}>\r\n            <CardContent>\r\n            <Grid container>\r\n              <Grid item xs={12} style={{display: \"flex\", justifyContent: \"center\", alignItems: 'center'}}>\r\n                <p style={{fontSize: \"25px\", marginTop: \"1rem\"}}>{props.title}</p>\r\n              </Grid>\r\n              <Grid item xs={12} style={{display: \"flex\", justifyContent: \"center\"}}>\r\n              <Chart ref={props.chartRefEscort} data={lineChartData} plugins={plugins} options={options}/>\r\n              </Grid>\r\n            </Grid>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n    )\r\n    \r\n  }\r\n\r\n  export default EscortBarChart","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\pages\\dashboard\\components\\CustomChart\\CustomBarChart.js",["707","708","709","710","711","712","713","714","715","716","717","718","719","720"],"import React, { useState, useEffect } from \"react\"\r\n\r\nimport \"../../../../pages/styles.css\"\r\nimport { Line as LineJS } from 'chart.js/auto'\r\nimport { Chart }            from 'react-chartjs-2'\r\nimport ChartDataLabels from 'chartjs-plugin-datalabels';\r\nimport Loading from \"../../../../components/Loading/Loading\";\r\nimport {\r\n    Grid,\r\n    Card,\r\n    CardContent,\r\n    Select,\r\n    MenuItem\r\n  } from \"@material-ui/core\";\r\n  import {\r\n    BarChart,\r\n    Tooltip,\r\n    YAxis,\r\n    XAxis,\r\n    LabelList\r\n  } from \"recharts\";\r\n//ticks={['Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь', 'Июль', 'Август', 'Сентябрь', 'Октябрь', 'Ноябрь', 'Декабрь']}/>\r\nfunction CustomBarChart(props) {\r\n  \r\n    const [year, setYear] = useState('2022');\r\n    const [nakopPlan, setNakopPlan]= useState([])\r\n    const lineChartData = {\r\n      labels: props.monthsNakopPlan,\r\n      datasets: [\r\n        {\r\n          type:\"line\",\r\n          data: props.listNakopPlan,\r\n          label: \"Накоп. План\",\r\n          borderColor: \"#3333ff\",\r\n          backgroundColor: '#FFFFFF',\r\n          lineTension: 0.5,\r\n          borderDash: [5, 5],\r\n          pointBackgroundColor: '#3333ff',\r\n          pointRadius: 5,\r\n          pointHoverRadius: 10,\r\n          pointHitRadius: 30,\r\n          pointBorderWidth: 2,\r\n          pointStyle: 'rectRounded',\r\n          yAxisID: \"First Scale\",\r\n          datalabels: {\r\n            display: false,\r\n            align:\"top\"\r\n        }\r\n        },\r\n        {\r\n          backgroundColor: '#FFFFFF',\r\n          type:\"line\",\r\n          data: props.listNakopFact,\r\n          label: \"Накоп. Факт\",\r\n          borderColor: \"#FE7B2A\",\r\n          lineTension: 0.5,\r\n          borderDash: [5, 5],\r\n          pointBackgroundColor: '#FE7B2A',\r\n          pointRadius: 5,\r\n          pointHoverRadius: 10,\r\n          pointHitRadius: 30,\r\n          pointBorderWidth: 2,\r\n          pointStyle: 'rectRounded',\r\n          yAxisID: \"First Scale\",\r\n          datalabels: {\r\n            display:false,\r\n            align:\"top\"\r\n        }\r\n        },\r\n        {\r\n          type:\"bar\",\r\n          data: props.plan,\r\n          label: \"План\",\r\n          borderColor: \"#3333ff\",\r\n          backgroundColor: '#3333ff',\r\n          yAxisID: \"Second Scale\",\r\n          datalabels: {\r\n            color: 'white',\r\n            display: function(context) {\r\n              return context.dataset.data[context.dataIndex] > 15;\r\n          },\r\n            zIndex: 100000,\r\n            fontWeight:700\r\n        }\r\n        },\r\n        {\r\n          type:\"bar\",\r\n          data: props.fact,\r\n          label: \"Факт\",\r\n          backgroundColor: \"#FE7B2A\",\r\n          yAxisID: \"Second Scale\",\r\n          datalabels: {\r\n            color: 'black',\r\n            display: function(context) {\r\n              return context.dataset.data[context.dataIndex] > 15;\r\n          },\r\n            zIndex: 100000,\r\n        }\r\n        },\r\n      ]\r\n    };\r\n    const plugins=[ChartDataLabels]\r\n    const options ={\r\n      plugins:{\r\n        datalabels: {\r\n          display: function(context) {\r\n              return context.dataset.data[context.dataIndex] > 15;\r\n          },},\r\n      legend: {\r\n        display: true,\r\n        position: 'bottom',\r\n  \r\n        fontSize: '20px'\r\n\r\n    },\r\n    \r\n  \r\n  \r\n  }\r\n    }\r\n    return (\r\n      \r\n        <Grid item xs={12}>\r\n          <Card sx={{width: \"100%\"}}>\r\n            <CardContent>\r\n            <Grid container>\r\n              <Grid item xs={12} style={{display: \"flex\", justifyContent: \"center\", alignItems: 'center'}}>\r\n                <p style={{fontSize: \"25px\", marginTop: \"1rem\"}}>{props.title}</p>\r\n              </Grid>\r\n              <Grid item xs={12} style={{display: \"flex\", justifyContent: \"center\"}}>\r\n              <Chart ref={props.chartRefPlan}\r\n                data={lineChartData}\r\n                plugins={plugins}\r\n                options={options}\r\n    />\r\n              </Grid>\r\n            </Grid>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n    )\r\n    \r\n}\r\n\r\nexport default CustomBarChart","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\pages\\dashboard\\components\\CustomChart\\OperationsBarChart.js",["721","722","723","724","725","726","727","728","729","730","731"],"import React, { useState, useEffect } from \"react\"\r\n\r\nimport \"../../../../pages/styles.css\"\r\nimport { Line as LineJS } from 'chart.js/auto'\r\nimport { Chart }            from 'react-chartjs-2'\r\nimport ChartDataLabels from 'chartjs-plugin-datalabels';\r\nimport Loading from \"../../../../components/Loading/Loading\";\r\nimport {\r\n    Grid,\r\n    Card,\r\n    CardContent,\r\n    Select,\r\n    MenuItem\r\n  } from \"@material-ui/core\";\r\n  import {\r\n    BarChart,\r\n    Tooltip,\r\n    YAxis,\r\n    XAxis,\r\n    LabelList\r\n  } from \"recharts\";\r\n  function OperationsBarChart(props) {\r\n    \r\n      var options = {\r\n        layout: {\r\n            padding: {\r\n                left: 30,\r\n                right: 30,\r\n                top: 30,\r\n                bottom: 30\r\n            }\r\n        },\r\n        plugins:{\r\n          legend: {\r\n            display: false,\r\n    \r\n        },\r\n        htmlLegend: {\r\n            // ID of the container to put the legend in\r\n            containerID: 'legend-container',\r\n          },\r\n      }\r\n    };\r\n      const lineChartData = {\r\n        labels: props.data.years,\r\n        datasets: [\r\n          {\r\n            type:\"bar\",\r\n            data: props.data.countWells,\r\n            label: \"Всего скважин\",\r\n            borderColor: \"#3333ff\",\r\n            backgroundColor: function (context) {\r\n                if (context.dataset.data[context.dataIndex]<=1150) return \"red\"\r\n                else if (context.dataset.data[context.dataIndex] <= 1250) return \"yellow\"\r\n                else return \"green\";\r\n        },\r\n            lineTension: 0.5,\r\n            borderDash: [5, 5],\r\n            pointBackgroundColor: '#3333ff',\r\n            pointRadius: 5,\r\n            pointHoverRadius: 10,\r\n            pointHitRadius: 30,\r\n            pointBorderWidth: 2,\r\n            pointStyle: 'rectRounded',\r\n            datalabels: {\r\n                anchor: 'end',\r\n                align: 'top',\r\n                color: 'black',\r\n                font: {\r\n                    weight: 'bold',\r\n                    size: 14\r\n                },\r\n                display: function(context) {\r\n                  return context.dataset.data[context.dataIndex] > 4;\r\n              },\r\n                zIndex: 100000,\r\n                fontWeight:900\r\n            }\r\n          },\r\n          \r\n        ]}\r\n        const plugins=[ChartDataLabels]\r\n    return (\r\n        <Grid item xs={12}>\r\n          <Card sx={{width: \"100%\"}}>\r\n            <CardContent>\r\n            <Grid container>\r\n              <Grid item xs={12} style={{display: \"flex\", justifyContent: \"center\", alignItems: 'center'}}>\r\n                <p style={{fontSize: \"25px\", marginTop: \"1rem\"}}>{props.title}</p>\r\n              </Grid>\r\n              <Grid item xs={12} style={{display: \"flex\", justifyContent: \"center\"}}>\r\n              <Chart ref={props.chartRefOperations} data={lineChartData} plugins={plugins} options={options}>\r\n              </Chart>\r\n              </Grid>\r\n            </Grid>\r\n            <div style={{display:'flex'}}>\r\n            <p><span style={{fontWeight:\"900\"}}> Всего скважин</span> 1,05 тыс.</p>\r\n            <div style={{background: 'linear-gradient(to right, red, yellow, green)',\r\n width: '100px',\r\n height: '20px'}}>\r\n <div style={{marginLeft:'calc(50%)', width:'1px', height:'calc(100%)', background:\"black\"}}></div>\r\n <p style={{marginLeft:'calc(30%)'}}>1,2 тыс.</p>\r\n </div>\r\n <p>1,35 тыс.</p>\r\n </div>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n    )\r\n    \r\n  }\r\n\r\n  export default OperationsBarChart","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Blocked\\Blocked.js",[],"C:\\Users\\s_martyanova\\CheckList\\Front\\src\\pages\\help\\CustomAccordion.js",[],"C:\\Users\\s_martyanova\\CheckList\\Front\\src\\pages\\help\\styles.js",[],"C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Dialogs\\scripts.js",[],"C:\\Users\\s_martyanova\\CheckList\\Front\\src\\pages\\checklist\\data.js",[],"C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Wrappers\\Wrappers.js",[],"C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Buttons\\ToggleButtonSizes\\ToggleButtonSizes.js",["732","733","734","735","736","737"],"import * as React from 'react';\r\nimport { ToggleButton, ToggleButtonGroup } from '@material-ui/lab';\r\n\r\nexport default function ToggleButtonSizes({alignment, setAlignment}) {\r\n  const [isLeft, setIsLeft]=React.useState(true);\r\n  const [isRight, setIsRight]=React.useState(false);\r\n  const [isCenter, setIsCenter]=React.useState(false);\r\n  const handleChange = (\r\n    event: React.MouseEvent<HTMLElement>,\r\n    newAlignment: string,\r\n  ) => {\r\n      if(newAlignment){\r\n        setAlignment(newAlignment);\r\n      }\r\n  };\r\n  function drawButton(position, alignment){\r\n      if (alignment===position){\r\n          return \"#66CDAA\"\r\n      }\r\n      return \"#87CEFA\"\r\n  }\r\n  const children = [\r\n    <ToggleButton value=\"left\" key=\"left\" style={{color:\"black\", fontWeight:\"700\", backgroundColor:(drawButton(\"left\",alignment))}}>LAS</ToggleButton>,\r\n    <ToggleButton value=\"center\" key=\"center\" style={{color:\"black\", fontWeight:\"700\", backgroundColor:(drawButton(\"center\",alignment))}}>WITSML</ToggleButton>,\r\n    <ToggleButton value=\"right\" key=\"right\" style={{color:\"black\", fontWeight:\"700\", backgroundColor:(drawButton(\"right\",alignment))}}>LAS+WITSML</ToggleButton>,\r\n  ];\r\n\r\n  const control = {\r\n    value: alignment,\r\n    onChange: handleChange,\r\n    exclusive: true,\r\n  };\r\n\r\n  return (\r\n    <div >\r\n      \r\n      <ToggleButtonGroup size=\"medium\" {...control} aria-label=\"Large sizes\">\r\n        {children}\r\n      </ToggleButtonGroup>\r\n    </div>\r\n  );\r\n}","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Widget\\Widget.js",[],"C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\PageTitle\\styles.js",[],"C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Sidebar\\components\\SidebarLink\\styles.js",[],"C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Widget\\styles.js",[],"C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Dialogs\\AdminDialog.js",["738","739"],"import React, {useState, useEffect} from 'react';\r\n\r\nimport {\r\n    TextField, FormControl, Select, Checkbox,\r\n    Grid, Card, CardContent, OutlinedInput, MenuItem,\r\n    Dialog, DialogContent, DialogTitle, DialogActions, ListItemText\r\n} from \"@material-ui/core\";\r\n\r\nimport { Button, Form, Row, Col } from \"react-bootstrap\";\r\nimport BootstrapSwitchButton from 'bootstrap-switch-button-react';\r\nimport SuccessToast from '../Toasts/SuccessToast';\r\nimport { useHistory } from 'react-router';\r\n\r\nimport \"../../pages/styles.css\";\r\n\r\nimport {styleBlueInput} from \"../../pages/checklist/styles\";\r\nimport ValidAdmin from '../Toasts/ValidAdmin';\r\nimport {IMaskInput} from \"react-imask\";\r\nimport {MenuProps} from \"../../pages/checklist/data\";\r\n\r\nfunction AdminDialog({active, setActive, user, checkPost}) {\r\n    const constant = false;\r\n    const history = useHistory()\r\n    const [user_login, setUser_login] = useState(\"\");\r\n    const [name, setName] = useState(\"\");\r\n    const [surname, setSurname] = useState(\"\");\r\n    const [email, setEmail] = useState(\"\");\r\n    const [tel, setTel] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [checkpassword, setCheckpassword] = useState(\"\");\r\n    const [role, setRole] = useState(\"\");\r\n    const [is_active, setIs_active] = useState(true);\r\n    const [changePass, setChangePass] = useState(false);\r\n    const [customers, setCustomers] = useState([]);\r\n    const [showValid, setShowValid] = useState(false);\r\n    const [showSuccessToast, setShowSuccessToast] = useState(false);\r\n\r\n    const [customersData, setCustomersData] = useState([]);\r\n\r\n    const handleToastValid = () => {\r\n        setShowValid(!showValid);\r\n    }\r\n    const handleSuccessToast = () => {\r\n        setShowSuccessToast(!showSuccessToast);\r\n    }\r\n\r\n    const check_validity = () => {\r\n        return user_login === \"\" || name === \"\" || surname === \"\" || email === \"\" || tel === \"\" || password === \"\" || checkpassword === \"\" || role === \"\";\r\n    }\r\n\r\n    function getCustomers() {\r\n        fetch(process.env.REACT_APP_API+'customers?format=json', { headers : { \r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n            'Authorization': \"Token \" + localStorage.getItem('id_token')\r\n           }\r\n        }) \r\n        .then(response=>response.json())\r\n        .then(data=>{\r\n            setCustomersData(data);\r\n        })\r\n    }\r\n\r\n    const postUser = () => {\r\n        if(!check_validity() && password === checkpassword) {\r\n        fetch(process.env.REACT_APP_API+'users/?format=json',{\r\n            method: 'POST',\r\n            headers:{\r\n                'Accept':'application/json',\r\n                'Content-Type':'application/json',\r\n                'Authorization': \"Token \" + localStorage.getItem('id_token')\r\n            },\r\n            body: JSON.stringify({\r\n                \"username\": user_login,\r\n                \"first_name\": name,\r\n                \"last_name\": surname,\r\n                \"email\": email,\r\n                \"phone_number\": tel,\r\n                \"password\": password,\r\n                \"is_active\": is_active,\r\n                \"is_staff\": false,\r\n                \"is_superuser\": role === \"superuser\" ? true : false,\r\n                \"role\": role,\r\n                \"customers\": customers\r\n            }) \r\n        })\r\n        .then((response) => {\r\n            if(!response.ok) throw new Error(response.status);\r\n            else setActive();\r\n          })\r\n        } else handleToastValid();\r\n    }\r\n\r\n    const changePassword = (id) => {\r\n        if(changePass && password === checkpassword) {\r\n        fetch(process.env.REACT_APP_API+'password/'+ id +'?format=json',{\r\n            method: 'PUT',\r\n            headers:{\r\n                'Accept':'application/json',\r\n                'Content-Type':'application/json',\r\n                'Authorization': \"Token \" + localStorage.getItem('id_token')\r\n            },\r\n            body: JSON.stringify({\r\n                \"password\": password\r\n            }) \r\n        })\r\n        .then((response) => {\r\n            if(!response.ok) throw new Error(response.status);\r\n            else {handleSuccessToast();\r\n                history.go(0);}\r\n          })\r\n    }\r\n    }\r\n\r\n    const changeAccess = (id) => {\r\n        fetch(process.env.REACT_APP_API+'customer_permissions/'+ id +'?format=json',{\r\n            method: 'PUT',\r\n            headers:{\r\n                'Accept':'application/json',\r\n                'Content-Type':'application/json',\r\n                'Authorization': \"Token \" + localStorage.getItem('id_token')\r\n            },\r\n            body: JSON.stringify({\r\n                \"role\": role,\r\n                \"customers\": customers\r\n            }) \r\n        })\r\n        .then((response) => {\r\n            if(!response.ok) throw new Error(response.status);\r\n            else {handleSuccessToast();\r\n                history.go(0);\r\n            }\r\n          })\r\n          console.log(JSON.stringify({\r\n            \"role\": role,\r\n            \"customers\": customers\r\n        }))\r\n    }\r\n\r\n    const changeInformation = (id) => {\r\n        fetch(process.env.REACT_APP_API+'informations/'+ id +'?format=json',{\r\n            method: 'PUT',\r\n            headers:{\r\n                'Accept':'application/json',\r\n                'Content-Type':'application/json',\r\n                'Authorization': \"Token \" + localStorage.getItem('id_token')\r\n            },\r\n            body: JSON.stringify({\r\n                \"id\": id,\r\n                \"username\": user_login,\r\n                \"first_name\": name,\r\n                \"last_name\": surname,\r\n                \"email\": email,\r\n                \"phone_number\": tel,\r\n                \"is_superuser\": role === \"superuser\" ? true : false,\r\n                \"is_active\": is_active\r\n            }) \r\n        })\r\n        .then((response) => {\r\n            if(!response.ok) throw new Error(response.status);\r\n            else {handleSuccessToast();\r\n                history.go(0)}\r\n          })\r\n    }\r\n\r\n    useEffect(() => {\r\n        getCustomers();\r\n    }, [constant])\r\n\r\n    useEffect(() => {\r\n        if (!checkPost) {\r\n            setUser_login(user.username);\r\n            setName(user.first_name);\r\n            setSurname(user.last_name);\r\n            setEmail(user.email);\r\n            setTel(user.phone_number);\r\n            setIs_active(user.is_active);\r\n            setRole(user.role);\r\n            user.hasOwnProperty('customers') ? setCustomers(user.customers.map(item => item.id)) : setCustomers([]);\r\n        } else setIs_active(true)\r\n    }, [user])\r\n\r\n    useEffect(() => {\r\n        console.log(is_active)\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <ValidAdmin active={showValid} setActive={handleToastValid}/>\r\n            <SuccessToast active={showSuccessToast} setActive={handleSuccessToast}/>\r\n            <Dialog open={active} onClose={setActive} maxWidth=\"lg\" fullWidth>\r\n                <DialogTitle>{checkPost ? \"Добавление пользователя\" : \"Редактирование пользователя\"}</DialogTitle>\r\n                <Form name=\"addservice\">\r\n                    <DialogContent>\r\n                    <Grid container spacing={3}>\r\n                    <Grid item xs={6}>\r\n                        <Card\r\n                                sx={{ minWidth: 275 }}\r\n                                elevation={4}\r\n                                style={{\r\n                                borderRadius: \"15px\",\r\n                                backgroundColor: \"#3F6694\",\r\n                                color: \"#fff\",\r\n                                height:\"100%\"\r\n                                }}\r\n                            >\r\n                            <CardContent style={{ paddingBottom: \"0\", color:\"white\"}}>\r\n                                <Row style={{paddingBottom:\"1rem\"}}>\r\n                                    <Col style={{fontSize:\"20px\", fontWeight:\"700\"}}>Основная информация</Col>\r\n                                </Row>\r\n                                <Form.Group as={Row}>\r\n                                    <Form.Label column sm=\"6\" style={{fontSize: \"18px\"}}>\r\n                                    Логин пользователя\r\n                                    </Form.Label>\r\n                                    <Col sm=\"6\">\r\n                                    <Form.Control\r\n                                        id=\"login_user\"\r\n                                        name=\"login_user\"\r\n                                        value={user_login}\r\n                                        style={styleBlueInput}\r\n                                        onChange={(e) => setUser_login(e.target.value.toLowerCase())}\r\n                                    />\r\n                                    </Col>\r\n                                </Form.Group>\r\n                                <Form.Group as={Row}>\r\n                                    <Form.Label column sm=\"6\" style={{fontSize: \"18px\"}}>\r\n                                    Имя\r\n                                    </Form.Label>\r\n                                    <Col sm=\"6\">\r\n                                    <Form.Control\r\n                                        id=\"name\"\r\n                                        name=\"name\"\r\n                                        value={name}\r\n                                        style={styleBlueInput}\r\n                                        onChange={(e) => setName(e.target.value)}\r\n                                    />\r\n                                    </Col>\r\n                                </Form.Group>\r\n                                <Form.Group as={Row}>\r\n                                    <Form.Label column sm=\"6\" style={{fontSize: \"18px\"}}>\r\n                                    Фамилия\r\n                                    </Form.Label>\r\n                                    <Col sm=\"6\">\r\n                                    <Form.Control\r\n                                        id=\"surname\"\r\n                                        name=\"surname\"\r\n                                        value={surname}\r\n                                        style={styleBlueInput}\r\n                                        onChange={(e) => setSurname(e.target.value)}\r\n                                    />\r\n                                    </Col>\r\n                                </Form.Group>\r\n                                <Form.Group as={Row}>\r\n                                    <Form.Label column sm=\"6\" style={{fontSize: \"18px\"}}>\r\n                                    E-mail\r\n                                    </Form.Label>\r\n                                    <Col sm=\"6\">\r\n                                    <Form.Control\r\n                                        type=\"email\"\r\n                                        id=\"email\"\r\n                                        name=\"email\"\r\n                                        value={email}\r\n                                        style={styleBlueInput}\r\n                                        onChange={(e) => setEmail(e.target.value)}\r\n                                    />\r\n                                    </Col>\r\n                                </Form.Group>\r\n                                <Form.Group as={Row}>\r\n                                    <Form.Label column sm=\"6\" style={{fontSize: \"18px\"}}>\r\n                                    Телефон\r\n                                    </Form.Label>\r\n                                    <Col sm=\"6\">\r\n                                    <Form.Control\r\n                                        as={IMaskInput}\r\n                                        type=\"tel\"\r\n                                        id=\"tel\"\r\n                                        name=\"tel\"\r\n                                        mask={\"+7(000)000-00-00\"}\r\n                                        value={tel}\r\n                                        style={styleBlueInput}\r\n                                        onChange={(e) => setTel(e.target.value)}\r\n                                    />\r\n                                    </Col>\r\n                                </Form.Group>\r\n                                <Form.Group as={Row}>\r\n                                    <Form.Label column sm=\"6\" style={{fontSize: \"18px\"}}>\r\n                                    Заблокировать\r\n                                    </Form.Label>\r\n                                    <Col sm=\"6\" style={{textAlign:\"center\"}}>\r\n                                    <BootstrapSwitchButton \r\n                                    checked={is_active} \r\n                                    width={200}\r\n                                    onChange={(checked) => setIs_active(checked)} \r\n                                    onlabel=\"Разблокирован\" \r\n                                    offlabel=\"Заблокирован\" \r\n                                    onstyle=\"success\" \r\n                                    offstyle=\"danger\" />  \r\n                                    </Col>\r\n                                </Form.Group>\r\n                                <Form.Group as={Row}>\r\n                                    <Col sm=\"8\"></Col>\r\n                                    <Col sm=\"4\"><Button variant=\"yellow\" style={{height:\"100%\", width:\"100%\", display:(checkPost ? 'none' : 'block')}} onClick={() =>{ changeInformation(user.id);localStorage.setItem('name', name);}}>Сохранить</Button></Col>\r\n                                </Form.Group>\r\n                            </CardContent>\r\n                        </Card>\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                        <Card\r\n                                sx={{ minWidth: 275 }}\r\n                                elevation={4}\r\n                                style={{\r\n                                borderRadius: \"15px\",\r\n                                backgroundColor: \"#3F6694\",\r\n                                color: \"#fff\",\r\n                                marginBottom:\"1.5rem\"\r\n                                }}\r\n                            >\r\n                            <CardContent style={{ paddingBottom: \"0\", color:\"white\"}}>\r\n                                <Row style={{paddingBottom:\"1rem\"}}>\r\n                                    <Col style={{fontSize:\"20px\", fontWeight:\"700\"}}>Поменять пароль</Col>\r\n                                </Row>\r\n                                <Form.Group as={Row}>\r\n                                    <Form.Label column sm=\"6\" style={{fontSize: \"18px\"}}>\r\n                                    Введите новый пароль\r\n                                    </Form.Label>\r\n                                    <Col sm=\"6\">\r\n                                    <Form.Control\r\n                                        type=\"password\"\r\n                                        id=\"password\"\r\n                                        name=\"password\"\r\n                                        value={password}\r\n                                        style={styleBlueInput}\r\n                                        onChange={(e) => {setPassword(e.target.value); setChangePass(true);}}\r\n                                    />\r\n                                    </Col>\r\n                                </Form.Group>\r\n                                <Form.Group as={Row}>\r\n                                    <Form.Label column sm=\"6\" style={{fontSize: \"18px\"}}>\r\n                                    Введите пароль ещё раз\r\n                                    </Form.Label>\r\n                                    <Col sm=\"6\">\r\n                                    <Form.Control\r\n                                        type=\"password\"\r\n                                        id=\"checkpassword\"\r\n                                        name=\"checkpassword\"\r\n                                        value={checkpassword}\r\n                                        style={styleBlueInput}\r\n                                        onChange={(e) => setCheckpassword(e.target.value)}\r\n                                    />\r\n                                    <Form.Text style={{fontSize:\"14px\", color:\"white\", display: (password === checkpassword ? 'none' : 'block')}}>\r\n                                        Пароли не совпадают!\r\n                                    </Form.Text>\r\n                                    </Col>\r\n                                </Form.Group>\r\n                                <Form.Group as={Row}>\r\n                                    <Col sm=\"8\"></Col>\r\n                                    <Col sm=\"4\"><Button variant=\"yellow\" style={{height:\"100%\", width:\"100%\", display:(checkPost ? 'none' : 'block')}} onClick={() => changePassword(user.id)}>Сохранить</Button></Col>\r\n                                </Form.Group>\r\n                            </CardContent>\r\n                        </Card>\r\n                        <Card\r\n                                sx={{ minWidth: 275 }}\r\n                                elevation={4}\r\n                                style={{\r\n                                borderRadius: \"15px\",\r\n                                backgroundColor: \"#3F6694\",\r\n                                color: \"#fff\"\r\n                                }}\r\n                            >\r\n                            <CardContent style={{ paddingBottom: \"0\", color:\"white\"}}>\r\n                                <Row style={{paddingBottom:\"1rem\"}}>\r\n                                    <Col style={{fontSize:\"20px\", fontWeight:\"700\"}}>Информация по доступу к ресурсу</Col>\r\n                                </Row>\r\n                                <Form.Group as={Row}>\r\n                                    <Form.Label column sm=\"6\" style={{fontSize: \"18px\"}}>\r\n                                    Роль пользователя\r\n                                    </Form.Label>\r\n                                    <Col sm=\"6\">\r\n                                    <Form.Control\r\n                                        as=\"select\"\r\n                                        id=\"role\"\r\n                                        name=\"role\"\r\n                                        value={role}\r\n                                        style={styleBlueInput}\r\n                                        onChange={(e) => setRole(e.target.value)}\r\n                                    >\r\n                                        <option key=\"0\" hidden></option>\r\n                                        <option key=\"1\" value=\"user\">Редактор ОГ</option>\r\n                                        <option key=\"2\" value=\"viewer\">Просмотр</option>\r\n                                        <option key=\"3\" value=\"superviewer\">Просмотр всех ОГ</option>\r\n                                        <option key=\"4\" value=\"superuser\">admins</option>\r\n                                    </Form.Control>\r\n                                    </Col>\r\n                                </Form.Group>\r\n                                <Form.Group as={Row}>\r\n                                    <Form.Label column sm=\"6\" style={{fontSize: \"18px\"}}>\r\n                                    Доступные ОГ\r\n                                    </Form.Label>\r\n                                    <Col sm=\"6\">\r\n                                    {/*<Form.Control\r\n                                        as=\"select\"\r\n                                        multiple\r\n                                        id=\"customers\"\r\n                                        name=\"customers\"\r\n                                        value={customers}\r\n                                        style={styleBlueInput}\r\n                                        onChange={e => setCustomers([].slice.call(e.target.selectedOptions).map(item => item.value))}\r\n                                    >\r\n                                        {customersData.map(item => {return <option key={item.name} value={item.id}>{item.name}</option>})}\r\n                                    </Form.Control>*/}\r\n                                    <FormControl\r\n                                        id=\"customers\"\r\n                                        name=\"customers\"\r\n                                    >\r\n                                        <Select\r\n                                        disabled={role === \"superuser\" || role === \"superviewer\"}\r\n                                        id=\"customers_select\"\r\n                                        name=\"customers_select\"\r\n                                        multiple\r\n                                        value={customers}\r\n                                        renderValue={selected => selected.map(select => customersData.find(item => item.id === select).name).join(', ')}\r\n                                        onChange={(e) => setCustomers(e.target.value)}\r\n                                        input={\r\n                                            <OutlinedInput\r\n                                            style={{ width: \"268px\", height: \"38px\", color:\"white\", fontSize:\"20px\", fontWeight:\"700\" }}\r\n                                            />\r\n                                        }\r\n                                        MenuProps={MenuProps}\r\n                                        >\r\n                                        {customersData.map(item => (\r\n                                            <MenuItem key={item.id} value={item.id}>\r\n                                            <Checkbox\r\n                                                checked={\r\n                                                customers.toString().indexOf(item.id) > -1\r\n                                                }\r\n                                            />\r\n                                            <ListItemText primary={item.name} />\r\n                                            </MenuItem>\r\n                                        ))}\r\n                                        </Select>\r\n                                    </FormControl>\r\n                                    </Col>\r\n                                </Form.Group>\r\n                                <Form.Group as={Row}>\r\n                                    <Col sm=\"8\"></Col>\r\n                                    <Col sm=\"4\"><Button variant=\"yellow\" style={{height:\"100%\", width:\"100%\", display:(checkPost ? 'none' : 'block')}} onClick={() => changeAccess(user.id)}>Сохранить</Button></Col>\r\n                                </Form.Group>\r\n                            </CardContent>\r\n                        </Card>\r\n                    </Grid>\r\n                    </Grid>\r\n                    </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => {postUser(); setActive(); history.go(0);}} style={{outline: \"none\", visibility:(checkPost ? 'visible' : 'hidden')}}>Сохранить</Button>\r\n                </DialogActions>\r\n                </Form>\r\n            </Dialog>   \r\n        </>\r\n    )\r\n}\r\n\r\nexport default AdminDialog;","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Dialogs\\EditStrataDialog.js",["740"],"import React, {useState, useEffect} from 'react';\r\n\r\nimport {\r\n    Button,\r\n    Dialog, DialogContent, DialogTitle, DialogActions\r\n} from \"@material-ui/core\";\r\n\r\nimport {Form} from 'react-bootstrap';\r\n\r\nfunction EditStrataDialog({active, setActive, strata_id, strata_name, strata_file, strata_file_name, strataList, setStrataList}) {\r\n    const [strata, setStrata] = useState(\"\");\r\n    const [selectedFile, setSelectedFile] = useState('');\r\n    const [fileName, setFileName] = useState('');\r\n    const onSubmitStrata = (e) => {\r\n        e.preventDefault()\r\n        const formData = new FormData();\r\n        formData.append('name', strata);\r\n\t\tformData.append('strata_file', selectedFile);\r\n        fetch(process.env.REACT_APP_API+'strata/id/'+ strata_id + '?format=json',{\r\n            method: 'PUT',\r\n            headers:{\r\n                'Accept':'application/json, text/html',\r\n                'Authorization': \"Token \" + localStorage.getItem('id_token')\r\n            },\r\n            body: formData \r\n        })\r\n        .then(()=>{\r\n            const strataNew=strataList.map((item)=>{\r\n                if (item.id == strata_id){\r\n                    const newItem=item\r\n                    newItem.name=strata\r\n                    newItem.strata_file_name=fileName\r\n                    return newItem\r\n                }\r\n                return item\r\n            })\r\n            setStrataList(strataNew)\r\n        })\r\n        .catch((error)=>console.log(error))\r\n    };\r\n\r\n    const setNameStrata = (e) => {\r\n        setStrata(e.target.value)\r\n    }\r\n\r\n    const handleFile = (event) => {\r\n        setSelectedFile(event.target.files[0]);\r\n        setFileName(event.target.files[0].name)\r\n    }\r\n\r\n    useEffect(() => {\r\n        setStrata(strata_name);\r\n    }, [strata_name])\r\n    \r\n    useEffect(()=>{\r\n        setFileName(strata_file_name)\r\n\r\n    }, [strata_file_name])\r\n    \r\n\r\n    return (\r\n        <>\r\n            <Dialog open={active} onClose={setActive} maxWidth=\"xs\" fullWidth>\r\n                <DialogTitle>Изменить параметры пласта</DialogTitle>\r\n                <Form name=\"editstrata\" onSubmit={e => onSubmitStrata(e)}>\r\n                    <DialogContent>\r\n                        <Form.Group>\r\n                            <Form.Label htmlFor=\"edit_strata\">Название пласта</Form.Label>\r\n                            <Form.Control\r\n                            type=\"text\"\r\n                            id=\"edit_strata\"\r\n                            name=\"edit_strata\"\r\n                            onChange={(e) => {setNameStrata(e)}}\r\n                            value={strata}\r\n                            />\r\n                        </Form.Group>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            component=\"label\"\r\n                            style={{width:\"100%\", fontSize:\"20px\"}}\r\n                            color={fileName ? \"success\" : \"primary\"}\r\n                            >\r\n                            {fileName ? fileName : \"Загрузить файл\"}\r\n                            <input\r\n                                id=\"add-file\"\r\n                                type=\"file\"\r\n                                accept='.xlsx,.xls'\r\n                                hidden\r\n                                onChange={handleFile}\r\n                            />\r\n                        </Button>\r\n                    </DialogContent>\r\n                <DialogActions>\r\n                    <Button type=\"submit\" onClick={setActive} style={{outline: \"none\"}}>Сохранить</Button>\r\n                </DialogActions>\r\n                </Form>\r\n            </Dialog>   \r\n        </>\r\n    )\r\n}\r\n\r\nexport default EditStrataDialog;","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Dialogs\\AddStrataDialog.js",["741"],"import React, {useState} from 'react';\r\n\r\nimport {\r\n    Button,\r\n    TextField,\r\n    Dialog, DialogContent, DialogTitle, DialogActions\r\n} from \"@material-ui/core\";\r\n\r\nimport {Form} from 'react-bootstrap';\r\n\r\nfunction AddStrataDialog({active, setActive, field_id, strataAll, setStrataAll}) {\r\n    const [selectedFile, setSelectedFile] = useState();\r\n    const [fileName, setFileName] = useState(\"\");\r\n    const [strata, setStrata] = useState(\"\");\r\n\r\n    function onSubmitStrata(e){\r\n        e.preventDefault()\r\n        const formData = new FormData();\r\n        formData.append('name', strata);\r\n        selectedFile && formData.append('strata_file', selectedFile);\r\n        formData.append('strata_file_name', fileName);\r\n        fetch(process.env.REACT_APP_API+'strata/' + field_id + '?format=json',{\r\n            method: 'POST',\r\n            headers:{\r\n                'Accept':'application/json, text/html',\r\n                'Authorization': \"Token \" + localStorage.getItem('id_token')\r\n            },\r\n            body: formData \r\n        }).then(response=>response.json())\r\n        .then((data)=>{\r\n            console.log('strataAll', strataAll)\r\n            setStrataAll([data, ...strataAll])\r\n            setActive(false)\r\n            setFileName('')\r\n            setStrata('')\r\n        })\r\n    };\r\n\r\n    const handleFile = (event) => {\r\n        setSelectedFile(event.target.files[0]);\r\n        setFileName(event.target.files[0].name);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Dialog open={active} onClose={setActive} maxWidth=\"xs\" fullWidth>\r\n                <DialogTitle>Добавить пласт</DialogTitle>\r\n                <Form name=\"addstrata\" onSubmit={onSubmitStrata}>\r\n                    <DialogContent>\r\n                        <Form.Group>\r\n                            <Form.Control\r\n                            required\r\n                            type=\"text\"\r\n                            id=\"add_strata\"\r\n                            onChange={e => setStrata(e.target.value)} \r\n                            placeholder=\"Введите название пласта\"\r\n                            />\r\n                        </Form.Group>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            component=\"label\"\r\n                            style={{width:\"100%\", fontSize:\"20px\"}}\r\n                            color={fileName ? \"success\" : \"primary\"}\r\n                            >\r\n                            {fileName ? fileName : \"Загрузить файл\"}\r\n                            <input\r\n                                id=\"add-file\"\r\n                                type=\"file\"\r\n                                hidden\r\n                                accept='.xlsx,.xls'\r\n                                onChange={handleFile}\r\n                            />\r\n                        </Button>\r\n                    </DialogContent>\r\n                <DialogActions>\r\n                    <Button type=\"submit\" style={{outline: \"none\"}}>Сохранить</Button>\r\n                </DialogActions>\r\n                </Form>\r\n            </Dialog>   \r\n        </>\r\n    )\r\n}\r\n\r\nexport default AddStrataDialog;","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Toasts\\ValidAdmin.js",[],"C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Dialogs\\EditMethodParamDialog.js",["742","743"],"import React, {useState, useEffect} from 'react';\r\n\r\nimport {\r\n    Button,\r\n    Tooltip,\r\n    Dialog, DialogContent, DialogTitle, DialogActions\r\n} from \"@material-ui/core\";\r\n\r\nimport {Form} from 'react-bootstrap';\r\n\r\nfunction EditMethodParamDialog({active, setActive, parametr, isDisabledEditMethod, setMethodParametrs, textError, setTextError, methodParametrs}) {\r\n    const [name, setName] = useState(\"\");\r\n    const [abbreviation, setAbbreviation] = useState(\"\");\r\n    const [curve_type, setCurve_type] = useState(\"\");\r\n    const [units, setUnits] = useState(\"\");\r\n    const [description, setDescription] = useState(\"\");\r\n\r\n    function onSubmitMethodParam(e){\r\n        e.preventDefault();\r\n        fetch(process.env.REACT_APP_API+'method_parametrs/id/' + parametr.id + '?format=json',{\r\n            method: 'PUT',\r\n            headers:{\r\n                'Accept':'application/json',\r\n                'Content-Type':'application/json',\r\n                'Authorization': \"Token \" + localStorage.getItem('id_token')\r\n            },\r\n            body: JSON.stringify({\r\n                \"name\": name,\r\n                \"abbreviation\": abbreviation,\r\n                \"curve_type\": curve_type,\r\n                \"units\": units.split(' '),\r\n                \"description\": description\r\n            }) \r\n        }).then((res)=>{if (!res.ok)\r\n            {\r\n               \r\n                if (res.status==400){\r\n                    setTextError('Ошибка: параметр с таким именем уже существует')\r\n                }\r\n                else{\r\n                    setTextError(`Ошибка ${res.status}`)\r\n                }\r\n        }\r\n        else {\r\n            isDisabledEditMethod.current=true\r\n            const newFullData=methodParametrs.map((item)=>{\r\n                if (item.id==parametr.id){\r\n                    item.name=name\r\n                    item.abbreviation=abbreviation\r\n                    item.curve_type=curve_type\r\n                    item.units=units.split(' ')\r\n                    item.description=description\r\n                }\r\n                return item\r\n            })\r\n            setMethodParametrs(newFullData)\r\n            setTextError('')\r\n            \r\n    }\r\n    })\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (Object.keys(parametr).length) {\r\n            setName(parametr.name)\r\n            setAbbreviation(parametr.abbreviation)\r\n            setCurve_type(parametr.curve_type)\r\n            setUnits(parametr.units.join(' '))\r\n            setDescription(parametr.description)\r\n        }\r\n    }, [parametr])\r\n\r\n    return (\r\n        <>\r\n            <Dialog open={active} onClose={setActive} maxWidth=\"md\" fullWidth>\r\n                <DialogTitle>Редактировать параметр - {parametr.name}</DialogTitle>\r\n                <Form name=\"addmethodparam\">\r\n                    <DialogContent>\r\n                        <Form.Group>\r\n                            <Form.Label htmlFor=\"name\">Регистрируемый параметр</Form.Label>\r\n                            <Form.Control\r\n                            required\r\n                            type=\"text\"\r\n                            id=\"name\"\r\n                            name=\"name\"\r\n                            value={name}\r\n                            onChange={e => setName(e.target.value)}\r\n                            />\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <Form.Label htmlFor=\"abbreviation\">Сокращение на латинице</Form.Label>\r\n                            <Form.Control\r\n                            required\r\n                            type=\"text\"\r\n                            id=\"abbreviation\"\r\n                            name=\"abbreviation\"\r\n                            value={abbreviation}\r\n                            onChange={e => setAbbreviation(e.target.value)}\r\n                            />\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <Form.Label htmlFor=\"curve_type\">Тип кривой</Form.Label>\r\n                            <Form.Control\r\n                            required\r\n                            type=\"text\"\r\n                            id=\"curve_type\"\r\n                            name=\"curve_type\"\r\n                            value={curve_type}\r\n                            onChange={e => setCurve_type(e.target.value)}\r\n                            />\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <Form.Label htmlFor=\"units\">Единицы измерения</Form.Label>\r\n                            <Tooltip\r\n                                title=\"Ввод значений через пробел\"\r\n                                arrow\r\n                            >\r\n                                <Form.Control\r\n                                required\r\n                                type=\"text\"\r\n                                id=\"units\"\r\n                                name=\"units\"\r\n                                value={units}\r\n                                onChange={e => setUnits(e.target.value)}\r\n                                />\r\n                            </Tooltip>\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <Form.Label htmlFor=\"description\">Описание</Form.Label>\r\n                            <Form.Control\r\n                            required\r\n                            type=\"text\"\r\n                            id=\"description\"\r\n                            name=\"description\"\r\n                            value={description}\r\n                            onChange={e => setDescription(e.target.value)}\r\n                            />\r\n                        </Form.Group>\r\n                        <Form.Text style={{fontSize: \"14px\", color: \"red\", paddingLeft:\"10px\", marginBottom:\"20px\"}}>\r\n                                {textError}\r\n                            </Form.Text>\r\n                    </DialogContent>\r\n                <DialogActions>\r\n                    <Button type=\"submit\" style={{outline: \"none\"}}  onClick={onSubmitMethodParam}>Сохранить</Button>\r\n                </DialogActions>\r\n                </Form>\r\n            </Dialog>   \r\n        </>\r\n    )\r\n}\r\n\r\nexport default EditMethodParamDialog;","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Dialogs\\AddMethodDialog.js",["744","745"],"import React, {useState} from 'react';\r\n\r\nimport {\r\n    Button,\r\n    TextField,\r\n    Dialog, DialogContent, DialogTitle, DialogActions\r\n} from \"@material-ui/core\";\r\n\r\nimport {Form} from 'react-bootstrap';\r\n\r\nfunction AddMethodDialog({active, setActive, class_item, isDisabledAddMetod, getMethods, textError, setTextError}) {\r\n    const [method, setMethod] = useState(\"\");\r\n\r\n    function onSubmitMethod(e){\r\n        e.preventDefault();\r\n        if (method){\r\n        fetch(process.env.REACT_APP_API+'methods/class/' + class_item.id + '?format=json',{\r\n            method: 'POST',\r\n            headers:{\r\n                'Accept':'application/json',\r\n                'Content-Type':'application/json',\r\n                'Authorization': \"Token \" + localStorage.getItem('id_token')\r\n            },\r\n            body: JSON.stringify({\r\n                \"name\": method,\r\n                \"method_class_id\": class_item.id\r\n            }) \r\n        }).then((res)=>{if (!res.ok)\r\n            {\r\n                if (res.status==400){\r\n                    setTextError('Ошибка: метод с таким именем уже существует')\r\n                }\r\n                else{\r\n                    setTextError(`Ошибка ${res.status}`)\r\n                }\r\n                }\r\n        else {\r\n            isDisabledAddMetod.current=true\r\n            getMethods()\r\n            setTextError('')\r\n            \r\n    }\r\n    })\r\n}\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Dialog open={active} onClose={setActive} maxWidth=\"md\" fullWidth>\r\n                <DialogTitle>Добавить метод ГИС для класса - {class_item.name}</DialogTitle>\r\n                <Form name=\"addmethod\">\r\n                    <DialogContent>\r\n                        <Form.Group>\r\n                            <Form.Control\r\n                            required\r\n                            type=\"text\"\r\n                            id=\"add_method\"\r\n                            onChange={e => setMethod(e.target.value)} \r\n                            placeholder=\"Введите название метода\"\r\n                            />\r\n                        </Form.Group>\r\n                        <Form.Text style={{fontSize: \"14px\", color: \"red\", paddingLeft:\"10px\", marginBottom:\"20px\"}}>\r\n                                {textError}\r\n                            </Form.Text>\r\n                    </DialogContent>\r\n                <DialogActions>\r\n                    <Button type=\"submit\" onClick={(e) => onSubmitMethod(e)} style={{outline: \"none\"}}>Сохранить</Button>\r\n                </DialogActions>\r\n                </Form>\r\n            </Dialog>   \r\n        </>\r\n    )\r\n}\r\n\r\nexport default AddMethodDialog;","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Dialogs\\AddMethodParamDialog.js",["746"],"import React, {useState} from 'react';\r\n\r\nimport {\r\n    Button,\r\n    Tooltip,\r\n    Dialog, DialogContent, DialogTitle, DialogActions\r\n} from \"@material-ui/core\";\r\n\r\nimport {Form} from 'react-bootstrap';\r\n\r\nfunction AddMethodParamDialog({active, setActive, method, isDisabledAddParam, getMethodParametrs, textError, setTextError}) {\r\n    const [name, setName] = useState(\"\");\r\n    const [abbreviation, setAbbreviation] = useState(\"\");\r\n    const [curve_type, setCurve_type] = useState(\"\");\r\n    const [units, setUnits] = useState(\"\");\r\n    const [description, setDescription] = useState(\"\");\r\n\r\n    function onSubmitMethodParam(e){\r\n        e.preventDefault();\r\n        fetch(process.env.REACT_APP_API+'method_parametrs/' + method.id + '?format=json',{\r\n            method: 'POST',\r\n            headers:{\r\n                'Accept':'application/json',\r\n                'Content-Type':'application/json',\r\n                'Authorization': \"Token \" + localStorage.getItem('id_token')\r\n            },\r\n            body: JSON.stringify({\r\n                \"name\": name,\r\n                \"abbreviation\": abbreviation,\r\n                \"curve_type\": curve_type,\r\n                \"units\": units.split(' '),\r\n                \"description\": description\r\n            }) \r\n        }).then((res)=>{if (!res.ok)\r\n            {\r\n                if (res.status==400){\r\n                    setTextError('Ошибка: параметр с таким именем уже существует')\r\n                }\r\n                else{\r\n                    setTextError(`Ошибка ${res.status}`)\r\n                }\r\n                }\r\n        else {\r\n            isDisabledAddParam.current=true\r\n            getMethodParametrs()\r\n            setTextError('')\r\n            \r\n    }\r\n    })\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Dialog open={active} onClose={setActive} maxWidth=\"md\" fullWidth>\r\n                <DialogTitle>Добавить параметр для метода - {method.name}</DialogTitle>\r\n                <Form name=\"addmethodparam\">\r\n                    <DialogContent>\r\n                        <Form.Group>\r\n                            <Form.Label htmlFor=\"name\">Регистрируемый параметр</Form.Label>\r\n                            <Form.Control\r\n                            required\r\n                            type=\"text\"\r\n                            id=\"name\"\r\n                            name=\"name\"\r\n                            onChange={e => setName(e.target.value)}\r\n                            />\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <Form.Label htmlFor=\"abbreviation\">Сокращение на латинице</Form.Label>\r\n                            <Form.Control\r\n                            required\r\n                            type=\"text\"\r\n                            id=\"abbreviation\"\r\n                            name=\"abbreviation\"\r\n                            onChange={e => setAbbreviation(e.target.value)}\r\n                            />\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <Form.Label htmlFor=\"curve_type\">Тип кривой</Form.Label>\r\n                            <Form.Control\r\n                            required\r\n                            type=\"text\"\r\n                            id=\"curve_type\"\r\n                            name=\"curve_type\"\r\n                            onChange={e => setCurve_type(e.target.value)}\r\n                            />\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <Form.Label htmlFor=\"units\">Единицы измерения</Form.Label>\r\n                            <Tooltip\r\n                                title=\"Ввод значений через пробел\"\r\n                                arrow\r\n                            >\r\n                                <Form.Control\r\n                                required\r\n                                type=\"text\"\r\n                                id=\"units\"\r\n                                name=\"units\"\r\n                                onChange={e => setUnits(e.target.value)}\r\n                                />\r\n                            </Tooltip>\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <Form.Label htmlFor=\"description\">Описание</Form.Label>\r\n                            <Form.Control\r\n                            required\r\n                            type=\"text\"\r\n                            id=\"description\"\r\n                            name=\"description\"\r\n                            onChange={e => setDescription(e.target.value)}\r\n                            />\r\n                        </Form.Group>\r\n                        <Form.Text style={{fontSize: \"14px\", color: \"red\", paddingLeft:\"10px\", marginBottom:\"20px\"}}>\r\n                                {textError}\r\n                            </Form.Text>\r\n                    </DialogContent>\r\n                <DialogActions>\r\n                    <Button type=\"submit\" style={{outline: \"none\"}}  onClick={onSubmitMethodParam}>Сохранить</Button>\r\n                </DialogActions>\r\n                </Form>\r\n            </Dialog>   \r\n        </>\r\n    )\r\n}\r\n\r\nexport default AddMethodParamDialog;","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Dialogs\\AddMethodClassDialog.js",["747","748"],"import React, {useState} from 'react';\r\n\r\nimport {\r\n    Button,\r\n    TextField,\r\n    Dialog, DialogContent, DialogTitle, DialogActions\r\n} from \"@material-ui/core\";\r\n\r\nimport {Form} from 'react-bootstrap';\r\n\r\nfunction AddMethodClassDialog({active, setActive, isDisabledAddClass, getMethodClasses, textError, setTextError}) {\r\n    const [methodClass, setMethodClass] = useState(\"\");\r\n    \r\n    function onSubmitMethodClass(e){\r\n        e.preventDefault();\r\n        if (methodClass) {\r\n        fetch(process.env.REACT_APP_API+'method_class/?format=json',{\r\n            method: 'POST',\r\n            headers:{\r\n                'Accept':'application/json',\r\n                'Content-Type':'application/json',\r\n                'Authorization': \"Token \" + localStorage.getItem('id_token')\r\n            },\r\n            body: JSON.stringify({\r\n                \"name\": methodClass\r\n            }) \r\n        }).then((res)=>{if (!res.ok)\r\n            {\r\n                if (res.status==400){\r\n                    setTextError('Ошибка: класс с таким именем уже существует')\r\n                }\r\n                else{\r\n                    setTextError(`Ошибка ${res.status}`)\r\n                }\r\n                }\r\n        else {\r\n            isDisabledAddClass.current=true\r\n            getMethodClasses()\r\n            setTextError('')\r\n            \r\n    }\r\n    })\r\n}\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Dialog open={active} onClose={setActive} maxWidth=\"xs\" fullWidth>\r\n                <DialogTitle>Добавить класс методов ГИС</DialogTitle>\r\n                <Form name=\"addmethodclass\">\r\n                    <DialogContent>\r\n                        <Form.Group>\r\n                            <Form.Control\r\n                            required\r\n                            type=\"text\"\r\n                            id=\"add_methodclass\"\r\n                            onChange={e => setMethodClass(e.target.value)} \r\n                            placeholder=\"Введите название класса методов\"\r\n                            />\r\n                        </Form.Group>\r\n                        <Form.Text style={{fontSize: \"14px\", color: \"red\", paddingLeft:\"10px\", marginBottom:\"20px\"}}>\r\n                                {textError}\r\n                            </Form.Text>\r\n                    </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={onSubmitMethodClass} type=\"submit\" style={{outline: \"none\"}}>Сохранить</Button>\r\n                </DialogActions>\r\n                </Form>\r\n            </Dialog>   \r\n        </>\r\n    )\r\n}\r\n\r\nexport default AddMethodClassDialog;","C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Dialogs\\AddMnemonicDialog.js",[],"C:\\Users\\s_martyanova\\CheckList\\Front\\src\\components\\Dialogs\\EditMnemonicDialog.js",[],{"ruleId":"749","replacedBy":"750"},{"ruleId":"751","replacedBy":"752"},{"ruleId":"753","severity":1,"message":"754","line":3,"column":8,"nodeType":"755","messageId":"756","endLine":3,"endColumn":18},{"ruleId":"753","severity":1,"message":"757","line":23,"column":7,"nodeType":"755","messageId":"756","endLine":23,"endColumn":12},{"ruleId":"758","severity":1,"message":"759","line":226,"column":38,"nodeType":"760","endLine":226,"endColumn":94},{"ruleId":"753","severity":1,"message":"761","line":8,"column":5,"nodeType":"755","messageId":"756","endLine":8,"endColumn":10},{"ruleId":"753","severity":1,"message":"762","line":9,"column":5,"nodeType":"755","messageId":"756","endLine":9,"endColumn":11},{"ruleId":"753","severity":1,"message":"763","line":10,"column":5,"nodeType":"755","messageId":"756","endLine":10,"endColumn":9},{"ruleId":"753","severity":1,"message":"764","line":21,"column":8,"nodeType":"755","messageId":"756","endLine":21,"endColumn":22},{"ruleId":"753","severity":1,"message":"765","line":1,"column":26,"nodeType":"755","messageId":"756","endLine":1,"endColumn":32},{"ruleId":"766","severity":1,"message":"767","line":247,"column":8,"nodeType":"768","endLine":247,"endColumn":18,"suggestions":"769"},{"ruleId":"753","severity":1,"message":"770","line":1,"column":37,"nodeType":"755","messageId":"756","endLine":1,"endColumn":45},{"ruleId":"766","severity":1,"message":"771","line":89,"column":6,"nodeType":"768","endLine":89,"endColumn":8,"suggestions":"772"},{"ruleId":"773","severity":1,"message":"774","line":157,"column":65,"nodeType":"775","messageId":"776","endLine":157,"endColumn":67},{"ruleId":"773","severity":1,"message":"774","line":180,"column":59,"nodeType":"775","messageId":"776","endLine":180,"endColumn":61},{"ruleId":"766","severity":1,"message":"777","line":220,"column":8,"nodeType":"768","endLine":220,"endColumn":18,"suggestions":"778"},{"ruleId":"773","severity":1,"message":"774","line":302,"column":86,"nodeType":"775","messageId":"776","endLine":302,"endColumn":88},{"ruleId":"773","severity":1,"message":"774","line":308,"column":90,"nodeType":"775","messageId":"776","endLine":308,"endColumn":92},{"ruleId":"753","severity":1,"message":"779","line":29,"column":10,"nodeType":"755","messageId":"756","endLine":29,"endColumn":17},{"ruleId":"766","severity":1,"message":"780","line":314,"column":8,"nodeType":"768","endLine":314,"endColumn":24,"suggestions":"781"},{"ruleId":"766","severity":1,"message":"782","line":318,"column":8,"nodeType":"768","endLine":318,"endColumn":21,"suggestions":"783"},{"ruleId":"766","severity":1,"message":"784","line":322,"column":8,"nodeType":"768","endLine":322,"endColumn":25,"suggestions":"785"},{"ruleId":"753","severity":1,"message":"786","line":1,"column":26,"nodeType":"755","messageId":"756","endLine":1,"endColumn":35},{"ruleId":"766","severity":1,"message":"771","line":204,"column":8,"nodeType":"768","endLine":204,"endColumn":18,"suggestions":"787"},{"ruleId":"766","severity":1,"message":"788","line":227,"column":7,"nodeType":"768","endLine":227,"endColumn":51,"suggestions":"789"},{"ruleId":"790","severity":1,"message":"791","line":72,"column":13,"nodeType":"760","endLine":72,"endColumn":45},{"ruleId":"790","severity":1,"message":"791","line":74,"column":13,"nodeType":"760","endLine":74,"endColumn":45},{"ruleId":"790","severity":1,"message":"791","line":76,"column":13,"nodeType":"760","endLine":76,"endColumn":45},{"ruleId":"790","severity":1,"message":"791","line":78,"column":13,"nodeType":"760","endLine":78,"endColumn":45},{"ruleId":"790","severity":1,"message":"791","line":80,"column":13,"nodeType":"760","endLine":80,"endColumn":45},{"ruleId":"790","severity":1,"message":"791","line":82,"column":13,"nodeType":"760","endLine":82,"endColumn":45},{"ruleId":"790","severity":1,"message":"791","line":84,"column":13,"nodeType":"760","endLine":84,"endColumn":46},{"ruleId":"790","severity":1,"message":"791","line":85,"column":13,"nodeType":"760","endLine":85,"endColumn":46},{"ruleId":"790","severity":1,"message":"791","line":86,"column":13,"nodeType":"760","endLine":86,"endColumn":46},{"ruleId":"790","severity":1,"message":"791","line":88,"column":13,"nodeType":"760","endLine":88,"endColumn":45},{"ruleId":"790","severity":1,"message":"791","line":90,"column":13,"nodeType":"760","endLine":90,"endColumn":45},{"ruleId":"790","severity":1,"message":"791","line":92,"column":13,"nodeType":"760","endLine":92,"endColumn":46},{"ruleId":"790","severity":1,"message":"791","line":94,"column":13,"nodeType":"760","endLine":94,"endColumn":46},{"ruleId":"790","severity":1,"message":"791","line":111,"column":13,"nodeType":"760","endLine":111,"endColumn":46},{"ruleId":"790","severity":1,"message":"791","line":116,"column":13,"nodeType":"760","endLine":116,"endColumn":46},{"ruleId":"790","severity":1,"message":"791","line":127,"column":13,"nodeType":"760","endLine":127,"endColumn":46},{"ruleId":"790","severity":1,"message":"791","line":129,"column":13,"nodeType":"760","endLine":129,"endColumn":46},{"ruleId":"790","severity":1,"message":"791","line":131,"column":13,"nodeType":"760","endLine":131,"endColumn":46},{"ruleId":"790","severity":1,"message":"791","line":133,"column":13,"nodeType":"760","endLine":133,"endColumn":46},{"ruleId":"790","severity":1,"message":"791","line":135,"column":13,"nodeType":"760","endLine":135,"endColumn":46},{"ruleId":"790","severity":1,"message":"791","line":137,"column":13,"nodeType":"760","endLine":137,"endColumn":46},{"ruleId":"790","severity":1,"message":"791","line":139,"column":13,"nodeType":"760","endLine":139,"endColumn":46},{"ruleId":"790","severity":1,"message":"791","line":152,"column":13,"nodeType":"760","endLine":152,"endColumn":46},{"ruleId":"790","severity":1,"message":"791","line":154,"column":13,"nodeType":"760","endLine":154,"endColumn":46},{"ruleId":"790","severity":1,"message":"791","line":156,"column":13,"nodeType":"760","endLine":156,"endColumn":46},{"ruleId":"790","severity":1,"message":"791","line":158,"column":13,"nodeType":"760","endLine":158,"endColumn":46},{"ruleId":"790","severity":1,"message":"791","line":160,"column":13,"nodeType":"760","endLine":160,"endColumn":46},{"ruleId":"790","severity":1,"message":"791","line":162,"column":13,"nodeType":"760","endLine":162,"endColumn":46},{"ruleId":"790","severity":1,"message":"791","line":164,"column":13,"nodeType":"760","endLine":164,"endColumn":46},{"ruleId":"790","severity":1,"message":"791","line":177,"column":13,"nodeType":"760","endLine":177,"endColumn":46},{"ruleId":"790","severity":1,"message":"791","line":190,"column":13,"nodeType":"760","endLine":190,"endColumn":46},{"ruleId":"790","severity":1,"message":"791","line":192,"column":13,"nodeType":"760","endLine":192,"endColumn":46},{"ruleId":"790","severity":1,"message":"791","line":194,"column":13,"nodeType":"760","endLine":194,"endColumn":46},{"ruleId":"790","severity":1,"message":"791","line":196,"column":13,"nodeType":"760","endLine":196,"endColumn":46},{"ruleId":"790","severity":1,"message":"791","line":200,"column":13,"nodeType":"760","endLine":200,"endColumn":46},{"ruleId":"790","severity":1,"message":"791","line":204,"column":13,"nodeType":"760","endLine":204,"endColumn":46},{"ruleId":"790","severity":1,"message":"791","line":217,"column":13,"nodeType":"760","endLine":217,"endColumn":46},{"ruleId":"790","severity":1,"message":"791","line":219,"column":13,"nodeType":"760","endLine":219,"endColumn":46},{"ruleId":"790","severity":1,"message":"791","line":221,"column":13,"nodeType":"760","endLine":221,"endColumn":46},{"ruleId":"790","severity":1,"message":"791","line":235,"column":13,"nodeType":"760","endLine":235,"endColumn":47},{"ruleId":"790","severity":1,"message":"791","line":236,"column":13,"nodeType":"760","endLine":236,"endColumn":47},{"ruleId":"790","severity":1,"message":"791","line":237,"column":13,"nodeType":"760","endLine":237,"endColumn":47},{"ruleId":"753","severity":1,"message":"792","line":6,"column":5,"nodeType":"755","messageId":"756","endLine":6,"endColumn":10},{"ruleId":"753","severity":1,"message":"793","line":25,"column":46,"nodeType":"755","messageId":"756","endLine":25,"endColumn":60},{"ruleId":"753","severity":1,"message":"794","line":63,"column":12,"nodeType":"755","messageId":"756","endLine":63,"endColumn":24},{"ruleId":"753","severity":1,"message":"795","line":63,"column":26,"nodeType":"755","messageId":"756","endLine":63,"endColumn":41},{"ruleId":"753","severity":1,"message":"796","line":112,"column":12,"nodeType":"755","messageId":"756","endLine":112,"endColumn":22},{"ruleId":"753","severity":1,"message":"797","line":112,"column":24,"nodeType":"755","messageId":"756","endLine":112,"endColumn":37},{"ruleId":"753","severity":1,"message":"798","line":131,"column":18,"nodeType":"755","messageId":"756","endLine":131,"endColumn":25},{"ruleId":"753","severity":1,"message":"799","line":461,"column":11,"nodeType":"755","messageId":"756","endLine":461,"endColumn":31},{"ruleId":"766","severity":1,"message":"800","line":611,"column":8,"nodeType":"768","endLine":611,"endColumn":55,"suggestions":"801"},{"ruleId":"773","severity":1,"message":"774","line":616,"column":37,"nodeType":"775","messageId":"776","endLine":616,"endColumn":39},{"ruleId":"773","severity":1,"message":"774","line":619,"column":37,"nodeType":"775","messageId":"776","endLine":619,"endColumn":39},{"ruleId":"773","severity":1,"message":"774","line":622,"column":37,"nodeType":"775","messageId":"776","endLine":622,"endColumn":39},{"ruleId":"766","severity":1,"message":"802","line":626,"column":8,"nodeType":"768","endLine":626,"endColumn":35,"suggestions":"803"},{"ruleId":"804","severity":1,"message":"805","line":662,"column":52,"nodeType":"806","messageId":"807","endLine":662,"endColumn":54},{"ruleId":"804","severity":1,"message":"805","line":662,"column":77,"nodeType":"806","messageId":"807","endLine":662,"endColumn":79},{"ruleId":"804","severity":1,"message":"808","line":662,"column":77,"nodeType":"806","messageId":"807","endLine":662,"endColumn":79},{"ruleId":"804","severity":1,"message":"808","line":662,"column":114,"nodeType":"806","messageId":"807","endLine":662,"endColumn":116},{"ruleId":"804","severity":1,"message":"808","line":663,"column":17,"nodeType":"806","messageId":"807","endLine":663,"endColumn":19},{"ruleId":"804","severity":1,"message":"808","line":663,"column":54,"nodeType":"806","messageId":"807","endLine":663,"endColumn":56},{"ruleId":"809","severity":1,"message":"810","line":923,"column":56,"nodeType":"811","messageId":"812","endLine":923,"endColumn":58},{"ruleId":"753","severity":1,"message":"813","line":8,"column":5,"nodeType":"755","messageId":"756","endLine":8,"endColumn":21},{"ruleId":"766","severity":1,"message":"771","line":35,"column":10,"nodeType":"768","endLine":35,"endColumn":20,"suggestions":"814"},{"ruleId":"766","severity":1,"message":"815","line":28,"column":7,"nodeType":"768","endLine":28,"endColumn":17,"suggestions":"816"},{"ruleId":"753","severity":1,"message":"817","line":16,"column":10,"nodeType":"755","messageId":"756","endLine":16,"endColumn":27},{"ruleId":"753","severity":1,"message":"818","line":23,"column":7,"nodeType":"755","messageId":"756","endLine":23,"endColumn":16},{"ruleId":"753","severity":1,"message":"819","line":43,"column":22,"nodeType":"755","messageId":"756","endLine":43,"endColumn":33},{"ruleId":"753","severity":1,"message":"820","line":27,"column":10,"nodeType":"755","messageId":"756","endLine":27,"endColumn":37},{"ruleId":"753","severity":1,"message":"821","line":27,"column":69,"nodeType":"755","messageId":"756","endLine":27,"endColumn":98},{"ruleId":"753","severity":1,"message":"822","line":41,"column":7,"nodeType":"755","messageId":"756","endLine":41,"endColumn":18},{"ruleId":"753","severity":1,"message":"823","line":42,"column":7,"nodeType":"755","messageId":"756","endLine":42,"endColumn":23},{"ruleId":"753","severity":1,"message":"824","line":114,"column":12,"nodeType":"755","messageId":"756","endLine":114,"endColumn":20},{"ruleId":"753","severity":1,"message":"825","line":116,"column":12,"nodeType":"755","messageId":"756","endLine":116,"endColumn":22},{"ruleId":"753","severity":1,"message":"826","line":118,"column":12,"nodeType":"755","messageId":"756","endLine":118,"endColumn":19},{"ruleId":"753","severity":1,"message":"827","line":120,"column":12,"nodeType":"755","messageId":"756","endLine":120,"endColumn":23},{"ruleId":"753","severity":1,"message":"798","line":136,"column":18,"nodeType":"755","messageId":"756","endLine":136,"endColumn":25},{"ruleId":"753","severity":1,"message":"828","line":149,"column":12,"nodeType":"755","messageId":"756","endLine":149,"endColumn":31},{"ruleId":"753","severity":1,"message":"829","line":150,"column":12,"nodeType":"755","messageId":"756","endLine":150,"endColumn":27},{"ruleId":"753","severity":1,"message":"830","line":150,"column":29,"nodeType":"755","messageId":"756","endLine":150,"endColumn":47},{"ruleId":"753","severity":1,"message":"831","line":151,"column":12,"nodeType":"755","messageId":"756","endLine":151,"endColumn":23},{"ruleId":"753","severity":1,"message":"832","line":152,"column":12,"nodeType":"755","messageId":"756","endLine":152,"endColumn":30},{"ruleId":"753","severity":1,"message":"833","line":155,"column":12,"nodeType":"755","messageId":"756","endLine":155,"endColumn":30},{"ruleId":"753","severity":1,"message":"834","line":155,"column":32,"nodeType":"755","messageId":"756","endLine":155,"endColumn":53},{"ruleId":"753","severity":1,"message":"835","line":156,"column":12,"nodeType":"755","messageId":"756","endLine":156,"endColumn":31},{"ruleId":"753","severity":1,"message":"836","line":157,"column":12,"nodeType":"755","messageId":"756","endLine":157,"endColumn":30},{"ruleId":"753","severity":1,"message":"799","line":530,"column":11,"nodeType":"755","messageId":"756","endLine":530,"endColumn":31},{"ruleId":"837","severity":1,"message":"838","line":599,"column":17,"nodeType":"755","messageId":"839","endLine":599,"endColumn":28},{"ruleId":"837","severity":1,"message":"840","line":600,"column":17,"nodeType":"755","messageId":"839","endLine":600,"endColumn":34},{"ruleId":"766","severity":1,"message":"771","line":624,"column":8,"nodeType":"768","endLine":624,"endColumn":14,"suggestions":"841"},{"ruleId":"766","severity":1,"message":"800","line":656,"column":8,"nodeType":"768","endLine":656,"endColumn":55,"suggestions":"842"},{"ruleId":"773","severity":1,"message":"774","line":661,"column":37,"nodeType":"775","messageId":"776","endLine":661,"endColumn":39},{"ruleId":"773","severity":1,"message":"774","line":664,"column":37,"nodeType":"775","messageId":"776","endLine":664,"endColumn":39},{"ruleId":"773","severity":1,"message":"774","line":667,"column":37,"nodeType":"775","messageId":"776","endLine":667,"endColumn":39},{"ruleId":"766","severity":1,"message":"802","line":671,"column":8,"nodeType":"768","endLine":671,"endColumn":35,"suggestions":"843"},{"ruleId":"804","severity":1,"message":"805","line":706,"column":33,"nodeType":"806","messageId":"807","endLine":706,"endColumn":35},{"ruleId":"804","severity":1,"message":"805","line":706,"column":39,"nodeType":"806","messageId":"807","endLine":706,"endColumn":41},{"ruleId":"804","severity":1,"message":"808","line":706,"column":39,"nodeType":"806","messageId":"807","endLine":706,"endColumn":41},{"ruleId":"804","severity":1,"message":"808","line":706,"column":76,"nodeType":"806","messageId":"807","endLine":706,"endColumn":78},{"ruleId":"804","severity":1,"message":"808","line":706,"column":94,"nodeType":"806","messageId":"807","endLine":706,"endColumn":96},{"ruleId":"804","severity":1,"message":"808","line":706,"column":131,"nodeType":"806","messageId":"807","endLine":706,"endColumn":133},{"ruleId":"809","severity":1,"message":"810","line":948,"column":52,"nodeType":"811","messageId":"812","endLine":948,"endColumn":54},{"ruleId":"753","severity":1,"message":"844","line":2,"column":10,"nodeType":"755","messageId":"756","endLine":2,"endColumn":19},{"ruleId":"753","severity":1,"message":"845","line":2,"column":21,"nodeType":"755","messageId":"756","endLine":2,"endColumn":31},{"ruleId":"753","severity":1,"message":"846","line":2,"column":33,"nodeType":"755","messageId":"756","endLine":2,"endColumn":44},{"ruleId":"753","severity":1,"message":"793","line":2,"column":46,"nodeType":"755","messageId":"756","endLine":2,"endColumn":60},{"ruleId":"753","severity":1,"message":"847","line":2,"column":62,"nodeType":"755","messageId":"756","endLine":2,"endColumn":76},{"ruleId":"753","severity":1,"message":"848","line":7,"column":3,"nodeType":"755","messageId":"756","endLine":7,"endColumn":17},{"ruleId":"753","severity":1,"message":"849","line":12,"column":3,"nodeType":"755","messageId":"756","endLine":12,"endColumn":7},{"ruleId":"753","severity":1,"message":"850","line":15,"column":3,"nodeType":"755","messageId":"756","endLine":15,"endColumn":13},{"ruleId":"753","severity":1,"message":"792","line":17,"column":3,"nodeType":"755","messageId":"756","endLine":17,"endColumn":8},{"ruleId":"753","severity":1,"message":"851","line":19,"column":3,"nodeType":"755","messageId":"756","endLine":19,"endColumn":19},{"ruleId":"753","severity":1,"message":"852","line":21,"column":10,"nodeType":"755","messageId":"756","endLine":21,"endColumn":20},{"ruleId":"753","severity":1,"message":"853","line":24,"column":3,"nodeType":"755","messageId":"756","endLine":24,"endColumn":22},{"ruleId":"753","severity":1,"message":"854","line":25,"column":3,"nodeType":"755","messageId":"756","endLine":25,"endColumn":16},{"ruleId":"753","severity":1,"message":"855","line":26,"column":3,"nodeType":"755","messageId":"756","endLine":26,"endColumn":12},{"ruleId":"753","severity":1,"message":"856","line":27,"column":3,"nodeType":"755","messageId":"756","endLine":27,"endColumn":12},{"ruleId":"753","severity":1,"message":"857","line":28,"column":3,"nodeType":"755","messageId":"756","endLine":28,"endColumn":7},{"ruleId":"753","severity":1,"message":"858","line":29,"column":3,"nodeType":"755","messageId":"756","endLine":29,"endColumn":7},{"ruleId":"753","severity":1,"message":"859","line":30,"column":3,"nodeType":"755","messageId":"756","endLine":30,"endColumn":11},{"ruleId":"753","severity":1,"message":"860","line":31,"column":3,"nodeType":"755","messageId":"756","endLine":31,"endColumn":11},{"ruleId":"753","severity":1,"message":"861","line":32,"column":3,"nodeType":"755","messageId":"756","endLine":32,"endColumn":9},{"ruleId":"753","severity":1,"message":"862","line":33,"column":3,"nodeType":"755","messageId":"756","endLine":33,"endColumn":10},{"ruleId":"753","severity":1,"message":"863","line":34,"column":3,"nodeType":"755","messageId":"756","endLine":34,"endColumn":6},{"ruleId":"753","severity":1,"message":"864","line":35,"column":3,"nodeType":"755","messageId":"756","endLine":35,"endColumn":6},{"ruleId":"753","severity":1,"message":"865","line":36,"column":3,"nodeType":"755","messageId":"756","endLine":36,"endColumn":7},{"ruleId":"753","severity":1,"message":"866","line":37,"column":3,"nodeType":"755","messageId":"756","endLine":37,"endColumn":8},{"ruleId":"753","severity":1,"message":"867","line":38,"column":3,"nodeType":"755","messageId":"756","endLine":38,"endColumn":8},{"ruleId":"753","severity":1,"message":"868","line":39,"column":3,"nodeType":"755","messageId":"756","endLine":39,"endColumn":12},{"ruleId":"753","severity":1,"message":"869","line":73,"column":9,"nodeType":"755","messageId":"756","endLine":73,"endColumn":22},{"ruleId":"753","severity":1,"message":"870","line":74,"column":7,"nodeType":"755","messageId":"756","endLine":74,"endColumn":14},{"ruleId":"753","severity":1,"message":"871","line":75,"column":7,"nodeType":"755","messageId":"756","endLine":75,"endColumn":12},{"ruleId":"753","severity":1,"message":"872","line":80,"column":10,"nodeType":"755","messageId":"756","endLine":80,"endColumn":18},{"ruleId":"837","severity":1,"message":"873","line":234,"column":16,"nodeType":"755","messageId":"839","endLine":234,"endColumn":17},{"ruleId":"837","severity":1,"message":"874","line":234,"column":23,"nodeType":"755","messageId":"839","endLine":234,"endColumn":24},{"ruleId":"773","severity":1,"message":"774","line":412,"column":27,"nodeType":"775","messageId":"776","endLine":412,"endColumn":29},{"ruleId":"766","severity":1,"message":"875","line":528,"column":6,"nodeType":"768","endLine":528,"endColumn":16,"suggestions":"876"},{"ruleId":"753","severity":1,"message":"877","line":26,"column":8,"nodeType":"755","messageId":"756","endLine":26,"endColumn":11},{"ruleId":"773","severity":1,"message":"878","line":157,"column":42,"nodeType":"775","messageId":"776","endLine":157,"endColumn":44},{"ruleId":"773","severity":1,"message":"878","line":157,"column":59,"nodeType":"775","messageId":"776","endLine":157,"endColumn":61},{"ruleId":"773","severity":1,"message":"878","line":157,"column":75,"nodeType":"775","messageId":"776","endLine":157,"endColumn":77},{"ruleId":"753","severity":1,"message":"879","line":16,"column":25,"nodeType":"755","messageId":"756","endLine":16,"endColumn":39},{"ruleId":"773","severity":1,"message":"774","line":39,"column":36,"nodeType":"775","messageId":"776","endLine":39,"endColumn":38},{"ruleId":"753","severity":1,"message":"880","line":5,"column":5,"nodeType":"755","messageId":"756","endLine":5,"endColumn":14},{"ruleId":"766","severity":1,"message":"881","line":116,"column":6,"nodeType":"768","endLine":116,"endColumn":11,"suggestions":"882"},{"ruleId":"773","severity":1,"message":"774","line":130,"column":23,"nodeType":"775","messageId":"776","endLine":130,"endColumn":25},{"ruleId":"766","severity":1,"message":"883","line":136,"column":6,"nodeType":"768","endLine":136,"endColumn":17,"suggestions":"884"},{"ruleId":"773","severity":1,"message":"774","line":175,"column":16,"nodeType":"775","messageId":"776","endLine":175,"endColumn":18},{"ruleId":"773","severity":1,"message":"774","line":183,"column":21,"nodeType":"775","messageId":"776","endLine":183,"endColumn":23},{"ruleId":"773","severity":1,"message":"774","line":191,"column":21,"nodeType":"775","messageId":"776","endLine":191,"endColumn":23},{"ruleId":"773","severity":1,"message":"774","line":199,"column":21,"nodeType":"775","messageId":"776","endLine":199,"endColumn":23},{"ruleId":"773","severity":1,"message":"774","line":207,"column":21,"nodeType":"775","messageId":"776","endLine":207,"endColumn":23},{"ruleId":"766","severity":1,"message":"885","line":279,"column":6,"nodeType":"768","endLine":279,"endColumn":14,"suggestions":"886"},{"ruleId":"766","severity":1,"message":"887","line":296,"column":10,"nodeType":"768","endLine":296,"endColumn":168,"suggestions":"888"},{"ruleId":"753","severity":1,"message":"880","line":5,"column":5,"nodeType":"755","messageId":"756","endLine":5,"endColumn":14},{"ruleId":"753","severity":1,"message":"889","line":7,"column":8,"nodeType":"755","messageId":"756","endLine":7,"endColumn":29},{"ruleId":"753","severity":1,"message":"890","line":23,"column":12,"nodeType":"755","messageId":"756","endLine":23,"endColumn":25},{"ruleId":"753","severity":1,"message":"891","line":24,"column":12,"nodeType":"755","messageId":"756","endLine":24,"endColumn":23},{"ruleId":"753","severity":1,"message":"892","line":24,"column":25,"nodeType":"755","messageId":"756","endLine":24,"endColumn":39},{"ruleId":"773","severity":1,"message":"774","line":183,"column":21,"nodeType":"775","messageId":"776","endLine":183,"endColumn":23},{"ruleId":"773","severity":1,"message":"774","line":188,"column":27,"nodeType":"775","messageId":"776","endLine":188,"endColumn":29},{"ruleId":"773","severity":1,"message":"774","line":201,"column":28,"nodeType":"775","messageId":"776","endLine":201,"endColumn":30},{"ruleId":"773","severity":1,"message":"774","line":206,"column":34,"nodeType":"775","messageId":"776","endLine":206,"endColumn":36},{"ruleId":"766","severity":1,"message":"893","line":226,"column":9,"nodeType":"768","endLine":226,"endColumn":20,"suggestions":"894"},{"ruleId":"766","severity":1,"message":"895","line":171,"column":9,"nodeType":"768","endLine":171,"endColumn":25,"suggestions":"896"},{"ruleId":"766","severity":1,"message":"897","line":187,"column":9,"nodeType":"768","endLine":187,"endColumn":20,"suggestions":"898"},{"ruleId":"773","severity":1,"message":"774","line":13,"column":16,"nodeType":"775","messageId":"776","endLine":13,"endColumn":18},{"ruleId":"773","severity":1,"message":"774","line":16,"column":22,"nodeType":"775","messageId":"776","endLine":16,"endColumn":24},{"ruleId":"773","severity":1,"message":"774","line":19,"column":23,"nodeType":"775","messageId":"776","endLine":19,"endColumn":25},{"ruleId":"899","severity":1,"message":"900","line":62,"column":37,"nodeType":"811","messageId":"901","endLine":62,"endColumn":66},{"ruleId":"899","severity":1,"message":"900","line":63,"column":53,"nodeType":"811","messageId":"901","endLine":63,"endColumn":90},{"ruleId":"899","severity":1,"message":"900","line":78,"column":37,"nodeType":"811","messageId":"901","endLine":78,"endColumn":66},{"ruleId":"899","severity":1,"message":"900","line":79,"column":53,"nodeType":"811","messageId":"901","endLine":79,"endColumn":90},{"ruleId":"899","severity":1,"message":"900","line":100,"column":37,"nodeType":"811","messageId":"901","endLine":100,"endColumn":66},{"ruleId":"899","severity":1,"message":"900","line":114,"column":37,"nodeType":"811","messageId":"901","endLine":114,"endColumn":66},{"ruleId":"753","severity":1,"message":"902","line":105,"column":9,"nodeType":"755","messageId":"756","endLine":105,"endColumn":18},{"ruleId":"773","severity":1,"message":"774","line":30,"column":31,"nodeType":"775","messageId":"776","endLine":30,"endColumn":33},{"ruleId":"773","severity":1,"message":"774","line":43,"column":41,"nodeType":"775","messageId":"776","endLine":43,"endColumn":43},{"ruleId":"753","severity":1,"message":"903","line":13,"column":12,"nodeType":"755","messageId":"756","endLine":13,"endColumn":22},{"ruleId":"773","severity":1,"message":"774","line":32,"column":35,"nodeType":"775","messageId":"776","endLine":32,"endColumn":37},{"ruleId":"773","severity":1,"message":"774","line":42,"column":32,"nodeType":"775","messageId":"776","endLine":42,"endColumn":34},{"ruleId":"753","severity":1,"message":"880","line":5,"column":5,"nodeType":"755","messageId":"756","endLine":5,"endColumn":14},{"ruleId":"773","severity":1,"message":"774","line":41,"column":31,"nodeType":"775","messageId":"776","endLine":41,"endColumn":33},{"ruleId":"753","severity":1,"message":"786","line":1,"column":26,"nodeType":"755","messageId":"756","endLine":1,"endColumn":35},{"ruleId":"753","severity":1,"message":"880","line":5,"column":5,"nodeType":"755","messageId":"756","endLine":5,"endColumn":14},{"ruleId":"773","severity":1,"message":"774","line":42,"column":31,"nodeType":"775","messageId":"776","endLine":42,"endColumn":33},{"ruleId":"753","severity":1,"message":"880","line":5,"column":5,"nodeType":"755","messageId":"756","endLine":5,"endColumn":14},{"ruleId":"904","severity":1,"message":"905","line":1,"column":1,"nodeType":"906","messageId":"776","fix":"907"},{"ruleId":"753","severity":1,"message":"871","line":26,"column":7,"nodeType":"755","messageId":"756","endLine":26,"endColumn":12},{"ruleId":"753","severity":1,"message":"908","line":1,"column":17,"nodeType":"755","messageId":"756","endLine":1,"endColumn":25},{"ruleId":"753","severity":1,"message":"786","line":1,"column":27,"nodeType":"755","messageId":"756","endLine":1,"endColumn":36},{"ruleId":"753","severity":1,"message":"909","line":4,"column":18,"nodeType":"755","messageId":"756","endLine":4,"endColumn":24},{"ruleId":"753","severity":1,"message":"910","line":7,"column":8,"nodeType":"755","messageId":"756","endLine":7,"endColumn":15},{"ruleId":"753","severity":1,"message":"911","line":12,"column":5,"nodeType":"755","messageId":"756","endLine":12,"endColumn":11},{"ruleId":"753","severity":1,"message":"912","line":13,"column":5,"nodeType":"755","messageId":"756","endLine":13,"endColumn":13},{"ruleId":"753","severity":1,"message":"860","line":16,"column":5,"nodeType":"755","messageId":"756","endLine":16,"endColumn":13},{"ruleId":"753","severity":1,"message":"862","line":17,"column":5,"nodeType":"755","messageId":"756","endLine":17,"endColumn":12},{"ruleId":"753","severity":1,"message":"866","line":18,"column":5,"nodeType":"755","messageId":"756","endLine":18,"endColumn":10},{"ruleId":"753","severity":1,"message":"867","line":19,"column":5,"nodeType":"755","messageId":"756","endLine":19,"endColumn":10},{"ruleId":"753","severity":1,"message":"868","line":20,"column":5,"nodeType":"755","messageId":"756","endLine":20,"endColumn":14},{"ruleId":"753","severity":1,"message":"908","line":1,"column":17,"nodeType":"755","messageId":"756","endLine":1,"endColumn":25},{"ruleId":"753","severity":1,"message":"786","line":1,"column":27,"nodeType":"755","messageId":"756","endLine":1,"endColumn":36},{"ruleId":"753","severity":1,"message":"909","line":4,"column":18,"nodeType":"755","messageId":"756","endLine":4,"endColumn":24},{"ruleId":"753","severity":1,"message":"910","line":7,"column":8,"nodeType":"755","messageId":"756","endLine":7,"endColumn":15},{"ruleId":"753","severity":1,"message":"911","line":12,"column":5,"nodeType":"755","messageId":"756","endLine":12,"endColumn":11},{"ruleId":"753","severity":1,"message":"912","line":13,"column":5,"nodeType":"755","messageId":"756","endLine":13,"endColumn":13},{"ruleId":"753","severity":1,"message":"860","line":16,"column":5,"nodeType":"755","messageId":"756","endLine":16,"endColumn":13},{"ruleId":"753","severity":1,"message":"862","line":17,"column":5,"nodeType":"755","messageId":"756","endLine":17,"endColumn":12},{"ruleId":"753","severity":1,"message":"866","line":18,"column":5,"nodeType":"755","messageId":"756","endLine":18,"endColumn":10},{"ruleId":"753","severity":1,"message":"867","line":19,"column":5,"nodeType":"755","messageId":"756","endLine":19,"endColumn":10},{"ruleId":"753","severity":1,"message":"868","line":20,"column":5,"nodeType":"755","messageId":"756","endLine":20,"endColumn":14},{"ruleId":"753","severity":1,"message":"908","line":1,"column":17,"nodeType":"755","messageId":"756","endLine":1,"endColumn":25},{"ruleId":"753","severity":1,"message":"786","line":1,"column":27,"nodeType":"755","messageId":"756","endLine":1,"endColumn":36},{"ruleId":"753","severity":1,"message":"909","line":4,"column":18,"nodeType":"755","messageId":"756","endLine":4,"endColumn":24},{"ruleId":"753","severity":1,"message":"913","line":6,"column":8,"nodeType":"755","messageId":"756","endLine":6,"endColumn":23},{"ruleId":"753","severity":1,"message":"910","line":7,"column":8,"nodeType":"755","messageId":"756","endLine":7,"endColumn":15},{"ruleId":"753","severity":1,"message":"911","line":12,"column":5,"nodeType":"755","messageId":"756","endLine":12,"endColumn":11},{"ruleId":"753","severity":1,"message":"912","line":13,"column":5,"nodeType":"755","messageId":"756","endLine":13,"endColumn":13},{"ruleId":"753","severity":1,"message":"860","line":16,"column":5,"nodeType":"755","messageId":"756","endLine":16,"endColumn":13},{"ruleId":"753","severity":1,"message":"862","line":17,"column":5,"nodeType":"755","messageId":"756","endLine":17,"endColumn":12},{"ruleId":"753","severity":1,"message":"866","line":18,"column":5,"nodeType":"755","messageId":"756","endLine":18,"endColumn":10},{"ruleId":"753","severity":1,"message":"867","line":19,"column":5,"nodeType":"755","messageId":"756","endLine":19,"endColumn":10},{"ruleId":"753","severity":1,"message":"868","line":20,"column":5,"nodeType":"755","messageId":"756","endLine":20,"endColumn":14},{"ruleId":"753","severity":1,"message":"908","line":1,"column":17,"nodeType":"755","messageId":"756","endLine":1,"endColumn":25},{"ruleId":"753","severity":1,"message":"786","line":1,"column":27,"nodeType":"755","messageId":"756","endLine":1,"endColumn":36},{"ruleId":"753","severity":1,"message":"909","line":4,"column":18,"nodeType":"755","messageId":"756","endLine":4,"endColumn":24},{"ruleId":"753","severity":1,"message":"910","line":7,"column":8,"nodeType":"755","messageId":"756","endLine":7,"endColumn":15},{"ruleId":"753","severity":1,"message":"911","line":12,"column":5,"nodeType":"755","messageId":"756","endLine":12,"endColumn":11},{"ruleId":"753","severity":1,"message":"912","line":13,"column":5,"nodeType":"755","messageId":"756","endLine":13,"endColumn":13},{"ruleId":"753","severity":1,"message":"860","line":16,"column":5,"nodeType":"755","messageId":"756","endLine":16,"endColumn":13},{"ruleId":"753","severity":1,"message":"862","line":17,"column":5,"nodeType":"755","messageId":"756","endLine":17,"endColumn":12},{"ruleId":"753","severity":1,"message":"866","line":18,"column":5,"nodeType":"755","messageId":"756","endLine":18,"endColumn":10},{"ruleId":"753","severity":1,"message":"867","line":19,"column":5,"nodeType":"755","messageId":"756","endLine":19,"endColumn":10},{"ruleId":"753","severity":1,"message":"868","line":20,"column":5,"nodeType":"755","messageId":"756","endLine":20,"endColumn":14},{"ruleId":"753","severity":1,"message":"786","line":1,"column":27,"nodeType":"755","messageId":"756","endLine":1,"endColumn":36},{"ruleId":"753","severity":1,"message":"909","line":4,"column":18,"nodeType":"755","messageId":"756","endLine":4,"endColumn":24},{"ruleId":"753","severity":1,"message":"910","line":7,"column":8,"nodeType":"755","messageId":"756","endLine":7,"endColumn":15},{"ruleId":"753","severity":1,"message":"911","line":12,"column":5,"nodeType":"755","messageId":"756","endLine":12,"endColumn":11},{"ruleId":"753","severity":1,"message":"912","line":13,"column":5,"nodeType":"755","messageId":"756","endLine":13,"endColumn":13},{"ruleId":"753","severity":1,"message":"860","line":16,"column":5,"nodeType":"755","messageId":"756","endLine":16,"endColumn":13},{"ruleId":"753","severity":1,"message":"862","line":17,"column":5,"nodeType":"755","messageId":"756","endLine":17,"endColumn":12},{"ruleId":"753","severity":1,"message":"866","line":18,"column":5,"nodeType":"755","messageId":"756","endLine":18,"endColumn":10},{"ruleId":"753","severity":1,"message":"867","line":19,"column":5,"nodeType":"755","messageId":"756","endLine":19,"endColumn":10},{"ruleId":"753","severity":1,"message":"868","line":20,"column":5,"nodeType":"755","messageId":"756","endLine":20,"endColumn":14},{"ruleId":"753","severity":1,"message":"914","line":25,"column":12,"nodeType":"755","messageId":"756","endLine":25,"endColumn":16},{"ruleId":"753","severity":1,"message":"915","line":25,"column":18,"nodeType":"755","messageId":"756","endLine":25,"endColumn":25},{"ruleId":"753","severity":1,"message":"916","line":26,"column":12,"nodeType":"755","messageId":"756","endLine":26,"endColumn":21},{"ruleId":"753","severity":1,"message":"917","line":26,"column":23,"nodeType":"755","messageId":"756","endLine":26,"endColumn":35},{"ruleId":"753","severity":1,"message":"908","line":1,"column":17,"nodeType":"755","messageId":"756","endLine":1,"endColumn":25},{"ruleId":"753","severity":1,"message":"786","line":1,"column":27,"nodeType":"755","messageId":"756","endLine":1,"endColumn":36},{"ruleId":"753","severity":1,"message":"909","line":4,"column":18,"nodeType":"755","messageId":"756","endLine":4,"endColumn":24},{"ruleId":"753","severity":1,"message":"910","line":7,"column":8,"nodeType":"755","messageId":"756","endLine":7,"endColumn":15},{"ruleId":"753","severity":1,"message":"911","line":12,"column":5,"nodeType":"755","messageId":"756","endLine":12,"endColumn":11},{"ruleId":"753","severity":1,"message":"912","line":13,"column":5,"nodeType":"755","messageId":"756","endLine":13,"endColumn":13},{"ruleId":"753","severity":1,"message":"860","line":16,"column":5,"nodeType":"755","messageId":"756","endLine":16,"endColumn":13},{"ruleId":"753","severity":1,"message":"862","line":17,"column":5,"nodeType":"755","messageId":"756","endLine":17,"endColumn":12},{"ruleId":"753","severity":1,"message":"866","line":18,"column":5,"nodeType":"755","messageId":"756","endLine":18,"endColumn":10},{"ruleId":"753","severity":1,"message":"867","line":19,"column":5,"nodeType":"755","messageId":"756","endLine":19,"endColumn":10},{"ruleId":"753","severity":1,"message":"868","line":20,"column":5,"nodeType":"755","messageId":"756","endLine":20,"endColumn":14},{"ruleId":"753","severity":1,"message":"918","line":5,"column":10,"nodeType":"755","messageId":"756","endLine":5,"endColumn":16},{"ruleId":"753","severity":1,"message":"919","line":5,"column":18,"nodeType":"755","messageId":"756","endLine":5,"endColumn":27},{"ruleId":"753","severity":1,"message":"920","line":6,"column":10,"nodeType":"755","messageId":"756","endLine":6,"endColumn":17},{"ruleId":"753","severity":1,"message":"921","line":6,"column":19,"nodeType":"755","messageId":"756","endLine":6,"endColumn":29},{"ruleId":"753","severity":1,"message":"922","line":7,"column":10,"nodeType":"755","messageId":"756","endLine":7,"endColumn":18},{"ruleId":"753","severity":1,"message":"923","line":7,"column":20,"nodeType":"755","messageId":"756","endLine":7,"endColumn":31},{"ruleId":"753","severity":1,"message":"880","line":4,"column":5,"nodeType":"755","messageId":"756","endLine":4,"endColumn":14},{"ruleId":"766","severity":1,"message":"924","line":181,"column":8,"nodeType":"768","endLine":181,"endColumn":14,"suggestions":"925"},{"ruleId":"773","severity":1,"message":"774","line":29,"column":29,"nodeType":"775","messageId":"776","endLine":29,"endColumn":31},{"ruleId":"753","severity":1,"message":"880","line":5,"column":5,"nodeType":"755","messageId":"756","endLine":5,"endColumn":14},{"ruleId":"773","severity":1,"message":"774","line":37,"column":31,"nodeType":"775","messageId":"776","endLine":37,"endColumn":33},{"ruleId":"773","severity":1,"message":"774","line":47,"column":28,"nodeType":"775","messageId":"776","endLine":47,"endColumn":30},{"ruleId":"753","severity":1,"message":"880","line":5,"column":5,"nodeType":"755","messageId":"756","endLine":5,"endColumn":14},{"ruleId":"773","severity":1,"message":"774","line":30,"column":31,"nodeType":"775","messageId":"776","endLine":30,"endColumn":33},{"ruleId":"773","severity":1,"message":"774","line":36,"column":31,"nodeType":"775","messageId":"776","endLine":36,"endColumn":33},{"ruleId":"753","severity":1,"message":"880","line":5,"column":5,"nodeType":"755","messageId":"756","endLine":5,"endColumn":14},{"ruleId":"773","severity":1,"message":"774","line":29,"column":31,"nodeType":"775","messageId":"776","endLine":29,"endColumn":33},"no-native-reassign",["926"],"no-negated-in-lhs",["927"],"no-unused-vars","'jwt_decode' is defined but never used.","Identifier","unusedVar","'token' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","'Route' is defined but never used.","'Switch' is defined but never used.","'Link' is defined but never used.","'OneTrackedWell' is defined but never used.","'useRef' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'location.state' and 'props'. Either include them or remove the dependency array.","ArrayExpression",["928"],"'Suspense' is defined but never used.","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array.",["929"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'getMethodClasses' and 'getMethods'. Either include them or remove the dependency array.",["930"],"'NavItem' is defined but never used.","React Hook useEffect has missing dependencies: 'fieldId' and 'fieldsData.length'. Either include them or remove the dependency array.",["931"],"React Hook useEffect has missing dependencies: 'clustersData.length' and 'selectedCluster'. Either include them or remove the dependency array.",["932"],"React Hook useEffect has missing dependencies: 'selectedWell' and 'wellsData.length'. Either include them or remove the dependency array.",["933"],"'useEffect' is defined but never used.",["934"],"React Hook useEffect has a missing dependency: 'idPetro'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setPetroData' needs the current value of 'idPetro'.",["935"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'Input' is defined but never used.","'styleTextfield' is defined but never used.","'method_value' is assigned a value but never used.","'setMethod_value' is assigned a value but never used.","'quality_id' is assigned a value but never used.","'setQuality_id' is assigned a value but never used.","'setTest' is assigned a value but never used.","'updateFullnessValues' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'rows' and 'secondrows'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setValue' needs the current value of 'rows'.",["936"],"React Hook useEffect has missing dependencies: 'digitalData.digital_count', 'digitalData.type', and 'fullnessData.full_inf_count'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setValue' needs the current value of 'digitalData.digital_count'.",["937"],"no-mixed-operators","Unexpected mix of '&&' and '||'. Use parentheses to clarify the intended order of operations.","LogicalExpression","unexpectedMixedOperator","Unexpected mix of '||' and '&&'. Use parentheses to clarify the intended order of operations.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'CircularProgress' is defined but never used.",["938"],"React Hook useEffect has a missing dependency: 'getReports'. Either include it or remove the dependency array.",["939"],"'mdiConsoleNetwork' is defined but never used.","'useStyles' is assigned a value but never used.","'setConstant' is assigned a value but never used.","'prepare_for_put_secondtable' is defined but never used.","'prepare_for_put_inform_method' is defined but never used.","'ITEM_HEIGHT' is assigned a value but never used.","'ITEM_PADDING_TOP' is assigned a value but never used.","'field_id' is assigned a value but never used.","'cluster_id' is assigned a value but never used.","'well_id' is assigned a value but never used.","'wellbore_id' is assigned a value but never used.","'checkWellboreValues' is assigned a value but never used.","'checkWellValues' is assigned a value but never used.","'setCheckWellValues' is assigned a value but never used.","'checkValues' is assigned a value but never used.","'checkValuesForPost' is assigned a value but never used.","'checkDigitalChange' is assigned a value but never used.","'setCheckDigitalChange' is assigned a value but never used.","'checkFullnessChange' is assigned a value but never used.","'checkDensityChange' is assigned a value but never used.","no-redeclare","'updatedRows' is already defined.","redeclared","'updatedRowsSecond' is already defined.",["940"],["941"],["942"],"'styleCell' is defined but never used.","'styleInput' is defined but never used.","'styleSelect' is defined but never used.","'styleBlueInput' is defined but never used.","'LinearProgress' is defined but never used.","'Card' is defined but never used.","'InputLabel' is defined but never used.","'FormControlLabel' is defined but never used.","'Pagination' is defined but never used.","'ResponsiveContainer' is defined but never used.","'ComposedChart' is defined but never used.","'AreaChart' is defined but never used.","'LineChart' is defined but never used.","'Line' is defined but never used.","'Area' is defined but never used.","'PieChart' is defined but never used.","'BarChart' is defined but never used.","'Legend' is defined but never used.","'Tooltip' is defined but never used.","'Bar' is defined but never used.","'Pie' is defined but never used.","'Cell' is defined but never used.","'YAxis' is defined but never used.","'XAxis' is defined but never used.","'LabelList' is defined but never used.","'refFilterCard' is assigned a value but never used.","'classes' is assigned a value but never used.","'theme' is assigned a value but never used.","'dataPlan' is assigned a value but never used.","'i' is already defined.","'l' is already defined.","React Hook useEffect has a missing dependency: 'get_percent_well'. Either include it or remove the dependency array.",["943"],"'Dot' is defined but never used.","Expected '!==' and instead saw '!='.","'setStatusError' is assigned a value but never used.","'TextField' is defined but never used.","React Hook useEffect has a missing dependency: 'mainData.data_type'. Either include it or remove the dependency array.",["944"],"React Hook useEffect has a missing dependency: 'lqc'. Either include it or remove the dependency array.",["945"],"React Hook useEffect has a missing dependency: 'getPetroInformation'. Either include it or remove the dependency array.",["946"],"React Hook useEffect has missing dependencies: 'digitalData_type', 'lqc', 'petrophysic_task', and 'secondRow'. Either include them or remove the dependency array. If 'setMethod_value' needs the current value of 'lqc', you can also switch to useReducer instead of useState and read 'lqc' in the reducer.",["947"],"'BootstrapSwitchButton' is defined but never used.","'digital_count' is assigned a value but never used.","'data_status' is assigned a value but never used.","'setData_status' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'digitalData.correctness_dataWitsml', 'digitalData.curveLas', 'digitalData.curveWitsml', 'digitalData.log_dataLas', 'digitalData.log_dataWitsml', 'digitalData.parameteresLas', 'digitalData.parameteresWitsml', 'digitalData.type', 'digitalData.wellLas', and 'digitalData.wellWitsml'. Either include them or remove the dependency array. If 'setType' needs the current value of 'digitalData.type', you can also switch to useReducer instead of useState and read 'digitalData.type' in the reducer.",["948"],"React Hook useEffect has missing dependencies: 'act', 'calibration', 'chrono_data', 'control_record', 'dash_comp', 'inklino_data', 'lqc', 'main_record', 'parametr', 'setFullnessData', 'sol_data', 'summary_data', 'titul_list', 'well_construction', and 'wellbore_sizes'. Either include them or remove the dependency array. If 'setFullnessData' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["949"],"React Hook useEffect has missing dependencies: 'fullnessData.act', 'fullnessData.calibration', 'fullnessData.chrono_data', 'fullnessData.control_record', 'fullnessData.dash_comp', 'fullnessData.inklino_data', 'fullnessData.lqc', 'fullnessData.main_record', 'fullnessData.parametr', 'fullnessData.sol_data', 'fullnessData.summary_data', 'fullnessData.titul_list', 'fullnessData.well_construction', and 'fullnessData.wellbore_sizes'. Either include them or remove the dependency array. If 'setAct' needs the current value of 'fullnessData.act', you can also switch to useReducer instead of useState and read 'fullnessData.act' in the reducer.",["950"],"no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'i'.","unsafeRefs","'petro_sum' is assigned a value but never used.","'isDisabled' is assigned a value but never used.","unicode-bom","Unexpected Unicode BOM (Byte Order Mark).","Program",{"range":"951","text":"952"},"'useState' is defined but never used.","'LineJS' is defined but never used.","'Loading' is defined but never used.","'Select' is defined but never used.","'MenuItem' is defined but never used.","'ChartDataLabels' is defined but never used.","'year' is assigned a value but never used.","'setYear' is assigned a value but never used.","'nakopPlan' is assigned a value but never used.","'setNakopPlan' is assigned a value but never used.","'isLeft' is assigned a value but never used.","'setIsLeft' is assigned a value but never used.","'isRight' is assigned a value but never used.","'setIsRight' is assigned a value but never used.","'isCenter' is assigned a value but never used.","'setIsCenter' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'checkPost'. Either include it or remove the dependency array.",["953"],"no-global-assign","no-unsafe-negation",{"desc":"954","fix":"955"},{"desc":"956","fix":"957"},{"desc":"958","fix":"959"},{"desc":"960","fix":"961"},{"desc":"962","fix":"963"},{"desc":"964","fix":"965"},{"desc":"966","fix":"967"},{"desc":"968","fix":"969"},{"desc":"970","fix":"971"},{"desc":"972","fix":"973"},{"desc":"966","fix":"974"},{"desc":"975","fix":"976"},{"desc":"977","fix":"978"},{"desc":"970","fix":"979"},{"desc":"972","fix":"980"},{"desc":"981","fix":"982"},{"desc":"983","fix":"984"},{"desc":"985","fix":"986"},{"desc":"987","fix":"988"},{"desc":"989","fix":"990"},{"desc":"991","fix":"992"},{"desc":"993","fix":"994"},{"desc":"995","fix":"996"},[-1,0],"",{"desc":"997","fix":"998"},"Update the dependencies array to be: [constant, location.state, props]",{"range":"999","text":"1000"},"Update the dependencies array to be: [props]",{"range":"1001","text":"1002"},"Update the dependencies array to be: [constant, getMethodClasses, getMethods]",{"range":"1003","text":"1004"},"Update the dependencies array to be: [fieldId, fieldsData.length, refreshCluster]",{"range":"1005","text":"1006"},"Update the dependencies array to be: [clustersData.length, refreshWell, selectedCluster]",{"range":"1007","text":"1008"},"Update the dependencies array to be: [refreshWellbore, selectedWell, wellsData.length]",{"range":"1009","text":"1010"},"Update the dependencies array to be: [constant, props]",{"range":"1011","text":"1012"},"Update the dependencies array to be: [collectors, saturation, kp, kng, lithotype, idPetro]",{"range":"1013","text":"1014"},"Update the dependencies array to be: [digitalData, fullnessData, mainData.data_type, rows, secondrows]",{"range":"1015","text":"1016"},"Update the dependencies array to be: [rows, densityData.density, digitalData.digital_count, digitalData.type, fullnessData.full_inf_count]",{"range":"1017","text":"1018"},{"range":"1019","text":"1012"},"Update the dependencies array to be: [constant, getReports]",{"range":"1020","text":"1021"},"Update the dependencies array to be: [props, test]",{"range":"1022","text":"1023"},{"range":"1024","text":"1016"},{"range":"1025","text":"1018"},"Update the dependencies array to be: [constant, get_percent_well]",{"range":"1026","text":"1027"},"Update the dependencies array to be: [mainData.data_type, row]",{"range":"1028","text":"1029"},"Update the dependencies array to be: [lqc, secondrow]",{"range":"1030","text":"1031"},"Update the dependencies array to be: [getPetroInformation, method]",{"range":"1032","text":"1033"},"Update the dependencies array to be: [mainData, method, linkage, emissions, noise, control, distribute_palet, distribute_support, dash, corresponse, correlation, device_tech_condition, koef_shod, secondRow, lqc, digitalData_type, petrophysic_task]",{"range":"1034","text":"1035"},"Update the dependencies array to be: [digitalData.correctness_dataWitsml, digitalData.curveLas, digitalData.curveWitsml, digitalData.log_dataLas, digitalData.log_dataWitsml, digitalData.parameteresLas, digitalData.parameteresWitsml, digitalData.type, digitalData.wellLas, digitalData.wellWitsml, setActive]",{"range":"1036","text":"1037"},"Update the dependencies array to be: [act, calibration, chrono_data, control_record, dash_comp, full_inf_count, inklino_data, lqc, main_record, parametr, setFullnessData, sol_data, summary_data, titul_list, well_construction, wellbore_sizes]",{"range":"1038","text":"1039"},"Update the dependencies array to be: [fullnessData.act, fullnessData.calibration, fullnessData.chrono_data, fullnessData.control_record, fullnessData.dash_comp, fullnessData.inklino_data, fullnessData.lqc, fullnessData.main_record, fullnessData.parametr, fullnessData.sol_data, fullnessData.summary_data, fullnessData.titul_list, fullnessData.well_construction, fullnessData.wellbore_sizes, setActive]",{"range":"1040","text":"1041"},"Update the dependencies array to be: [checkPost, user]",{"range":"1042","text":"1043"},[8722,8732],"[constant, location.state, props]",[2982,2984],"[props]",[8554,8564],"[constant, getMethodClasses, getMethods]",[11756,11772],"[fieldId, fieldsData.length, refreshCluster]",[11873,11886],"[clustersData.length, refreshWell, selectedCluster]",[11989,12006],"[refreshWellbore, selectedWell, wellsData.length]",[8177,8187],"[constant, props]",[8765,8809],"[collectors, saturation, kp, kng, lithotype, idPetro]",[24406,24453],"[digitalData, fullnessData, mainData.data_type, rows, secondrows]",[24939,24966],"[rows, densityData.density, digitalData.digital_count, digitalData.type, fullnessData.full_inf_count]",[1297,1307],[837,847],"[constant, getReports]",[25750,25756],"[props, test]",[27432,27479],[27969,27996],[18974,18984],"[constant, get_percent_well]",[3867,3872],"[mainData.data_type, row]",[4674,4685],"[lqc, secondrow]",[9375,9383],"[getPetroInformation, method]",[10242,10400],"[mainData, method, linkage, emissions, noise, control, distribute_palet, distribute_support, dash, corresponse, correlation, device_tech_condition, koef_shod, secondRow, lqc, digitalData_type, petrophysic_task]",[7580,7591],"[digitalData.correctness_dataWitsml, digitalData.curveLas, digitalData.curveWitsml, digitalData.log_dataLas, digitalData.log_dataWitsml, digitalData.parameteresLas, digitalData.parameteresWitsml, digitalData.type, digitalData.wellLas, digitalData.wellWitsml, setActive]",[5801,5817],"[act, calibration, chrono_data, control_record, dash_comp, full_inf_count, inklino_data, lqc, main_record, parametr, setFullnessData, sol_data, summary_data, titul_list, well_construction, wellbore_sizes]",[6528,6539],"[fullnessData.act, fullnessData.calibration, fullnessData.chrono_data, fullnessData.control_record, fullnessData.dash_comp, fullnessData.inklino_data, fullnessData.lqc, fullnessData.main_record, fullnessData.parametr, fullnessData.sol_data, fullnessData.summary_data, fullnessData.titul_list, fullnessData.well_construction, fullnessData.wellbore_sizes, setActive]",[6543,6549],"[checkPost, user]"]