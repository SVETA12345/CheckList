{"version":3,"sources":["components/Dialogs/WitsmlDialog.js"],"names":["WitsmlDialog","active","setActive","witsml","onUpdate","role","localStorage","getItem","useState","fullness_data","setFullness_data","curvenames","setCurvenames","mnemodescription","setMnemodescription","witsml_count","setKoef","status","setStatus","witsmlData","setWitsmlData","updateValues","e","inputName","target","name","inputValue","value","useEffect","open","onClose","maxWidth","fullWidth","style","float","checked","width","onChange","onlabel","offlabel","onstyle","offstyle","Group","Label","htmlFor","Control","disabled","as","id","onClick","obj","key","delete_all_props","calc_koef","outline","visibility","push_all_full"],"mappings":"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","file":"static/js/4.74b7d9ca.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\r\n\r\nimport {\r\n    Button,\r\n    Dialog, DialogContent, DialogTitle, DialogActions\r\n} from \"@material-ui/core\";\r\nimport BootstrapSwitchButton from 'bootstrap-switch-button-react';\r\n\r\nimport {Form} from 'react-bootstrap';\r\nimport {calc_koef} from \"../../pages/checklist/Scripts\";\r\n\r\nfunction WitsmlDialog({active, setActive, witsml, onUpdate}) {\r\n    const role = localStorage.getItem('role');\r\n    const [fullness_data, setFullness_data] = useState(\"\")\r\n    const [curvenames, setCurvenames] = useState(\"\")\r\n    const [mnemodescription, setMnemodescription] = useState(\"\")\r\n    const [witsml_count, setKoef] = useState(null)\r\n    const [status, setStatus] = useState(true);\r\n    const [witsmlData, setWitsmlData] = useState({});\r\n\r\n    const delete_all_props = (obj) => {\r\n        setFullness_data(\"\");\r\n        setCurvenames(\"\");\r\n        setMnemodescription(\"\");\r\n        setKoef(null);\r\n        for (var key in obj){\r\n            obj[key] = \"\"\r\n        }\r\n    }\r\n\r\n    const push_all_full = (obj) => {\r\n        setFullness_data(\"Полная\");\r\n        setCurvenames(\"Полная\");\r\n        setMnemodescription(\"Полная\");\r\n        for (var key in obj){\r\n            if (key !== \"witsml_count\" && key !== \"status\"){\r\n                obj[key] = \"Полная\"\r\n            }\r\n        }\r\n    }\r\n\r\n    function updateValues(e){\r\n        var inputName = e.target.name;\r\n        var inputValue = e.target.value;\r\n        if(inputName === 'fullness_data'){\r\n            setFullness_data(inputValue);\r\n        }else if(inputName === 'curvenames'){\r\n            setCurvenames(inputValue);\r\n        }\r\n        else if(inputName === 'mnemodescription'){\r\n            setMnemodescription(inputValue);\r\n        }\r\n     }\r\n\r\n     useEffect(() => {\r\n        setWitsmlData({\r\n            fullness_data: fullness_data,\r\n            curvenames: curvenames,\r\n            mnemodescription: mnemodescription,\r\n            witsml_count: witsml_count,\r\n            status: status\r\n        })\r\n     }, [fullness_data, curvenames, mnemodescription, status])\r\n\r\n     useEffect(() => {\r\n        setFullness_data(witsml.fullness_data);\r\n        setCurvenames(witsml.curvenames);\r\n        setMnemodescription(witsml.mnemodescription);\r\n        setKoef(witsml.witsml_count);\r\n        setStatus(witsml.status);\r\n     }, [witsml])\r\n\r\n    return (\r\n        <>\r\n            <Dialog open={active} onClose={setActive} maxWidth=\"sm\" fullWidth>\r\n                <DialogTitle>\r\n                    Корректность загрузки\r\n                    <div style={{float:\"right\"}}>\r\n                    <BootstrapSwitchButton \r\n                        checked={status} \r\n                        width={150}\r\n                        onChange={(checked) => setStatus(checked)} \r\n                        onlabel=\"Присутствует\" \r\n                        offlabel=\"Отсутствует\" \r\n                        onstyle=\"success\" \r\n                        offstyle=\"danger\" />\r\n                    </div>\r\n                    <br/> данных реального времени (WITSML)\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                <Form>\r\n                    <Form.Group>\r\n                        <Form.Label htmlFor=\"fullness_data\">Полнота предоставляемых данных</Form.Label>\r\n                        <Form.Control disabled={!(role === \"user\" || role === \"superuser\")} as=\"select\" id=\"fullness_data\" name=\"fullness_data\" value={fullness_data} onChange={e => updateValues(e)}>\r\n                            <option></option>\r\n                            <option>Полная</option>\r\n                            <option>Частичная</option>\r\n                            <option>Отсутствует</option>\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n                    <Form.Group>\r\n                        <Form.Label htmlFor=\"curvenames\">Название кривых</Form.Label>\r\n                        <Form.Control disabled={!(role === \"user\" || role === \"superuser\")} as=\"select\" id=\"curvenames\" name=\"curvenames\" value={curvenames} onChange={e => updateValues(e)}>\r\n                            <option></option>\r\n                            <option>Полная</option>\r\n                            <option>Частичная</option>\r\n                            <option>Отсутствует</option>\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n                    <Form.Group>\r\n                        <Form.Label htmlFor=\"mnemodescription\">Описание мнемоник</Form.Label>\r\n                        <Form.Control disabled={!(role === \"user\" || role === \"superuser\")} as=\"select\" id=\"mnemodescription\" name=\"mnemodescription\" value={mnemodescription} onChange={e => updateValues(e)}>\r\n                            <option></option>\r\n                            <option>Полная</option>\r\n                            <option>Частичная</option>\r\n                            <option>Отсутствует</option>\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n                </Form>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                <Button onClick={() => {delete_all_props(witsmlData); onUpdate(witsmlData); calc_koef(witsmlData); setActive()}} style={{outline: \"none\", visibility: (role === \"user\" || role === \"superuser\" ? 'visible' : 'hidden')}}>Удалить</Button>\r\n                <Button onClick={() => {push_all_full(witsmlData); onUpdate(witsmlData); calc_koef(witsmlData); setActive()}} style={{outline: \"none\", visibility: (role === \"user\" || role === \"superuser\" ? 'visible' : 'hidden')}}>Все полные</Button>\r\n                <Button onClick={() => {onUpdate(witsmlData); calc_koef(witsmlData); setActive()}} style={{outline: \"none\", visibility: (role === \"user\" || role === \"superuser\" ? 'visible' : 'hidden')}}>Сохранить</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default WitsmlDialog;"],"sourceRoot":""}